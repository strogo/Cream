package org.campware.cream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.campware.cream.om.map.*;


  
  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed May 04 09:10:56 CEST 2005]
 *
 */
public abstract class BaseProductPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "cream";

     /** the table name for this class */
    public static final String TABLE_NAME = "PRODUCT";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(ProductMapBuilder.CLASS_NAME);
    }

      /** the column name for the PRODUCT_ID field */
    public static final String PRODUCT_ID;
      /** the column name for the PRODUCT_CODE field */
    public static final String PRODUCT_CODE;
      /** the column name for the STATUS field */
    public static final String STATUS;
      /** the column name for the PRIORITY field */
    public static final String PRIORITY;
      /** the column name for the PRODUCT_TYPE field */
    public static final String PRODUCT_TYPE;
      /** the column name for the PRODUCT_CAT_ID field */
    public static final String PRODUCT_CAT_ID;
      /** the column name for the PRODUCT_DESCRIPTION field */
    public static final String PRODUCT_DESCRIPTION;
      /** the column name for the PRODUCT_DISPLAY field */
    public static final String PRODUCT_DISPLAY;
      /** the column name for the BASE_PRICE field */
    public static final String BASE_PRICE;
      /** the column name for the UOM_ID field */
    public static final String UOM_ID;
      /** the column name for the WEB_URL field */
    public static final String WEB_URL;
      /** the column name for the SHOW_ON_PRICELIST field */
    public static final String SHOW_ON_PRICELIST;
      /** the column name for the VENDOR_ID field */
    public static final String VENDOR_ID;
      /** the column name for the VENDORS_CODE field */
    public static final String VENDORS_CODE;
      /** the column name for the EAN_UPC_CODE field */
    public static final String EAN_UPC_CODE;
      /** the column name for the LOCATION field */
    public static final String LOCATION;
      /** the column name for the CUSTOM_1 field */
    public static final String CUSTOM_1;
      /** the column name for the CUSTOM_2 field */
    public static final String CUSTOM_2;
      /** the column name for the CUSTOM_3 field */
    public static final String CUSTOM_3;
      /** the column name for the CUSTOM_4 field */
    public static final String CUSTOM_4;
      /** the column name for the CUSTOM_5 field */
    public static final String CUSTOM_5;
      /** the column name for the CUSTOM_6 field */
    public static final String CUSTOM_6;
      /** the column name for the NOTES field */
    public static final String NOTES;
      /** the column name for the CREATED field */
    public static final String CREATED;
      /** the column name for the MODIFIED field */
    public static final String MODIFIED;
      /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;
      /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;
  
    static
    {
          PRODUCT_ID = "PRODUCT.PRODUCT_ID";
          PRODUCT_CODE = "PRODUCT.PRODUCT_CODE";
          STATUS = "PRODUCT.STATUS";
          PRIORITY = "PRODUCT.PRIORITY";
          PRODUCT_TYPE = "PRODUCT.PRODUCT_TYPE";
          PRODUCT_CAT_ID = "PRODUCT.PRODUCT_CAT_ID";
          PRODUCT_DESCRIPTION = "PRODUCT.PRODUCT_DESCRIPTION";
          PRODUCT_DISPLAY = "PRODUCT.PRODUCT_DISPLAY";
          BASE_PRICE = "PRODUCT.BASE_PRICE";
          UOM_ID = "PRODUCT.UOM_ID";
          WEB_URL = "PRODUCT.WEB_URL";
          SHOW_ON_PRICELIST = "PRODUCT.SHOW_ON_PRICELIST";
          VENDOR_ID = "PRODUCT.VENDOR_ID";
          VENDORS_CODE = "PRODUCT.VENDORS_CODE";
          EAN_UPC_CODE = "PRODUCT.EAN_UPC_CODE";
          LOCATION = "PRODUCT.LOCATION";
          CUSTOM_1 = "PRODUCT.CUSTOM_1";
          CUSTOM_2 = "PRODUCT.CUSTOM_2";
          CUSTOM_3 = "PRODUCT.CUSTOM_3";
          CUSTOM_4 = "PRODUCT.CUSTOM_4";
          CUSTOM_5 = "PRODUCT.CUSTOM_5";
          CUSTOM_6 = "PRODUCT.CUSTOM_6";
          NOTES = "PRODUCT.NOTES";
          CREATED = "PRODUCT.CREATED";
          MODIFIED = "PRODUCT.MODIFIED";
          CREATED_BY = "PRODUCT.CREATED_BY";
          MODIFIED_BY = "PRODUCT.MODIFIED_BY";
          if (Torque.isInit())
        {
            try
            {
                getMapBuilder(ProductMapBuilder.CLASS_NAME);
            }
            catch (Exception e)
            {
                log.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(ProductMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  27;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.campware.cream.om.Product";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }


  
    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseProductPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                                                                                                    
        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
          criteria.addSelectColumn(PRODUCT_ID);
          criteria.addSelectColumn(PRODUCT_CODE);
          criteria.addSelectColumn(STATUS);
          criteria.addSelectColumn(PRIORITY);
          criteria.addSelectColumn(PRODUCT_TYPE);
          criteria.addSelectColumn(PRODUCT_CAT_ID);
          criteria.addSelectColumn(PRODUCT_DESCRIPTION);
          criteria.addSelectColumn(PRODUCT_DISPLAY);
          criteria.addSelectColumn(BASE_PRICE);
          criteria.addSelectColumn(UOM_ID);
          criteria.addSelectColumn(WEB_URL);
          criteria.addSelectColumn(SHOW_ON_PRICELIST);
          criteria.addSelectColumn(VENDOR_ID);
          criteria.addSelectColumn(VENDORS_CODE);
          criteria.addSelectColumn(EAN_UPC_CODE);
          criteria.addSelectColumn(LOCATION);
          criteria.addSelectColumn(CUSTOM_1);
          criteria.addSelectColumn(CUSTOM_2);
          criteria.addSelectColumn(CUSTOM_3);
          criteria.addSelectColumn(CUSTOM_4);
          criteria.addSelectColumn(CUSTOM_5);
          criteria.addSelectColumn(CUSTOM_6);
          criteria.addSelectColumn(NOTES);
          criteria.addSelectColumn(CREATED);
          criteria.addSelectColumn(MODIFIED);
          criteria.addSelectColumn(CREATED_BY);
          criteria.addSelectColumn(MODIFIED_BY);
      }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Product row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Product obj = (Product) cls.newInstance();
            ProductPeer.populateObject(row, offset, obj);
                  obj.setModified(false);
              obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Product obj)
        throws TorqueException
    {
        try
        {
                obj.setProductId(row.getValue(offset + 0).asInt());
                  obj.setProductCode(row.getValue(offset + 1).asString());
                  obj.setStatus(row.getValue(offset + 2).asInt());
                  obj.setPriority(row.getValue(offset + 3).asInt());
                  obj.setProductType(row.getValue(offset + 4).asInt());
                  obj.setProductCatId(row.getValue(offset + 5).asInt());
                  obj.setProductDescription(row.getValue(offset + 6).asString());
                  obj.setProductDisplay(row.getValue(offset + 7).asString());
                  obj.setBasePrice(row.getValue(offset + 8).asDouble());
                  obj.setUomId(row.getValue(offset + 9).asInt());
                  obj.setWebUrl(row.getValue(offset + 10).asString());
                  obj.setShowOnPricelist(row.getValue(offset + 11).asInt());
                  obj.setVendorId(row.getValue(offset + 12).asInt());
                  obj.setVendorsCode(row.getValue(offset + 13).asString());
                  obj.setEanUpcCode(row.getValue(offset + 14).asString());
                  obj.setLocation(row.getValue(offset + 15).asString());
                  obj.setCustom1(row.getValue(offset + 16).asString());
                  obj.setCustom2(row.getValue(offset + 17).asString());
                  obj.setCustom3(row.getValue(offset + 18).asString());
                  obj.setCustom4(row.getValue(offset + 19).asString());
                  obj.setCustom5(row.getValue(offset + 20).asString());
                  obj.setCustom6(row.getValue(offset + 21).asString());
                  obj.setNotes(row.getValue(offset + 22).asString());
                  obj.setCreated(row.getValue(offset + 23).asUtilDate());
                  obj.setModified(row.getValue(offset + 24).asUtilDate());
                  obj.setCreatedBy(row.getValue(offset + 25).asString());
                  obj.setModifiedBy(row.getValue(offset + 26).asString());
              }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseProductPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                                                                                                    
        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
              results.add(ProductPeer.row2Object(row, 1,
                ProductPeer.getOMClass()));
          }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseProductPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                   selectCriteria.put(PRODUCT_ID, criteria.remove(PRODUCT_ID));
                                                                                                                                                                                                                                                                          
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         ProductPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                                                                                                    
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Product obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Product obj) throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj)));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Product obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Product obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Product) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Product obj, Connection con)
        throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Product) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Product obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Product) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Product obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseProductPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(PRODUCT_ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Product obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
            criteria.add(PRODUCT_ID, obj.getProductId());
              criteria.add(PRODUCT_CODE, obj.getProductCode());
              criteria.add(STATUS, obj.getStatus());
              criteria.add(PRIORITY, obj.getPriority());
              criteria.add(PRODUCT_TYPE, obj.getProductType());
              criteria.add(PRODUCT_CAT_ID, obj.getProductCatId());
              criteria.add(PRODUCT_DESCRIPTION, obj.getProductDescription());
              criteria.add(PRODUCT_DISPLAY, obj.getProductDisplay());
              criteria.add(BASE_PRICE, obj.getBasePrice());
              criteria.add(UOM_ID, obj.getUomId());
              criteria.add(WEB_URL, obj.getWebUrl());
              criteria.add(SHOW_ON_PRICELIST, obj.getShowOnPricelist());
              criteria.add(VENDOR_ID, obj.getVendorId());
              criteria.add(VENDORS_CODE, obj.getVendorsCode());
              criteria.add(EAN_UPC_CODE, obj.getEanUpcCode());
              criteria.add(LOCATION, obj.getLocation());
              criteria.add(CUSTOM_1, obj.getCustom1());
              criteria.add(CUSTOM_2, obj.getCustom2());
              criteria.add(CUSTOM_3, obj.getCustom3());
              criteria.add(CUSTOM_4, obj.getCustom4());
              criteria.add(CUSTOM_5, obj.getCustom5());
              criteria.add(CUSTOM_6, obj.getCustom6());
              criteria.add(NOTES, obj.getNotes());
              criteria.add(CREATED, obj.getCreated());
              criteria.add(MODIFIED, obj.getModified());
              criteria.add(CREATED_BY, obj.getCreatedBy());
              criteria.add(MODIFIED_BY, obj.getModifiedBy());
          return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( Product obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
                    criteria.add(PRODUCT_ID, obj.getProductId());
                          criteria.add(PRODUCT_CODE, obj.getProductCode());
                          criteria.add(STATUS, obj.getStatus());
                          criteria.add(PRIORITY, obj.getPriority());
                          criteria.add(PRODUCT_TYPE, obj.getProductType());
                          criteria.add(PRODUCT_CAT_ID, obj.getProductCatId());
                          criteria.add(PRODUCT_DESCRIPTION, obj.getProductDescription());
                          criteria.add(PRODUCT_DISPLAY, obj.getProductDisplay());
                          criteria.add(BASE_PRICE, obj.getBasePrice());
                          criteria.add(UOM_ID, obj.getUomId());
                          criteria.add(WEB_URL, obj.getWebUrl());
                          criteria.add(SHOW_ON_PRICELIST, obj.getShowOnPricelist());
                          criteria.add(VENDOR_ID, obj.getVendorId());
                          criteria.add(VENDORS_CODE, obj.getVendorsCode());
                          criteria.add(EAN_UPC_CODE, obj.getEanUpcCode());
                          criteria.add(LOCATION, obj.getLocation());
                          criteria.add(CUSTOM_1, obj.getCustom1());
                          criteria.add(CUSTOM_2, obj.getCustom2());
                          criteria.add(CUSTOM_3, obj.getCustom3());
                          criteria.add(CUSTOM_4, obj.getCustom4());
                          criteria.add(CUSTOM_5, obj.getCustom5());
                          criteria.add(CUSTOM_6, obj.getCustom6());
                          criteria.add(NOTES, obj.getNotes());
                          criteria.add(CREATED, obj.getCreated());
                          criteria.add(MODIFIED, obj.getModified());
                          criteria.add(CREATED_BY, obj.getCreatedBy());
                          criteria.add(MODIFIED_BY, obj.getModifiedBy());
              return criteria;
    }
 
    
        /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Product retrieveByPK(int pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Product retrieveByPK(int pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
  
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Product retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        Product retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Product retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (Product)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( PRODUCT_ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



              
                                              
                
                

    /**
     * selects a collection of Product objects pre-filled with their
     * ProductCategory objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProductCategory(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ProductPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        ProductCategoryPeer.addSelectColumns(criteria);


                        criteria.addJoin(ProductPeer.PRODUCT_CAT_ID,
            ProductCategoryPeer.PRODUCT_CAT_ID);
        

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product) ProductPeer
                .row2Object(row, 1, omClass);
                     omClass = ProductCategoryPeer.getOMClass();
                    ProductCategory obj2 = (ProductCategory)ProductCategoryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                ProductCategory temp_obj2 = (ProductCategory)temp_obj1.getProductCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addProduct(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Product objects pre-filled with their
     * Uom objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinUom(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ProductPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        UomPeer.addSelectColumns(criteria);


                        criteria.addJoin(ProductPeer.UOM_ID,
            UomPeer.UOM_ID);
        

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product) ProductPeer
                .row2Object(row, 1, omClass);
                     omClass = UomPeer.getOMClass();
                    Uom obj2 = (Uom)UomPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Uom temp_obj2 = (Uom)temp_obj1.getUom();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addProduct(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Product objects pre-filled with their
     * Vendor objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinVendor(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ProductPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        VendorPeer.addSelectColumns(criteria);


                        criteria.addJoin(ProductPeer.VENDOR_ID,
            VendorPeer.VENDOR_ID);
        

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product) ProductPeer
                .row2Object(row, 1, omClass);
                     omClass = VendorPeer.getOMClass();
                    Vendor obj2 = (Vendor)VendorPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Vendor temp_obj2 = (Vendor)temp_obj1.getVendor();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addProduct(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                    
  
                                    
          
        
                                  
                

    /**
     * selects a collection of Product objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProductCategory(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                                                  
                    UomPeer.addSelectColumns(criteria);
        int offset3 = offset2 + UomPeer.numColumns;
                                                                
                    VendorPeer.addSelectColumns(criteria);
        int offset4 = offset3 + VendorPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product)ProductPeer
                .row2Object(row, 1, omClass);
                                                
                                                                  
                                                        
                            
              
                           omClass = UomPeer.getOMClass();
                          Uom obj2 = (Uom)UomPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Uom temp_obj2 = (Uom)temp_obj1.getUom();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = VendorPeer.getOMClass();
                          Vendor obj3 = (Vendor)VendorPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Vendor temp_obj3 = (Vendor)temp_obj1.getVendor();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initProducts();
                obj3.addProduct(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Product objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptUom(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    ProductCategoryPeer.addSelectColumns(criteria);
        int offset3 = offset2 + ProductCategoryPeer.numColumns;
                                                                
                                                  
                    VendorPeer.addSelectColumns(criteria);
        int offset4 = offset3 + VendorPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product)ProductPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = ProductCategoryPeer.getOMClass();
                          ProductCategory obj2 = (ProductCategory)ProductCategoryPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                ProductCategory temp_obj2 = (ProductCategory)temp_obj1.getProductCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = VendorPeer.getOMClass();
                          Vendor obj3 = (Vendor)VendorPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Vendor temp_obj3 = (Vendor)temp_obj1.getVendor();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initProducts();
                obj3.addProduct(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Product objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ProductPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptVendor(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    ProductCategoryPeer.addSelectColumns(criteria);
        int offset3 = offset2 + ProductCategoryPeer.numColumns;
                                                                
                    UomPeer.addSelectColumns(criteria);
        int offset4 = offset3 + UomPeer.numColumns;
                                                                

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ProductPeer.getOMClass();
                    Product obj1 = (Product)ProductPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = ProductCategoryPeer.getOMClass();
                          ProductCategory obj2 = (ProductCategory)ProductCategoryPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                ProductCategory temp_obj2 = (ProductCategory)temp_obj1.getProductCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initProducts();
                obj2.addProduct(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = UomPeer.getOMClass();
                          Uom obj3 = (Uom)UomPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Product temp_obj1 = (Product)results.get(j);
                Uom temp_obj3 = (Uom)temp_obj1.getUom();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addProduct(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initProducts();
                obj3.addProduct(obj1);
            }
                                                                                    
                                              results.add(obj1);
        }
        return results;
    }
                    
  
      /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
   
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
