package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
    
    
    
    
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Contact
 */
public abstract class BaseContact extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final ContactPeer peer =
        new ContactPeer();

        
    /** The value for the contactId field */
    private int contactId;
                                                
    /** The value for the contactCode field */
    private String contactCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
                                          
    /** The value for the customerId field */
    private int customerId = 1000;
                                          
    /** The value for the contactCatId field */
    private int contactCatId = 1000;
                                          
    /** The value for the salutationId field */
    private int salutationId = 1000;
      
    /** The value for the firstName field */
    private String firstName;
      
    /** The value for the lastName field */
    private String lastName;
      
    /** The value for the suffix field */
    private String suffix;
      
    /** The value for the contactDisplay field */
    private String contactDisplay;
      
    /** The value for the dear field */
    private String dear;
      
    /** The value for the address1 field */
    private String address1;
      
    /** The value for the address2 field */
    private String address2;
      
    /** The value for the address3 field */
    private String address3;
      
    /** The value for the city field */
    private String city;
      
    /** The value for the zip field */
    private String zip;
      
    /** The value for the state field */
    private String state;
                                          
    /** The value for the countryId field */
    private int countryId = 1000;
                                          
    /** The value for the regionId field */
    private int regionId = 1000;
      
    /** The value for the secAddress1 field */
    private String secAddress1;
      
    /** The value for the secAddress2 field */
    private String secAddress2;
      
    /** The value for the secAddress3 field */
    private String secAddress3;
      
    /** The value for the secCity field */
    private String secCity;
      
    /** The value for the secZip field */
    private String secZip;
      
    /** The value for the secState field */
    private String secState;
                                          
    /** The value for the secCountryId field */
    private int secCountryId = 1000;
                                          
    /** The value for the secRegionId field */
    private int secRegionId = 1000;
      
    /** The value for the phoneHome field */
    private String phoneHome;
      
    /** The value for the phoneWork field */
    private String phoneWork;
      
    /** The value for the phoneMobile field */
    private String phoneMobile;
      
    /** The value for the fax field */
    private String fax;
      
    /** The value for the email field */
    private String email;
      
    /** The value for the email2 field */
    private String email2;
                                          
    /** The value for the emailFormat field */
    private int emailFormat = 10;
                                          
    /** The value for the sendNews field */
    private int sendNews = 20;
      
    /** The value for the webUrl field */
    private String webUrl;
                                          
    /** The value for the languageId field */
    private int languageId = 1000;
                                          
    /** The value for the gender field */
    private int gender = 10;
      
    /** The value for the birthdate field */
    private Date birthdate;
      
    /** The value for the anniversary field */
    private Date anniversary;
      
    /** The value for the jobTitle field */
    private String jobTitle;
                                          
    /** The value for the jobPositionId field */
    private int jobPositionId = 1000;
      
    /** The value for the department field */
    private String department;
      
    /** The value for the assistantName field */
    private String assistantName;
      
    /** The value for the assistantPhone field */
    private String assistantPhone;
      
    /** The value for the assistantEmail field */
    private String assistantEmail;
      
    /** The value for the custom1 field */
    private String custom1;
      
    /** The value for the custom2 field */
    private String custom2;
      
    /** The value for the custom3 field */
    private String custom3;
      
    /** The value for the custom4 field */
    private String custom4;
      
    /** The value for the custom5 field */
    private String custom5;
      
    /** The value for the custom6 field */
    private String custom6;
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the ContactId
     *
     * @return int
     */
    public int getContactId()
    {
        return contactId;
    }

                                              
    /**
     * Set the value of ContactId
     *
     * @param v new value
     */
    public void setContactId(int v) throws TorqueException
    {
    
                  if (this.contactId != v)
              {
            this.contactId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated InboxEvent
        if (collInboxEvents != null)
        {
            for (int i = 0; i < collInboxEvents.size(); i++)
            {
                ((InboxEvent) collInboxEvents.get(i))
                    .setContactId(v);
            }
        }
                                                    
                  // update associated OutboxEvent
        if (collOutboxEvents != null)
        {
            for (int i = 0; i < collOutboxEvents.size(); i++)
            {
                ((OutboxEvent) collOutboxEvents.get(i))
                    .setContactId(v);
            }
        }
                                                    
                  // update associated Task
        if (collTasks != null)
        {
            for (int i = 0; i < collTasks.size(); i++)
            {
                ((Task) collTasks.get(i))
                    .setContactId(v);
            }
        }
                                }
  
    /**
     * Get the ContactCode
     *
     * @return String
     */
    public String getContactCode()
    {
        return contactCode;
    }

                        
    /**
     * Set the value of ContactCode
     *
     * @param v new value
     */
    public void setContactCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contactCode, v))
              {
            this.contactCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerId
     *
     * @return int
     */
    public int getCustomerId()
    {
        return customerId;
    }

                              
    /**
     * Set the value of CustomerId
     *
     * @param v new value
     */
    public void setCustomerId(int v) throws TorqueException
    {
    
                  if (this.customerId != v)
              {
            this.customerId = v;
            setModified(true);
        }
    
                          
                if (aCustomer != null && !(aCustomer.getCustomerId() == v))
                {
            aCustomer = null;
        }
      
              }
  
    /**
     * Get the ContactCatId
     *
     * @return int
     */
    public int getContactCatId()
    {
        return contactCatId;
    }

                              
    /**
     * Set the value of ContactCatId
     *
     * @param v new value
     */
    public void setContactCatId(int v) throws TorqueException
    {
    
                  if (this.contactCatId != v)
              {
            this.contactCatId = v;
            setModified(true);
        }
    
                          
                if (aContactCategory != null && !(aContactCategory.getContactCatId() == v))
                {
            aContactCategory = null;
        }
      
              }
  
    /**
     * Get the SalutationId
     *
     * @return int
     */
    public int getSalutationId()
    {
        return salutationId;
    }

                              
    /**
     * Set the value of SalutationId
     *
     * @param v new value
     */
    public void setSalutationId(int v) throws TorqueException
    {
    
                  if (this.salutationId != v)
              {
            this.salutationId = v;
            setModified(true);
        }
    
                          
                if (aSalutation != null && !(aSalutation.getSalutationId() == v))
                {
            aSalutation = null;
        }
      
              }
  
    /**
     * Get the FirstName
     *
     * @return String
     */
    public String getFirstName()
    {
        return firstName;
    }

                        
    /**
     * Set the value of FirstName
     *
     * @param v new value
     */
    public void setFirstName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.firstName, v))
              {
            this.firstName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LastName
     *
     * @return String
     */
    public String getLastName()
    {
        return lastName;
    }

                        
    /**
     * Set the value of LastName
     *
     * @param v new value
     */
    public void setLastName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.lastName, v))
              {
            this.lastName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Suffix
     *
     * @return String
     */
    public String getSuffix()
    {
        return suffix;
    }

                        
    /**
     * Set the value of Suffix
     *
     * @param v new value
     */
    public void setSuffix(String v) 
    {
    
                  if (!ObjectUtils.equals(this.suffix, v))
              {
            this.suffix = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ContactDisplay
     *
     * @return String
     */
    public String getContactDisplay()
    {
        return contactDisplay;
    }

                        
    /**
     * Set the value of ContactDisplay
     *
     * @param v new value
     */
    public void setContactDisplay(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contactDisplay, v))
              {
            this.contactDisplay = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Dear
     *
     * @return String
     */
    public String getDear()
    {
        return dear;
    }

                        
    /**
     * Set the value of Dear
     *
     * @param v new value
     */
    public void setDear(String v) 
    {
    
                  if (!ObjectUtils.equals(this.dear, v))
              {
            this.dear = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address1
     *
     * @return String
     */
    public String getAddress1()
    {
        return address1;
    }

                        
    /**
     * Set the value of Address1
     *
     * @param v new value
     */
    public void setAddress1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address1, v))
              {
            this.address1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address2
     *
     * @return String
     */
    public String getAddress2()
    {
        return address2;
    }

                        
    /**
     * Set the value of Address2
     *
     * @param v new value
     */
    public void setAddress2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address2, v))
              {
            this.address2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address3
     *
     * @return String
     */
    public String getAddress3()
    {
        return address3;
    }

                        
    /**
     * Set the value of Address3
     *
     * @param v new value
     */
    public void setAddress3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address3, v))
              {
            this.address3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the City
     *
     * @return String
     */
    public String getCity()
    {
        return city;
    }

                        
    /**
     * Set the value of City
     *
     * @param v new value
     */
    public void setCity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.city, v))
              {
            this.city = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Zip
     *
     * @return String
     */
    public String getZip()
    {
        return zip;
    }

                        
    /**
     * Set the value of Zip
     *
     * @param v new value
     */
    public void setZip(String v) 
    {
    
                  if (!ObjectUtils.equals(this.zip, v))
              {
            this.zip = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CountryId
     *
     * @return int
     */
    public int getCountryId()
    {
        return countryId;
    }

                              
    /**
     * Set the value of CountryId
     *
     * @param v new value
     */
    public void setCountryId(int v) throws TorqueException
    {
    
                  if (this.countryId != v)
              {
            this.countryId = v;
            setModified(true);
        }
    
                                                                  
                if (aCountryRelatedByCountryId != null && !(aCountryRelatedByCountryId.getCountryId() == v))
                {
            aCountryRelatedByCountryId = null;
        }
      
              }
  
    /**
     * Get the RegionId
     *
     * @return int
     */
    public int getRegionId()
    {
        return regionId;
    }

                              
    /**
     * Set the value of RegionId
     *
     * @param v new value
     */
    public void setRegionId(int v) throws TorqueException
    {
    
                  if (this.regionId != v)
              {
            this.regionId = v;
            setModified(true);
        }
    
                                                                  
                if (aRegionRelatedByRegionId != null && !(aRegionRelatedByRegionId.getRegionId() == v))
                {
            aRegionRelatedByRegionId = null;
        }
      
              }
  
    /**
     * Get the SecAddress1
     *
     * @return String
     */
    public String getSecAddress1()
    {
        return secAddress1;
    }

                        
    /**
     * Set the value of SecAddress1
     *
     * @param v new value
     */
    public void setSecAddress1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secAddress1, v))
              {
            this.secAddress1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecAddress2
     *
     * @return String
     */
    public String getSecAddress2()
    {
        return secAddress2;
    }

                        
    /**
     * Set the value of SecAddress2
     *
     * @param v new value
     */
    public void setSecAddress2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secAddress2, v))
              {
            this.secAddress2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecAddress3
     *
     * @return String
     */
    public String getSecAddress3()
    {
        return secAddress3;
    }

                        
    /**
     * Set the value of SecAddress3
     *
     * @param v new value
     */
    public void setSecAddress3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secAddress3, v))
              {
            this.secAddress3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecCity
     *
     * @return String
     */
    public String getSecCity()
    {
        return secCity;
    }

                        
    /**
     * Set the value of SecCity
     *
     * @param v new value
     */
    public void setSecCity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secCity, v))
              {
            this.secCity = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecZip
     *
     * @return String
     */
    public String getSecZip()
    {
        return secZip;
    }

                        
    /**
     * Set the value of SecZip
     *
     * @param v new value
     */
    public void setSecZip(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secZip, v))
              {
            this.secZip = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecState
     *
     * @return String
     */
    public String getSecState()
    {
        return secState;
    }

                        
    /**
     * Set the value of SecState
     *
     * @param v new value
     */
    public void setSecState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.secState, v))
              {
            this.secState = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SecCountryId
     *
     * @return int
     */
    public int getSecCountryId()
    {
        return secCountryId;
    }

                              
    /**
     * Set the value of SecCountryId
     *
     * @param v new value
     */
    public void setSecCountryId(int v) throws TorqueException
    {
    
                  if (this.secCountryId != v)
              {
            this.secCountryId = v;
            setModified(true);
        }
    
                                                                  
                if (aCountryRelatedBySecCountryId != null && !(aCountryRelatedBySecCountryId.getCountryId() == v))
                {
            aCountryRelatedBySecCountryId = null;
        }
      
              }
  
    /**
     * Get the SecRegionId
     *
     * @return int
     */
    public int getSecRegionId()
    {
        return secRegionId;
    }

                              
    /**
     * Set the value of SecRegionId
     *
     * @param v new value
     */
    public void setSecRegionId(int v) throws TorqueException
    {
    
                  if (this.secRegionId != v)
              {
            this.secRegionId = v;
            setModified(true);
        }
    
                                                                  
                if (aRegionRelatedBySecRegionId != null && !(aRegionRelatedBySecRegionId.getRegionId() == v))
                {
            aRegionRelatedBySecRegionId = null;
        }
      
              }
  
    /**
     * Get the PhoneHome
     *
     * @return String
     */
    public String getPhoneHome()
    {
        return phoneHome;
    }

                        
    /**
     * Set the value of PhoneHome
     *
     * @param v new value
     */
    public void setPhoneHome(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phoneHome, v))
              {
            this.phoneHome = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PhoneWork
     *
     * @return String
     */
    public String getPhoneWork()
    {
        return phoneWork;
    }

                        
    /**
     * Set the value of PhoneWork
     *
     * @param v new value
     */
    public void setPhoneWork(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phoneWork, v))
              {
            this.phoneWork = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PhoneMobile
     *
     * @return String
     */
    public String getPhoneMobile()
    {
        return phoneMobile;
    }

                        
    /**
     * Set the value of PhoneMobile
     *
     * @param v new value
     */
    public void setPhoneMobile(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phoneMobile, v))
              {
            this.phoneMobile = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fax
     *
     * @return String
     */
    public String getFax()
    {
        return fax;
    }

                        
    /**
     * Set the value of Fax
     *
     * @param v new value
     */
    public void setFax(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fax, v))
              {
            this.fax = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

                        
    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email, v))
              {
            this.email = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Email2
     *
     * @return String
     */
    public String getEmail2()
    {
        return email2;
    }

                        
    /**
     * Set the value of Email2
     *
     * @param v new value
     */
    public void setEmail2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email2, v))
              {
            this.email2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EmailFormat
     *
     * @return int
     */
    public int getEmailFormat()
    {
        return emailFormat;
    }

                        
    /**
     * Set the value of EmailFormat
     *
     * @param v new value
     */
    public void setEmailFormat(int v) 
    {
    
                  if (this.emailFormat != v)
              {
            this.emailFormat = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SendNews
     *
     * @return int
     */
    public int getSendNews()
    {
        return sendNews;
    }

                        
    /**
     * Set the value of SendNews
     *
     * @param v new value
     */
    public void setSendNews(int v) 
    {
    
                  if (this.sendNews != v)
              {
            this.sendNews = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the WebUrl
     *
     * @return String
     */
    public String getWebUrl()
    {
        return webUrl;
    }

                        
    /**
     * Set the value of WebUrl
     *
     * @param v new value
     */
    public void setWebUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.webUrl, v))
              {
            this.webUrl = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LanguageId
     *
     * @return int
     */
    public int getLanguageId()
    {
        return languageId;
    }

                              
    /**
     * Set the value of LanguageId
     *
     * @param v new value
     */
    public void setLanguageId(int v) throws TorqueException
    {
    
                  if (this.languageId != v)
              {
            this.languageId = v;
            setModified(true);
        }
    
                          
                if (aLanguage != null && !(aLanguage.getLanguageId() == v))
                {
            aLanguage = null;
        }
      
              }
  
    /**
     * Get the Gender
     *
     * @return int
     */
    public int getGender()
    {
        return gender;
    }

                        
    /**
     * Set the value of Gender
     *
     * @param v new value
     */
    public void setGender(int v) 
    {
    
                  if (this.gender != v)
              {
            this.gender = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Birthdate
     *
     * @return Date
     */
    public Date getBirthdate()
    {
        return birthdate;
    }

                        
    /**
     * Set the value of Birthdate
     *
     * @param v new value
     */
    public void setBirthdate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.birthdate, v))
              {
            this.birthdate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Anniversary
     *
     * @return Date
     */
    public Date getAnniversary()
    {
        return anniversary;
    }

                        
    /**
     * Set the value of Anniversary
     *
     * @param v new value
     */
    public void setAnniversary(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.anniversary, v))
              {
            this.anniversary = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the JobTitle
     *
     * @return String
     */
    public String getJobTitle()
    {
        return jobTitle;
    }

                        
    /**
     * Set the value of JobTitle
     *
     * @param v new value
     */
    public void setJobTitle(String v) 
    {
    
                  if (!ObjectUtils.equals(this.jobTitle, v))
              {
            this.jobTitle = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the JobPositionId
     *
     * @return int
     */
    public int getJobPositionId()
    {
        return jobPositionId;
    }

                              
    /**
     * Set the value of JobPositionId
     *
     * @param v new value
     */
    public void setJobPositionId(int v) throws TorqueException
    {
    
                  if (this.jobPositionId != v)
              {
            this.jobPositionId = v;
            setModified(true);
        }
    
                          
                if (aJobPosition != null && !(aJobPosition.getJobPositionId() == v))
                {
            aJobPosition = null;
        }
      
              }
  
    /**
     * Get the Department
     *
     * @return String
     */
    public String getDepartment()
    {
        return department;
    }

                        
    /**
     * Set the value of Department
     *
     * @param v new value
     */
    public void setDepartment(String v) 
    {
    
                  if (!ObjectUtils.equals(this.department, v))
              {
            this.department = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AssistantName
     *
     * @return String
     */
    public String getAssistantName()
    {
        return assistantName;
    }

                        
    /**
     * Set the value of AssistantName
     *
     * @param v new value
     */
    public void setAssistantName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.assistantName, v))
              {
            this.assistantName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AssistantPhone
     *
     * @return String
     */
    public String getAssistantPhone()
    {
        return assistantPhone;
    }

                        
    /**
     * Set the value of AssistantPhone
     *
     * @param v new value
     */
    public void setAssistantPhone(String v) 
    {
    
                  if (!ObjectUtils.equals(this.assistantPhone, v))
              {
            this.assistantPhone = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the AssistantEmail
     *
     * @return String
     */
    public String getAssistantEmail()
    {
        return assistantEmail;
    }

                        
    /**
     * Set the value of AssistantEmail
     *
     * @param v new value
     */
    public void setAssistantEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.assistantEmail, v))
              {
            this.assistantEmail = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom1
     *
     * @return String
     */
    public String getCustom1()
    {
        return custom1;
    }

                        
    /**
     * Set the value of Custom1
     *
     * @param v new value
     */
    public void setCustom1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom1, v))
              {
            this.custom1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom2
     *
     * @return String
     */
    public String getCustom2()
    {
        return custom2;
    }

                        
    /**
     * Set the value of Custom2
     *
     * @param v new value
     */
    public void setCustom2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom2, v))
              {
            this.custom2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom3
     *
     * @return String
     */
    public String getCustom3()
    {
        return custom3;
    }

                        
    /**
     * Set the value of Custom3
     *
     * @param v new value
     */
    public void setCustom3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom3, v))
              {
            this.custom3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom4
     *
     * @return String
     */
    public String getCustom4()
    {
        return custom4;
    }

                        
    /**
     * Set the value of Custom4
     *
     * @param v new value
     */
    public void setCustom4(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom4, v))
              {
            this.custom4 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom5
     *
     * @return String
     */
    public String getCustom5()
    {
        return custom5;
    }

                        
    /**
     * Set the value of Custom5
     *
     * @param v new value
     */
    public void setCustom5(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom5, v))
              {
            this.custom5 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom6
     *
     * @return String
     */
    public String getCustom6()
    {
        return custom6;
    }

                        
    /**
     * Set the value of Custom6
     *
     * @param v new value
     */
    public void setCustom6(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom6, v))
              {
            this.custom6 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Customer aCustomer;

    /**
     * Declares an association between this object and a Customer object
     *
     * @param v Customer
     * @throws TorqueException
     */
    public void setCustomer(Customer v) throws TorqueException
    {
            if (v == null)
        {
                          setCustomerId( 1000);
              }
        else
        {
            setCustomerId(v.getCustomerId());
        }
            aCustomer = v;
    }

                                            
    /**
     * Get the associated Customer object
     *
     * @return the associated Customer object
     * @throws TorqueException
     */
    public Customer getCustomer() throws TorqueException
    {
        if (aCustomer == null && (this.customerId != 0))
        {
                          aCustomer = CustomerPeer.retrieveByPK(SimpleKey.keyFor(this.customerId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Customer obj = CustomerPeer.retrieveByPK(this.customerId);
               obj.addContacts(this);
            */
        }
        return aCustomer;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCustomerKey(ObjectKey key) throws TorqueException
    {
      
                        setCustomerId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Salutation aSalutation;

    /**
     * Declares an association between this object and a Salutation object
     *
     * @param v Salutation
     * @throws TorqueException
     */
    public void setSalutation(Salutation v) throws TorqueException
    {
            if (v == null)
        {
                          setSalutationId( 1000);
              }
        else
        {
            setSalutationId(v.getSalutationId());
        }
            aSalutation = v;
    }

                                            
    /**
     * Get the associated Salutation object
     *
     * @return the associated Salutation object
     * @throws TorqueException
     */
    public Salutation getSalutation() throws TorqueException
    {
        if (aSalutation == null && (this.salutationId != 0))
        {
                          aSalutation = SalutationPeer.retrieveByPK(SimpleKey.keyFor(this.salutationId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Salutation obj = SalutationPeer.retrieveByPK(this.salutationId);
               obj.addContacts(this);
            */
        }
        return aSalutation;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setSalutationKey(ObjectKey key) throws TorqueException
    {
      
                        setSalutationId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private ContactCategory aContactCategory;

    /**
     * Declares an association between this object and a ContactCategory object
     *
     * @param v ContactCategory
     * @throws TorqueException
     */
    public void setContactCategory(ContactCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setContactCatId( 1000);
              }
        else
        {
            setContactCatId(v.getContactCatId());
        }
            aContactCategory = v;
    }

                                            
    /**
     * Get the associated ContactCategory object
     *
     * @return the associated ContactCategory object
     * @throws TorqueException
     */
    public ContactCategory getContactCategory() throws TorqueException
    {
        if (aContactCategory == null && (this.contactCatId != 0))
        {
                          aContactCategory = ContactCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.contactCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ContactCategory obj = ContactCategoryPeer.retrieveByPK(this.contactCatId);
               obj.addContacts(this);
            */
        }
        return aContactCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setContactCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setContactCatId(((NumberKey) key).intValue());
                  }
    
    
                        
        
        private Country aCountryRelatedByCountryId;

    /**
     * Declares an association between this object and a Country object
     *
     * @param v Country
     * @throws TorqueException
     */
    public void setCountryRelatedByCountryId(Country v) throws TorqueException
    {
            if (v == null)
        {
                          setCountryId( 1000);
              }
        else
        {
            setCountryId(v.getCountryId());
        }
            aCountryRelatedByCountryId = v;
    }

                                            
    /**
     * Get the associated Country object
     *
     * @return the associated Country object
     * @throws TorqueException
     */
    public Country getCountryRelatedByCountryId() throws TorqueException
    {
        if (aCountryRelatedByCountryId == null && (this.countryId != 0))
        {
                          aCountryRelatedByCountryId = CountryPeer.retrieveByPK(SimpleKey.keyFor(this.countryId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Country obj = CountryPeer.retrieveByPK(this.countryId);
               obj.addContactsRelatedByCountryId(this);
            */
        }
        return aCountryRelatedByCountryId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCountryRelatedByCountryIdKey(ObjectKey key) throws TorqueException
    {
      
                        setCountryId(((NumberKey) key).intValue());
                  }
    
    
                        
        
        private Region aRegionRelatedByRegionId;

    /**
     * Declares an association between this object and a Region object
     *
     * @param v Region
     * @throws TorqueException
     */
    public void setRegionRelatedByRegionId(Region v) throws TorqueException
    {
            if (v == null)
        {
                          setRegionId( 1000);
              }
        else
        {
            setRegionId(v.getRegionId());
        }
            aRegionRelatedByRegionId = v;
    }

                                            
    /**
     * Get the associated Region object
     *
     * @return the associated Region object
     * @throws TorqueException
     */
    public Region getRegionRelatedByRegionId() throws TorqueException
    {
        if (aRegionRelatedByRegionId == null && (this.regionId != 0))
        {
                          aRegionRelatedByRegionId = RegionPeer.retrieveByPK(SimpleKey.keyFor(this.regionId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Region obj = RegionPeer.retrieveByPK(this.regionId);
               obj.addContactsRelatedByRegionId(this);
            */
        }
        return aRegionRelatedByRegionId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setRegionRelatedByRegionIdKey(ObjectKey key) throws TorqueException
    {
      
                        setRegionId(((NumberKey) key).intValue());
                  }
    
    
                        
        
        private Country aCountryRelatedBySecCountryId;

    /**
     * Declares an association between this object and a Country object
     *
     * @param v Country
     * @throws TorqueException
     */
    public void setCountryRelatedBySecCountryId(Country v) throws TorqueException
    {
            if (v == null)
        {
                          setSecCountryId( 1000);
              }
        else
        {
            setSecCountryId(v.getCountryId());
        }
            aCountryRelatedBySecCountryId = v;
    }

                                            
    /**
     * Get the associated Country object
     *
     * @return the associated Country object
     * @throws TorqueException
     */
    public Country getCountryRelatedBySecCountryId() throws TorqueException
    {
        if (aCountryRelatedBySecCountryId == null && (this.secCountryId != 0))
        {
                          aCountryRelatedBySecCountryId = CountryPeer.retrieveByPK(SimpleKey.keyFor(this.secCountryId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Country obj = CountryPeer.retrieveByPK(this.secCountryId);
               obj.addContactsRelatedBySecCountryId(this);
            */
        }
        return aCountryRelatedBySecCountryId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCountryRelatedBySecCountryIdKey(ObjectKey key) throws TorqueException
    {
      
                        setSecCountryId(((NumberKey) key).intValue());
                  }
    
    
                        
        
        private Region aRegionRelatedBySecRegionId;

    /**
     * Declares an association between this object and a Region object
     *
     * @param v Region
     * @throws TorqueException
     */
    public void setRegionRelatedBySecRegionId(Region v) throws TorqueException
    {
            if (v == null)
        {
                          setSecRegionId( 1000);
              }
        else
        {
            setSecRegionId(v.getRegionId());
        }
            aRegionRelatedBySecRegionId = v;
    }

                                            
    /**
     * Get the associated Region object
     *
     * @return the associated Region object
     * @throws TorqueException
     */
    public Region getRegionRelatedBySecRegionId() throws TorqueException
    {
        if (aRegionRelatedBySecRegionId == null && (this.secRegionId != 0))
        {
                          aRegionRelatedBySecRegionId = RegionPeer.retrieveByPK(SimpleKey.keyFor(this.secRegionId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Region obj = RegionPeer.retrieveByPK(this.secRegionId);
               obj.addContactsRelatedBySecRegionId(this);
            */
        }
        return aRegionRelatedBySecRegionId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setRegionRelatedBySecRegionIdKey(ObjectKey key) throws TorqueException
    {
      
                        setSecRegionId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Language aLanguage;

    /**
     * Declares an association between this object and a Language object
     *
     * @param v Language
     * @throws TorqueException
     */
    public void setLanguage(Language v) throws TorqueException
    {
            if (v == null)
        {
                          setLanguageId( 1000);
              }
        else
        {
            setLanguageId(v.getLanguageId());
        }
            aLanguage = v;
    }

                                            
    /**
     * Get the associated Language object
     *
     * @return the associated Language object
     * @throws TorqueException
     */
    public Language getLanguage() throws TorqueException
    {
        if (aLanguage == null && (this.languageId != 0))
        {
                          aLanguage = LanguagePeer.retrieveByPK(SimpleKey.keyFor(this.languageId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Language obj = LanguagePeer.retrieveByPK(this.languageId);
               obj.addContacts(this);
            */
        }
        return aLanguage;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLanguageKey(ObjectKey key) throws TorqueException
    {
      
                        setLanguageId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private JobPosition aJobPosition;

    /**
     * Declares an association between this object and a JobPosition object
     *
     * @param v JobPosition
     * @throws TorqueException
     */
    public void setJobPosition(JobPosition v) throws TorqueException
    {
            if (v == null)
        {
                          setJobPositionId( 1000);
              }
        else
        {
            setJobPositionId(v.getJobPositionId());
        }
            aJobPosition = v;
    }

                                            
    /**
     * Get the associated JobPosition object
     *
     * @return the associated JobPosition object
     * @throws TorqueException
     */
    public JobPosition getJobPosition() throws TorqueException
    {
        if (aJobPosition == null && (this.jobPositionId != 0))
        {
                          aJobPosition = JobPositionPeer.retrieveByPK(SimpleKey.keyFor(this.jobPositionId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               JobPosition obj = JobPositionPeer.retrieveByPK(this.jobPositionId);
               obj.addContacts(this);
            */
        }
        return aJobPosition;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setJobPositionKey(ObjectKey key) throws TorqueException
    {
      
                        setJobPositionId(((NumberKey) key).intValue());
                  }
       
                                
            
          /**
     * Collection to store aggregation of collInboxEvents
     */
    protected List collInboxEvents;

    /**
     * Temporary storage of collInboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInboxEvents()
    {
        if (collInboxEvents == null)
        {
            collInboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a InboxEvent object to this object
     * through the InboxEvent foreign key attribute
     *
     * @param l InboxEvent
     * @throws TorqueException
     */
    public void addInboxEvent(InboxEvent l) throws TorqueException
    {
        getInboxEvents().add(l);
        l.setContact((Contact) this);
    }

    /**
     * The criteria used to select the current contents of collInboxEvents
     */
    private Criteria lastInboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getInboxEvents() throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10));
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInboxEvents(Criteria criteria) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(InboxEventPeer.CONTACT_ID, getContactId() );
                        collInboxEvents = InboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                            if (!lastInboxEventsCriteria.equals(criteria))
                {
                    collInboxEvents = InboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Connection con) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10), con);
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                         collInboxEvents = InboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                             if (!lastInboxEventsCriteria.equals(criteria))
                 {
                     collInboxEvents = InboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInboxEventsCriteria = criteria;

         return collInboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getInboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                              collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getInboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                              collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getInboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getInboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOutboxEvents
     */
    protected List collOutboxEvents;

    /**
     * Temporary storage of collOutboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOutboxEvents()
    {
        if (collOutboxEvents == null)
        {
            collOutboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a OutboxEvent object to this object
     * through the OutboxEvent foreign key attribute
     *
     * @param l OutboxEvent
     * @throws TorqueException
     */
    public void addOutboxEvent(OutboxEvent l) throws TorqueException
    {
        getOutboxEvents().add(l);
        l.setContact((Contact) this);
    }

    /**
     * The criteria used to select the current contents of collOutboxEvents
     */
    private Criteria lastOutboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOutboxEvents() throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10));
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOutboxEvents(Criteria criteria) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(OutboxEventPeer.CONTACT_ID, getContactId() );
                        collOutboxEvents = OutboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                            if (!lastOutboxEventsCriteria.equals(criteria))
                {
                    collOutboxEvents = OutboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Connection con) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10), con);
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                         collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                             if (!lastOutboxEventsCriteria.equals(criteria))
                 {
                     collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOutboxEventsCriteria = criteria;

         return collOutboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getOutboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getOutboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getOutboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getOutboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CONTACT_ID, getContactId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collTasks
     */
    protected List collTasks;

    /**
     * Temporary storage of collTasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasks()
    {
        if (collTasks == null)
        {
            collTasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Task object to this object
     * through the Task foreign key attribute
     *
     * @param l Task
     * @throws TorqueException
     */
    public void addTask(Task l) throws TorqueException
    {
        getTasks().add(l);
        l.setContact((Contact) this);
    }

    /**
     * The criteria used to select the current contents of collTasks
     */
    private Criteria lastTasksCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasks() throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10));
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasks(Criteria criteria) throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                        criteria.add(TaskPeer.CONTACT_ID, getContactId() );
                        collTasks = TaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(TaskPeer.CONTACT_ID, getContactId());
                            if (!lastTasksCriteria.equals(criteria))
                {
                    collTasks = TaskPeer.doSelect(criteria);
                }
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Connection con) throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10), con);
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Contact is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                         criteria.add(TaskPeer.CONTACT_ID, getContactId());
                         collTasks = TaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(TaskPeer.CONTACT_ID, getContactId());
                             if (!lastTasksCriteria.equals(criteria))
                 {
                     collTasks = TaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasksCriteria = criteria;

         return collTasks;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getTasksJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.CONTACT_ID, getContactId());
                              collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.CONTACT_ID, getContactId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getTasksJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.CONTACT_ID, getContactId());
                              collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.CONTACT_ID, getContactId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getTasksJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.CONTACT_ID, getContactId());
                              collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.CONTACT_ID, getContactId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Contact is new, it will return
     * an empty collection; or if this Contact has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Contact.
     */
    protected List getTasksJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.CONTACT_ID, getContactId());
                              collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.CONTACT_ID, getContactId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ContactId");
              fieldNames.add("ContactCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("CustomerId");
              fieldNames.add("ContactCatId");
              fieldNames.add("SalutationId");
              fieldNames.add("FirstName");
              fieldNames.add("LastName");
              fieldNames.add("Suffix");
              fieldNames.add("ContactDisplay");
              fieldNames.add("Dear");
              fieldNames.add("Address1");
              fieldNames.add("Address2");
              fieldNames.add("Address3");
              fieldNames.add("City");
              fieldNames.add("Zip");
              fieldNames.add("State");
              fieldNames.add("CountryId");
              fieldNames.add("RegionId");
              fieldNames.add("SecAddress1");
              fieldNames.add("SecAddress2");
              fieldNames.add("SecAddress3");
              fieldNames.add("SecCity");
              fieldNames.add("SecZip");
              fieldNames.add("SecState");
              fieldNames.add("SecCountryId");
              fieldNames.add("SecRegionId");
              fieldNames.add("PhoneHome");
              fieldNames.add("PhoneWork");
              fieldNames.add("PhoneMobile");
              fieldNames.add("Fax");
              fieldNames.add("Email");
              fieldNames.add("Email2");
              fieldNames.add("EmailFormat");
              fieldNames.add("SendNews");
              fieldNames.add("WebUrl");
              fieldNames.add("LanguageId");
              fieldNames.add("Gender");
              fieldNames.add("Birthdate");
              fieldNames.add("Anniversary");
              fieldNames.add("JobTitle");
              fieldNames.add("JobPositionId");
              fieldNames.add("Department");
              fieldNames.add("AssistantName");
              fieldNames.add("AssistantPhone");
              fieldNames.add("AssistantEmail");
              fieldNames.add("Custom1");
              fieldNames.add("Custom2");
              fieldNames.add("Custom3");
              fieldNames.add("Custom4");
              fieldNames.add("Custom5");
              fieldNames.add("Custom6");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ContactId"))
        {
                return new Integer(getContactId());
            }
          if (name.equals("ContactCode"))
        {
                return getContactCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("CustomerId"))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals("ContactCatId"))
        {
                return new Integer(getContactCatId());
            }
          if (name.equals("SalutationId"))
        {
                return new Integer(getSalutationId());
            }
          if (name.equals("FirstName"))
        {
                return getFirstName();
            }
          if (name.equals("LastName"))
        {
                return getLastName();
            }
          if (name.equals("Suffix"))
        {
                return getSuffix();
            }
          if (name.equals("ContactDisplay"))
        {
                return getContactDisplay();
            }
          if (name.equals("Dear"))
        {
                return getDear();
            }
          if (name.equals("Address1"))
        {
                return getAddress1();
            }
          if (name.equals("Address2"))
        {
                return getAddress2();
            }
          if (name.equals("Address3"))
        {
                return getAddress3();
            }
          if (name.equals("City"))
        {
                return getCity();
            }
          if (name.equals("Zip"))
        {
                return getZip();
            }
          if (name.equals("State"))
        {
                return getState();
            }
          if (name.equals("CountryId"))
        {
                return new Integer(getCountryId());
            }
          if (name.equals("RegionId"))
        {
                return new Integer(getRegionId());
            }
          if (name.equals("SecAddress1"))
        {
                return getSecAddress1();
            }
          if (name.equals("SecAddress2"))
        {
                return getSecAddress2();
            }
          if (name.equals("SecAddress3"))
        {
                return getSecAddress3();
            }
          if (name.equals("SecCity"))
        {
                return getSecCity();
            }
          if (name.equals("SecZip"))
        {
                return getSecZip();
            }
          if (name.equals("SecState"))
        {
                return getSecState();
            }
          if (name.equals("SecCountryId"))
        {
                return new Integer(getSecCountryId());
            }
          if (name.equals("SecRegionId"))
        {
                return new Integer(getSecRegionId());
            }
          if (name.equals("PhoneHome"))
        {
                return getPhoneHome();
            }
          if (name.equals("PhoneWork"))
        {
                return getPhoneWork();
            }
          if (name.equals("PhoneMobile"))
        {
                return getPhoneMobile();
            }
          if (name.equals("Fax"))
        {
                return getFax();
            }
          if (name.equals("Email"))
        {
                return getEmail();
            }
          if (name.equals("Email2"))
        {
                return getEmail2();
            }
          if (name.equals("EmailFormat"))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals("SendNews"))
        {
                return new Integer(getSendNews());
            }
          if (name.equals("WebUrl"))
        {
                return getWebUrl();
            }
          if (name.equals("LanguageId"))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals("Gender"))
        {
                return new Integer(getGender());
            }
          if (name.equals("Birthdate"))
        {
                return getBirthdate();
            }
          if (name.equals("Anniversary"))
        {
                return getAnniversary();
            }
          if (name.equals("JobTitle"))
        {
                return getJobTitle();
            }
          if (name.equals("JobPositionId"))
        {
                return new Integer(getJobPositionId());
            }
          if (name.equals("Department"))
        {
                return getDepartment();
            }
          if (name.equals("AssistantName"))
        {
                return getAssistantName();
            }
          if (name.equals("AssistantPhone"))
        {
                return getAssistantPhone();
            }
          if (name.equals("AssistantEmail"))
        {
                return getAssistantEmail();
            }
          if (name.equals("Custom1"))
        {
                return getCustom1();
            }
          if (name.equals("Custom2"))
        {
                return getCustom2();
            }
          if (name.equals("Custom3"))
        {
                return getCustom3();
            }
          if (name.equals("Custom4"))
        {
                return getCustom4();
            }
          if (name.equals("Custom5"))
        {
                return getCustom5();
            }
          if (name.equals("Custom6"))
        {
                return getCustom6();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ContactPeer.CONTACT_ID))
        {
                return new Integer(getContactId());
            }
          if (name.equals(ContactPeer.CONTACT_CODE))
        {
                return getContactCode();
            }
          if (name.equals(ContactPeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(ContactPeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(ContactPeer.CUSTOMER_ID))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals(ContactPeer.CONTACT_CAT_ID))
        {
                return new Integer(getContactCatId());
            }
          if (name.equals(ContactPeer.SALUTATION_ID))
        {
                return new Integer(getSalutationId());
            }
          if (name.equals(ContactPeer.FIRST_NAME))
        {
                return getFirstName();
            }
          if (name.equals(ContactPeer.LAST_NAME))
        {
                return getLastName();
            }
          if (name.equals(ContactPeer.SUFFIX))
        {
                return getSuffix();
            }
          if (name.equals(ContactPeer.CONTACT_DISPLAY))
        {
                return getContactDisplay();
            }
          if (name.equals(ContactPeer.DEAR))
        {
                return getDear();
            }
          if (name.equals(ContactPeer.ADDRESS_1))
        {
                return getAddress1();
            }
          if (name.equals(ContactPeer.ADDRESS_2))
        {
                return getAddress2();
            }
          if (name.equals(ContactPeer.ADDRESS_3))
        {
                return getAddress3();
            }
          if (name.equals(ContactPeer.CITY))
        {
                return getCity();
            }
          if (name.equals(ContactPeer.ZIP))
        {
                return getZip();
            }
          if (name.equals(ContactPeer.STATE))
        {
                return getState();
            }
          if (name.equals(ContactPeer.COUNTRY_ID))
        {
                return new Integer(getCountryId());
            }
          if (name.equals(ContactPeer.REGION_ID))
        {
                return new Integer(getRegionId());
            }
          if (name.equals(ContactPeer.SEC_ADDRESS_1))
        {
                return getSecAddress1();
            }
          if (name.equals(ContactPeer.SEC_ADDRESS_2))
        {
                return getSecAddress2();
            }
          if (name.equals(ContactPeer.SEC_ADDRESS_3))
        {
                return getSecAddress3();
            }
          if (name.equals(ContactPeer.SEC_CITY))
        {
                return getSecCity();
            }
          if (name.equals(ContactPeer.SEC_ZIP))
        {
                return getSecZip();
            }
          if (name.equals(ContactPeer.SEC_STATE))
        {
                return getSecState();
            }
          if (name.equals(ContactPeer.SEC_COUNTRY_ID))
        {
                return new Integer(getSecCountryId());
            }
          if (name.equals(ContactPeer.SEC_REGION_ID))
        {
                return new Integer(getSecRegionId());
            }
          if (name.equals(ContactPeer.PHONE_HOME))
        {
                return getPhoneHome();
            }
          if (name.equals(ContactPeer.PHONE_WORK))
        {
                return getPhoneWork();
            }
          if (name.equals(ContactPeer.PHONE_MOBILE))
        {
                return getPhoneMobile();
            }
          if (name.equals(ContactPeer.FAX))
        {
                return getFax();
            }
          if (name.equals(ContactPeer.EMAIL))
        {
                return getEmail();
            }
          if (name.equals(ContactPeer.EMAIL_2))
        {
                return getEmail2();
            }
          if (name.equals(ContactPeer.EMAIL_FORMAT))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals(ContactPeer.SEND_NEWS))
        {
                return new Integer(getSendNews());
            }
          if (name.equals(ContactPeer.WEB_URL))
        {
                return getWebUrl();
            }
          if (name.equals(ContactPeer.LANGUAGE_ID))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals(ContactPeer.GENDER))
        {
                return new Integer(getGender());
            }
          if (name.equals(ContactPeer.BIRTHDATE))
        {
                return getBirthdate();
            }
          if (name.equals(ContactPeer.ANNIVERSARY))
        {
                return getAnniversary();
            }
          if (name.equals(ContactPeer.JOB_TITLE))
        {
                return getJobTitle();
            }
          if (name.equals(ContactPeer.JOB_POSITION_ID))
        {
                return new Integer(getJobPositionId());
            }
          if (name.equals(ContactPeer.DEPARTMENT))
        {
                return getDepartment();
            }
          if (name.equals(ContactPeer.ASSISTANT_NAME))
        {
                return getAssistantName();
            }
          if (name.equals(ContactPeer.ASSISTANT_PHONE))
        {
                return getAssistantPhone();
            }
          if (name.equals(ContactPeer.ASSISTANT_EMAIL))
        {
                return getAssistantEmail();
            }
          if (name.equals(ContactPeer.CUSTOM_1))
        {
                return getCustom1();
            }
          if (name.equals(ContactPeer.CUSTOM_2))
        {
                return getCustom2();
            }
          if (name.equals(ContactPeer.CUSTOM_3))
        {
                return getCustom3();
            }
          if (name.equals(ContactPeer.CUSTOM_4))
        {
                return getCustom4();
            }
          if (name.equals(ContactPeer.CUSTOM_5))
        {
                return getCustom5();
            }
          if (name.equals(ContactPeer.CUSTOM_6))
        {
                return getCustom6();
            }
          if (name.equals(ContactPeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(ContactPeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(ContactPeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(ContactPeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(ContactPeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getContactId());
            }
              if (pos == 1)
        {
                return getContactCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return new Integer(getCustomerId());
            }
              if (pos == 5)
        {
                return new Integer(getContactCatId());
            }
              if (pos == 6)
        {
                return new Integer(getSalutationId());
            }
              if (pos == 7)
        {
                return getFirstName();
            }
              if (pos == 8)
        {
                return getLastName();
            }
              if (pos == 9)
        {
                return getSuffix();
            }
              if (pos == 10)
        {
                return getContactDisplay();
            }
              if (pos == 11)
        {
                return getDear();
            }
              if (pos == 12)
        {
                return getAddress1();
            }
              if (pos == 13)
        {
                return getAddress2();
            }
              if (pos == 14)
        {
                return getAddress3();
            }
              if (pos == 15)
        {
                return getCity();
            }
              if (pos == 16)
        {
                return getZip();
            }
              if (pos == 17)
        {
                return getState();
            }
              if (pos == 18)
        {
                return new Integer(getCountryId());
            }
              if (pos == 19)
        {
                return new Integer(getRegionId());
            }
              if (pos == 20)
        {
                return getSecAddress1();
            }
              if (pos == 21)
        {
                return getSecAddress2();
            }
              if (pos == 22)
        {
                return getSecAddress3();
            }
              if (pos == 23)
        {
                return getSecCity();
            }
              if (pos == 24)
        {
                return getSecZip();
            }
              if (pos == 25)
        {
                return getSecState();
            }
              if (pos == 26)
        {
                return new Integer(getSecCountryId());
            }
              if (pos == 27)
        {
                return new Integer(getSecRegionId());
            }
              if (pos == 28)
        {
                return getPhoneHome();
            }
              if (pos == 29)
        {
                return getPhoneWork();
            }
              if (pos == 30)
        {
                return getPhoneMobile();
            }
              if (pos == 31)
        {
                return getFax();
            }
              if (pos == 32)
        {
                return getEmail();
            }
              if (pos == 33)
        {
                return getEmail2();
            }
              if (pos == 34)
        {
                return new Integer(getEmailFormat());
            }
              if (pos == 35)
        {
                return new Integer(getSendNews());
            }
              if (pos == 36)
        {
                return getWebUrl();
            }
              if (pos == 37)
        {
                return new Integer(getLanguageId());
            }
              if (pos == 38)
        {
                return new Integer(getGender());
            }
              if (pos == 39)
        {
                return getBirthdate();
            }
              if (pos == 40)
        {
                return getAnniversary();
            }
              if (pos == 41)
        {
                return getJobTitle();
            }
              if (pos == 42)
        {
                return new Integer(getJobPositionId());
            }
              if (pos == 43)
        {
                return getDepartment();
            }
              if (pos == 44)
        {
                return getAssistantName();
            }
              if (pos == 45)
        {
                return getAssistantPhone();
            }
              if (pos == 46)
        {
                return getAssistantEmail();
            }
              if (pos == 47)
        {
                return getCustom1();
            }
              if (pos == 48)
        {
                return getCustom2();
            }
              if (pos == 49)
        {
                return getCustom3();
            }
              if (pos == 50)
        {
                return getCustom4();
            }
              if (pos == 51)
        {
                return getCustom5();
            }
              if (pos == 52)
        {
                return getCustom6();
            }
              if (pos == 53)
        {
                return getNotes();
            }
              if (pos == 54)
        {
                return getCreated();
            }
              if (pos == 55)
        {
                return getModified();
            }
              if (pos == 56)
        {
                return getCreatedBy();
            }
              if (pos == 57)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ContactPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ContactPeer.doInsert((Contact) this, con);
                    setNew(false);
                }
                else
                {
                    ContactPeer.doUpdate((Contact) this, con);
                }
            }

                                      
                
                    if (collInboxEvents != null)
            {
                for (int i = 0; i < collInboxEvents.size(); i++)
                {
                    ((InboxEvent) collInboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOutboxEvents != null)
            {
                for (int i = 0; i < collOutboxEvents.size(); i++)
                {
                    ((OutboxEvent) collOutboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collTasks != null)
            {
                for (int i = 0; i < collTasks.size(); i++)
                {
                    ((Task) collTasks.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key contactId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setContactId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setContactId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getContactId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Contact copy() throws TorqueException
    {
        return copyInto(new Contact());
    }
  
    protected Contact copyInto(Contact copyObj) throws TorqueException
    {
          copyObj.setContactId(contactId);
          copyObj.setContactCode(contactCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setCustomerId(customerId);
          copyObj.setContactCatId(contactCatId);
          copyObj.setSalutationId(salutationId);
          copyObj.setFirstName(firstName);
          copyObj.setLastName(lastName);
          copyObj.setSuffix(suffix);
          copyObj.setContactDisplay(contactDisplay);
          copyObj.setDear(dear);
          copyObj.setAddress1(address1);
          copyObj.setAddress2(address2);
          copyObj.setAddress3(address3);
          copyObj.setCity(city);
          copyObj.setZip(zip);
          copyObj.setState(state);
          copyObj.setCountryId(countryId);
          copyObj.setRegionId(regionId);
          copyObj.setSecAddress1(secAddress1);
          copyObj.setSecAddress2(secAddress2);
          copyObj.setSecAddress3(secAddress3);
          copyObj.setSecCity(secCity);
          copyObj.setSecZip(secZip);
          copyObj.setSecState(secState);
          copyObj.setSecCountryId(secCountryId);
          copyObj.setSecRegionId(secRegionId);
          copyObj.setPhoneHome(phoneHome);
          copyObj.setPhoneWork(phoneWork);
          copyObj.setPhoneMobile(phoneMobile);
          copyObj.setFax(fax);
          copyObj.setEmail(email);
          copyObj.setEmail2(email2);
          copyObj.setEmailFormat(emailFormat);
          copyObj.setSendNews(sendNews);
          copyObj.setWebUrl(webUrl);
          copyObj.setLanguageId(languageId);
          copyObj.setGender(gender);
          copyObj.setBirthdate(birthdate);
          copyObj.setAnniversary(anniversary);
          copyObj.setJobTitle(jobTitle);
          copyObj.setJobPositionId(jobPositionId);
          copyObj.setDepartment(department);
          copyObj.setAssistantName(assistantName);
          copyObj.setAssistantPhone(assistantPhone);
          copyObj.setAssistantEmail(assistantEmail);
          copyObj.setCustom1(custom1);
          copyObj.setCustom2(custom2);
          copyObj.setCustom3(custom3);
          copyObj.setCustom4(custom4);
          copyObj.setCustom5(custom5);
          copyObj.setCustom6(custom6);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setContactId( 0);
                                                                                                                                                                                                                                                                                                                                                                  
                                      
                            
        List v = getInboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            InboxEvent obj = (InboxEvent) v.get(i);
            copyObj.addInboxEvent(obj.copy());
        }
                                                  
                            
        v = getOutboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            OutboxEvent obj = (OutboxEvent) v.get(i);
            copyObj.addOutboxEvent(obj.copy());
        }
                                                  
                            
        v = getTasks();
        for (int i = 0; i < v.size(); i++)
        {
            Task obj = (Task) v.get(i);
            copyObj.addTask(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ContactPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Contact:\n");
        str.append("ContactId = ")
               .append(getContactId())
             .append("\n");
        str.append("ContactCode = ")
               .append(getContactCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("CustomerId = ")
               .append(getCustomerId())
             .append("\n");
        str.append("ContactCatId = ")
               .append(getContactCatId())
             .append("\n");
        str.append("SalutationId = ")
               .append(getSalutationId())
             .append("\n");
        str.append("FirstName = ")
               .append(getFirstName())
             .append("\n");
        str.append("LastName = ")
               .append(getLastName())
             .append("\n");
        str.append("Suffix = ")
               .append(getSuffix())
             .append("\n");
        str.append("ContactDisplay = ")
               .append(getContactDisplay())
             .append("\n");
        str.append("Dear = ")
               .append(getDear())
             .append("\n");
        str.append("Address1 = ")
               .append(getAddress1())
             .append("\n");
        str.append("Address2 = ")
               .append(getAddress2())
             .append("\n");
        str.append("Address3 = ")
               .append(getAddress3())
             .append("\n");
        str.append("City = ")
               .append(getCity())
             .append("\n");
        str.append("Zip = ")
               .append(getZip())
             .append("\n");
        str.append("State = ")
               .append(getState())
             .append("\n");
        str.append("CountryId = ")
               .append(getCountryId())
             .append("\n");
        str.append("RegionId = ")
               .append(getRegionId())
             .append("\n");
        str.append("SecAddress1 = ")
               .append(getSecAddress1())
             .append("\n");
        str.append("SecAddress2 = ")
               .append(getSecAddress2())
             .append("\n");
        str.append("SecAddress3 = ")
               .append(getSecAddress3())
             .append("\n");
        str.append("SecCity = ")
               .append(getSecCity())
             .append("\n");
        str.append("SecZip = ")
               .append(getSecZip())
             .append("\n");
        str.append("SecState = ")
               .append(getSecState())
             .append("\n");
        str.append("SecCountryId = ")
               .append(getSecCountryId())
             .append("\n");
        str.append("SecRegionId = ")
               .append(getSecRegionId())
             .append("\n");
        str.append("PhoneHome = ")
               .append(getPhoneHome())
             .append("\n");
        str.append("PhoneWork = ")
               .append(getPhoneWork())
             .append("\n");
        str.append("PhoneMobile = ")
               .append(getPhoneMobile())
             .append("\n");
        str.append("Fax = ")
               .append(getFax())
             .append("\n");
        str.append("Email = ")
               .append(getEmail())
             .append("\n");
        str.append("Email2 = ")
               .append(getEmail2())
             .append("\n");
        str.append("EmailFormat = ")
               .append(getEmailFormat())
             .append("\n");
        str.append("SendNews = ")
               .append(getSendNews())
             .append("\n");
        str.append("WebUrl = ")
               .append(getWebUrl())
             .append("\n");
        str.append("LanguageId = ")
               .append(getLanguageId())
             .append("\n");
        str.append("Gender = ")
               .append(getGender())
             .append("\n");
        str.append("Birthdate = ")
               .append(getBirthdate())
             .append("\n");
        str.append("Anniversary = ")
               .append(getAnniversary())
             .append("\n");
        str.append("JobTitle = ")
               .append(getJobTitle())
             .append("\n");
        str.append("JobPositionId = ")
               .append(getJobPositionId())
             .append("\n");
        str.append("Department = ")
               .append(getDepartment())
             .append("\n");
        str.append("AssistantName = ")
               .append(getAssistantName())
             .append("\n");
        str.append("AssistantPhone = ")
               .append(getAssistantPhone())
             .append("\n");
        str.append("AssistantEmail = ")
               .append(getAssistantEmail())
             .append("\n");
        str.append("Custom1 = ")
               .append(getCustom1())
             .append("\n");
        str.append("Custom2 = ")
               .append(getCustom2())
             .append("\n");
        str.append("Custom3 = ")
               .append(getCustom3())
             .append("\n");
        str.append("Custom4 = ")
               .append(getCustom4())
             .append("\n");
        str.append("Custom5 = ")
               .append(getCustom5())
             .append("\n");
        str.append("Custom6 = ")
               .append(getCustom6())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
