package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Carrier
 */
public abstract class BaseCarrier extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final CarrierPeer peer =
        new CarrierPeer();

        
    /** The value for the carrierId field */
    private int carrierId;
      
    /** The value for the carrierName field */
    private String carrierName;
  
    
    /**
     * Get the CarrierId
     *
     * @return int
     */
    public int getCarrierId()
    {
        return carrierId;
    }

                                              
    /**
     * Set the value of CarrierId
     *
     * @param v new value
     */
    public void setCarrierId(int v) throws TorqueException
    {
    
                  if (this.carrierId != v)
              {
            this.carrierId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Sorder
        if (collSorders != null)
        {
            for (int i = 0; i < collSorders.size(); i++)
            {
                ((Sorder) collSorders.get(i))
                    .setCarrierId(v);
            }
        }
                                                    
                  // update associated Shipment
        if (collShipments != null)
        {
            for (int i = 0; i < collShipments.size(); i++)
            {
                ((Shipment) collShipments.get(i))
                    .setCarrierId(v);
            }
        }
                                                    
                  // update associated PrintSubscription
        if (collPrintSubscriptions != null)
        {
            for (int i = 0; i < collPrintSubscriptions.size(); i++)
            {
                ((PrintSubscription) collPrintSubscriptions.get(i))
                    .setCarrierId(v);
            }
        }
                                }
  
    /**
     * Get the CarrierName
     *
     * @return String
     */
    public String getCarrierName()
    {
        return carrierName;
    }

                        
    /**
     * Set the value of CarrierName
     *
     * @param v new value
     */
    public void setCarrierName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.carrierName, v))
              {
            this.carrierName = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
          /**
     * Collection to store aggregation of collSorders
     */
    protected List collSorders;

    /**
     * Temporary storage of collSorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorders()
    {
        if (collSorders == null)
        {
            collSorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorder(Sorder l) throws TorqueException
    {
        getSorders().add(l);
        l.setCarrier((Carrier) this);
    }

    /**
     * The criteria used to select the current contents of collSorders
     */
    private Criteria lastSordersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorders() throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10));
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorders(Criteria criteria) throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId() );
                        collSorders = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                            if (!lastSordersCriteria.equals(criteria))
                {
                    collSorders = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Connection con) throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10), con);
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                         collSorders = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                             if (!lastSordersCriteria.equals(criteria))
                 {
                     collSorders = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersCriteria = criteria;

         return collSorders;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinOpportunity(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getSordersJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                              collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CARRIER_ID, getCarrierId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collShipments
     */
    protected List collShipments;

    /**
     * Temporary storage of collShipments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipments()
    {
        if (collShipments == null)
        {
            collShipments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Shipment object to this object
     * through the Shipment foreign key attribute
     *
     * @param l Shipment
     * @throws TorqueException
     */
    public void addShipment(Shipment l) throws TorqueException
    {
        getShipments().add(l);
        l.setCarrier((Carrier) this);
    }

    /**
     * The criteria used to select the current contents of collShipments
     */
    private Criteria lastShipmentsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipments() throws TorqueException
    {
              if (collShipments == null)
        {
            collShipments = getShipments(new Criteria(10));
        }
        return collShipments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipments(Criteria criteria) throws TorqueException
    {
              if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId() );
                        collShipments = ShipmentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                            if (!lastShipmentsCriteria.equals(criteria))
                {
                    collShipments = ShipmentPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipments(Connection con) throws TorqueException
    {
              if (collShipments == null)
        {
            collShipments = getShipments(new Criteria(10), con);
        }
        return collShipments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipments(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                         collShipments = ShipmentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                             if (!lastShipmentsCriteria.equals(criteria))
                 {
                     collShipments = ShipmentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentsCriteria = criteria;

         return collShipments;
           }

                                          
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getShipmentsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                              collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getShipmentsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                              collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getShipmentsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                              collShipments = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getShipmentsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                              collShipments = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getShipmentsJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                              collShipments = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CARRIER_ID, getCarrierId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPrintSubscriptions
     */
    protected List collPrintSubscriptions;

    /**
     * Temporary storage of collPrintSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPrintSubscriptions()
    {
        if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a PrintSubscription object to this object
     * through the PrintSubscription foreign key attribute
     *
     * @param l PrintSubscription
     * @throws TorqueException
     */
    public void addPrintSubscription(PrintSubscription l) throws TorqueException
    {
        getPrintSubscriptions().add(l);
        l.setCarrier((Carrier) this);
    }

    /**
     * The criteria used to select the current contents of collPrintSubscriptions
     */
    private Criteria lastPrintSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions() throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10));
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId() );
                        collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                            if (!lastPrintSubscriptionsCriteria.equals(criteria))
                {
                    collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Connection con) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10), con);
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Carrier is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                         collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                             if (!lastPrintSubscriptionsCriteria.equals(criteria))
                 {
                     collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPrintSubscriptionsCriteria = criteria;

         return collPrintSubscriptions;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Carrier is new, it will return
     * an empty collection; or if this Carrier has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Carrier.
     */
    protected List getPrintSubscriptionsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CARRIER_ID, getCarrierId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("CarrierId");
              fieldNames.add("CarrierName");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("CarrierId"))
        {
                return new Integer(getCarrierId());
            }
          if (name.equals("CarrierName"))
        {
                return getCarrierName();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CarrierPeer.CARRIER_ID))
        {
                return new Integer(getCarrierId());
            }
          if (name.equals(CarrierPeer.CARRIER_NAME))
        {
                return getCarrierName();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getCarrierId());
            }
              if (pos == 1)
        {
                return getCarrierName();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CarrierPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CarrierPeer.doInsert((Carrier) this, con);
                    setNew(false);
                }
                else
                {
                    CarrierPeer.doUpdate((Carrier) this, con);
                }
            }

                                      
                
                    if (collSorders != null)
            {
                for (int i = 0; i < collSorders.size(); i++)
                {
                    ((Sorder) collSorders.get(i)).save(con);
                }
            }
                                                  
                
                    if (collShipments != null)
            {
                for (int i = 0; i < collShipments.size(); i++)
                {
                    ((Shipment) collShipments.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPrintSubscriptions != null)
            {
                for (int i = 0; i < collPrintSubscriptions.size(); i++)
                {
                    ((PrintSubscription) collPrintSubscriptions.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key carrierId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setCarrierId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setCarrierId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getCarrierId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Carrier copy() throws TorqueException
    {
        return copyInto(new Carrier());
    }
  
    protected Carrier copyInto(Carrier copyObj) throws TorqueException
    {
          copyObj.setCarrierId(carrierId);
          copyObj.setCarrierName(carrierName);
  
                            copyObj.setCarrierId( 0);
                  
                                      
                            
        List v = getSorders();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorder(obj.copy());
        }
                                                  
                            
        v = getShipments();
        for (int i = 0; i < v.size(); i++)
        {
            Shipment obj = (Shipment) v.get(i);
            copyObj.addShipment(obj.copy());
        }
                                                  
                            
        v = getPrintSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            PrintSubscription obj = (PrintSubscription) v.get(i);
            copyObj.addPrintSubscription(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CarrierPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Carrier:\n");
        str.append("CarrierId = ")
               .append(getCarrierId())
             .append("\n");
        str.append("CarrierName = ")
               .append(getCarrierName())
             .append("\n");
        return(str.toString());
    }
}
