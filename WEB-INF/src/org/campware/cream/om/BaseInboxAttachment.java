package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed May 04 09:10:56 CEST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to InboxAttachment
 */
public abstract class BaseInboxAttachment extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final InboxAttachmentPeer peer =
        new InboxAttachmentPeer();

        
    /** The value for the inboxAttachmentId field */
    private int inboxAttachmentId;
                                          
    /** The value for the inboxEventId field */
    private int inboxEventId = 1000;
      
    /** The value for the contentType field */
    private String contentType;
      
    /** The value for the contentDisposition field */
    private String contentDisposition;
      
    /** The value for the contentId field */
    private String contentId;
      
    /** The value for the fileName field */
    private String fileName;
      
    /** The value for the content field */
    private String content;
  
    
    /**
     * Get the InboxAttachmentId
     *
     * @return int
     */
    public int getInboxAttachmentId()
    {
        return inboxAttachmentId;
    }

                        
    /**
     * Set the value of InboxAttachmentId
     *
     * @param v new value
     */
    public void setInboxAttachmentId(int v) 
    {
    
                  if (this.inboxAttachmentId != v)
              {
            this.inboxAttachmentId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the InboxEventId
     *
     * @return int
     */
    public int getInboxEventId()
    {
        return inboxEventId;
    }

                              
    /**
     * Set the value of InboxEventId
     *
     * @param v new value
     */
    public void setInboxEventId(int v) throws TorqueException
    {
    
                  if (this.inboxEventId != v)
              {
            this.inboxEventId = v;
            setModified(true);
        }
    
                          
                if (aInboxEvent != null && !(aInboxEvent.getInboxEventId() == v))
                {
            aInboxEvent = null;
        }
      
              }
  
    /**
     * Get the ContentType
     *
     * @return String
     */
    public String getContentType()
    {
        return contentType;
    }

                        
    /**
     * Set the value of ContentType
     *
     * @param v new value
     */
    public void setContentType(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contentType, v))
              {
            this.contentType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ContentDisposition
     *
     * @return String
     */
    public String getContentDisposition()
    {
        return contentDisposition;
    }

                        
    /**
     * Set the value of ContentDisposition
     *
     * @param v new value
     */
    public void setContentDisposition(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contentDisposition, v))
              {
            this.contentDisposition = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ContentId
     *
     * @return String
     */
    public String getContentId()
    {
        return contentId;
    }

                        
    /**
     * Set the value of ContentId
     *
     * @param v new value
     */
    public void setContentId(String v) 
    {
    
                  if (!ObjectUtils.equals(this.contentId, v))
              {
            this.contentId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the FileName
     *
     * @return String
     */
    public String getFileName()
    {
        return fileName;
    }

                        
    /**
     * Set the value of FileName
     *
     * @param v new value
     */
    public void setFileName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fileName, v))
              {
            this.fileName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Content
     *
     * @return String
     */
    public String getContent()
    {
        return content;
    }

                        
    /**
     * Set the value of Content
     *
     * @param v new value
     */
    public void setContent(String v) 
    {
    
                  if (!ObjectUtils.equals(this.content, v))
              {
            this.content = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private InboxEvent aInboxEvent;

    /**
     * Declares an association between this object and a InboxEvent object
     *
     * @param v InboxEvent
     * @throws TorqueException
     */
    public void setInboxEvent(InboxEvent v) throws TorqueException
    {
            if (v == null)
        {
                          setInboxEventId( 1000);
              }
        else
        {
            setInboxEventId(v.getInboxEventId());
        }
            aInboxEvent = v;
    }

                                            
    /**
     * Get the associated InboxEvent object
     *
     * @return the associated InboxEvent object
     * @throws TorqueException
     */
    public InboxEvent getInboxEvent() throws TorqueException
    {
        if (aInboxEvent == null && (this.inboxEventId != 0))
        {
                          aInboxEvent = InboxEventPeer.retrieveByPK(SimpleKey.keyFor(this.inboxEventId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               InboxEvent obj = InboxEventPeer.retrieveByPK(this.inboxEventId);
               obj.addInboxAttachments(this);
            */
        }
        return aInboxEvent;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setInboxEventKey(ObjectKey key) throws TorqueException
    {
      
                        setInboxEventId(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("InboxAttachmentId");
              fieldNames.add("InboxEventId");
              fieldNames.add("ContentType");
              fieldNames.add("ContentDisposition");
              fieldNames.add("ContentId");
              fieldNames.add("FileName");
              fieldNames.add("Content");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("InboxAttachmentId"))
        {
                return new Integer(getInboxAttachmentId());
            }
          if (name.equals("InboxEventId"))
        {
                return new Integer(getInboxEventId());
            }
          if (name.equals("ContentType"))
        {
                return getContentType();
            }
          if (name.equals("ContentDisposition"))
        {
                return getContentDisposition();
            }
          if (name.equals("ContentId"))
        {
                return getContentId();
            }
          if (name.equals("FileName"))
        {
                return getFileName();
            }
          if (name.equals("Content"))
        {
                return getContent();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(InboxAttachmentPeer.INBOX_ATTACHMENT_ID))
        {
                return new Integer(getInboxAttachmentId());
            }
          if (name.equals(InboxAttachmentPeer.INBOX_EVENT_ID))
        {
                return new Integer(getInboxEventId());
            }
          if (name.equals(InboxAttachmentPeer.CONTENT_TYPE))
        {
                return getContentType();
            }
          if (name.equals(InboxAttachmentPeer.CONTENT_DISPOSITION))
        {
                return getContentDisposition();
            }
          if (name.equals(InboxAttachmentPeer.CONTENT_ID))
        {
                return getContentId();
            }
          if (name.equals(InboxAttachmentPeer.FILE_NAME))
        {
                return getFileName();
            }
          if (name.equals(InboxAttachmentPeer.CONTENT))
        {
                return getContent();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getInboxAttachmentId());
            }
              if (pos == 1)
        {
                return new Integer(getInboxEventId());
            }
              if (pos == 2)
        {
                return getContentType();
            }
              if (pos == 3)
        {
                return getContentDisposition();
            }
              if (pos == 4)
        {
                return getContentId();
            }
              if (pos == 5)
        {
                return getFileName();
            }
              if (pos == 6)
        {
                return getContent();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(InboxAttachmentPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    InboxAttachmentPeer.doInsert((InboxAttachment) this, con);
                    setNew(false);
                }
                else
                {
                    InboxAttachmentPeer.doUpdate((InboxAttachment) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key inboxAttachmentId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setInboxAttachmentId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setInboxAttachmentId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getInboxAttachmentId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public InboxAttachment copy() throws TorqueException
    {
        return copyInto(new InboxAttachment());
    }
  
    protected InboxAttachment copyInto(InboxAttachment copyObj) throws TorqueException
    {
          copyObj.setInboxAttachmentId(inboxAttachmentId);
          copyObj.setInboxEventId(inboxEventId);
          copyObj.setContentType(contentType);
          copyObj.setContentDisposition(contentDisposition);
          copyObj.setContentId(contentId);
          copyObj.setFileName(fileName);
          copyObj.setContent(content);
  
                            copyObj.setInboxAttachmentId( 0);
                                                
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public InboxAttachmentPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("InboxAttachment:\n");
        str.append("InboxAttachmentId = ")
               .append(getInboxAttachmentId())
             .append("\n");
        str.append("InboxEventId = ")
               .append(getInboxEventId())
             .append("\n");
        str.append("ContentType = ")
               .append(getContentType())
             .append("\n");
        str.append("ContentDisposition = ")
               .append(getContentDisposition())
             .append("\n");
        str.append("ContentId = ")
               .append(getContentId())
             .append("\n");
        str.append("FileName = ")
               .append(getFileName())
             .append("\n");
        str.append("Content = ")
               .append(getContent())
             .append("\n");
        return(str.toString());
    }
}
