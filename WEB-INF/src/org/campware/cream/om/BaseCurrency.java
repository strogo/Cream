package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Wed May 04 09:10:56 CEST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Currency
 */
public abstract class BaseCurrency extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final CurrencyPeer peer =
        new CurrencyPeer();

        
    /** The value for the currencyId field */
    private int currencyId;
      
    /** The value for the currencyName field */
    private String currencyName;
      
    /** The value for the currencyCode field */
    private String currencyCode;
                                  
    /** The value for the currencyRate field */
    private BigDecimal currencyRate= new BigDecimal(1);
  
    
    /**
     * Get the CurrencyId
     *
     * @return int
     */
    public int getCurrencyId()
    {
        return currencyId;
    }

                                              
    /**
     * Set the value of CurrencyId
     *
     * @param v new value
     */
    public void setCurrencyId(int v) throws TorqueException
    {
    
                  if (this.currencyId != v)
              {
            this.currencyId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Sorder
        if (collSorders != null)
        {
            for (int i = 0; i < collSorders.size(); i++)
            {
                ((Sorder) collSorders.get(i))
                    .setCurrencyId(v);
            }
        }
                                                    
                  // update associated Payment
        if (collPayments != null)
        {
            for (int i = 0; i < collPayments.size(); i++)
            {
                ((Payment) collPayments.get(i))
                    .setCurrencyId(v);
            }
        }
                                                    
                  // update associated SorderItem
        if (collSorderItems != null)
        {
            for (int i = 0; i < collSorderItems.size(); i++)
            {
                ((SorderItem) collSorderItems.get(i))
                    .setCurrencyId(v);
            }
        }
                                                    
                  // update associated PaymentItem
        if (collPaymentItems != null)
        {
            for (int i = 0; i < collPaymentItems.size(); i++)
            {
                ((PaymentItem) collPaymentItems.get(i))
                    .setCurrencyId(v);
            }
        }
                                }
  
    /**
     * Get the CurrencyName
     *
     * @return String
     */
    public String getCurrencyName()
    {
        return currencyName;
    }

                        
    /**
     * Set the value of CurrencyName
     *
     * @param v new value
     */
    public void setCurrencyName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.currencyName, v))
              {
            this.currencyName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CurrencyCode
     *
     * @return String
     */
    public String getCurrencyCode()
    {
        return currencyCode;
    }

                        
    /**
     * Set the value of CurrencyCode
     *
     * @param v new value
     */
    public void setCurrencyCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.currencyCode, v))
              {
            this.currencyCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CurrencyRate
     *
     * @return BigDecimal
     */
    public BigDecimal getCurrencyRate()
    {
        return currencyRate;
    }

                        
    /**
     * Set the value of CurrencyRate
     *
     * @param v new value
     */
    public void setCurrencyRate(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.currencyRate, v))
              {
            this.currencyRate = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
          /**
     * Collection to store aggregation of collSorders
     */
    protected List collSorders;

    /**
     * Temporary storage of collSorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorders()
    {
        if (collSorders == null)
        {
            collSorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorder(Sorder l) throws TorqueException
    {
        getSorders().add(l);
        l.setCurrency((Currency) this);
    }

    /**
     * The criteria used to select the current contents of collSorders
     */
    private Criteria lastSordersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorders() throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10));
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorders(Criteria criteria) throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId() );
                        collSorders = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                            if (!lastSordersCriteria.equals(criteria))
                {
                    collSorders = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Connection con) throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10), con);
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                         collSorders = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                             if (!lastSordersCriteria.equals(criteria))
                 {
                     collSorders = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersCriteria = criteria;

         return collSorders;
           }

                                          
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSordersJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSordersJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSordersJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                              collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSordersJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                              collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSordersJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                              collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPayments
     */
    protected List collPayments;

    /**
     * Temporary storage of collPayments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPayments()
    {
        if (collPayments == null)
        {
            collPayments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Payment object to this object
     * through the Payment foreign key attribute
     *
     * @param l Payment
     * @throws TorqueException
     */
    public void addPayment(Payment l) throws TorqueException
    {
        getPayments().add(l);
        l.setCurrency((Currency) this);
    }

    /**
     * The criteria used to select the current contents of collPayments
     */
    private Criteria lastPaymentsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPayments() throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10));
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPayments(Criteria criteria) throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId() );
                        collPayments = PaymentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                            if (!lastPaymentsCriteria.equals(criteria))
                {
                    collPayments = PaymentPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Connection con) throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10), con);
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                         collPayments = PaymentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                             if (!lastPaymentsCriteria.equals(criteria))
                 {
                     collPayments = PaymentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentsCriteria = criteria;

         return collPayments;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                              collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                              collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                              collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                              collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collSorderItems
     */
    protected List collSorderItems;

    /**
     * Temporary storage of collSorderItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorderItems()
    {
        if (collSorderItems == null)
        {
            collSorderItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a SorderItem object to this object
     * through the SorderItem foreign key attribute
     *
     * @param l SorderItem
     * @throws TorqueException
     */
    public void addSorderItem(SorderItem l) throws TorqueException
    {
        getSorderItems().add(l);
        l.setCurrency((Currency) this);
    }

    /**
     * The criteria used to select the current contents of collSorderItems
     */
    private Criteria lastSorderItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorderItems() throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10));
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorderItems(Criteria criteria) throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId() );
                        collSorderItems = SorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                            if (!lastSorderItemsCriteria.equals(criteria))
                {
                    collSorderItems = SorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Connection con) throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10), con);
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                         criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                         collSorderItems = SorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                             if (!lastSorderItemsCriteria.equals(criteria))
                 {
                     collSorderItems = SorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSorderItemsCriteria = criteria;

         return collSorderItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getSorderItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                              collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPaymentItems
     */
    protected List collPaymentItems;

    /**
     * Temporary storage of collPaymentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPaymentItems()
    {
        if (collPaymentItems == null)
        {
            collPaymentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a PaymentItem object to this object
     * through the PaymentItem foreign key attribute
     *
     * @param l PaymentItem
     * @throws TorqueException
     */
    public void addPaymentItem(PaymentItem l) throws TorqueException
    {
        getPaymentItems().add(l);
        l.setCurrency((Currency) this);
    }

    /**
     * The criteria used to select the current contents of collPaymentItems
     */
    private Criteria lastPaymentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPaymentItems() throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10));
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPaymentItems(Criteria criteria) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId() );
                        collPaymentItems = PaymentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                            if (!lastPaymentItemsCriteria.equals(criteria))
                {
                    collPaymentItems = PaymentItemPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Connection con) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10), con);
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Currency is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                         collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                             if (!lastPaymentItemsCriteria.equals(criteria))
                 {
                     collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentItemsCriteria = criteria;

         return collPaymentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinPayment(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Currency is new, it will return
     * an empty collection; or if this Currency has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Currency.
     */
    protected List getPaymentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CURRENCY_ID, getCurrencyId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("CurrencyId");
              fieldNames.add("CurrencyName");
              fieldNames.add("CurrencyCode");
              fieldNames.add("CurrencyRate");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("CurrencyId"))
        {
                return new Integer(getCurrencyId());
            }
          if (name.equals("CurrencyName"))
        {
                return getCurrencyName();
            }
          if (name.equals("CurrencyCode"))
        {
                return getCurrencyCode();
            }
          if (name.equals("CurrencyRate"))
        {
                return getCurrencyRate();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CurrencyPeer.CURRENCY_ID))
        {
                return new Integer(getCurrencyId());
            }
          if (name.equals(CurrencyPeer.CURRENCY_NAME))
        {
                return getCurrencyName();
            }
          if (name.equals(CurrencyPeer.CURRENCY_CODE))
        {
                return getCurrencyCode();
            }
          if (name.equals(CurrencyPeer.CURRENCY_RATE))
        {
                return getCurrencyRate();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getCurrencyId());
            }
              if (pos == 1)
        {
                return getCurrencyName();
            }
              if (pos == 2)
        {
                return getCurrencyCode();
            }
              if (pos == 3)
        {
                return getCurrencyRate();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CurrencyPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CurrencyPeer.doInsert((Currency) this, con);
                    setNew(false);
                }
                else
                {
                    CurrencyPeer.doUpdate((Currency) this, con);
                }
            }

                                      
                
                    if (collSorders != null)
            {
                for (int i = 0; i < collSorders.size(); i++)
                {
                    ((Sorder) collSorders.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPayments != null)
            {
                for (int i = 0; i < collPayments.size(); i++)
                {
                    ((Payment) collPayments.get(i)).save(con);
                }
            }
                                                  
                
                    if (collSorderItems != null)
            {
                for (int i = 0; i < collSorderItems.size(); i++)
                {
                    ((SorderItem) collSorderItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPaymentItems != null)
            {
                for (int i = 0; i < collPaymentItems.size(); i++)
                {
                    ((PaymentItem) collPaymentItems.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key currencyId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setCurrencyId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setCurrencyId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getCurrencyId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Currency copy() throws TorqueException
    {
        return copyInto(new Currency());
    }
  
    protected Currency copyInto(Currency copyObj) throws TorqueException
    {
          copyObj.setCurrencyId(currencyId);
          copyObj.setCurrencyName(currencyName);
          copyObj.setCurrencyCode(currencyCode);
          copyObj.setCurrencyRate(currencyRate);
  
                            copyObj.setCurrencyId( 0);
                              
                                      
                            
        List v = getSorders();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorder(obj.copy());
        }
                                                  
                            
        v = getPayments();
        for (int i = 0; i < v.size(); i++)
        {
            Payment obj = (Payment) v.get(i);
            copyObj.addPayment(obj.copy());
        }
                                                  
                            
        v = getSorderItems();
        for (int i = 0; i < v.size(); i++)
        {
            SorderItem obj = (SorderItem) v.get(i);
            copyObj.addSorderItem(obj.copy());
        }
                                                  
                            
        v = getPaymentItems();
        for (int i = 0; i < v.size(); i++)
        {
            PaymentItem obj = (PaymentItem) v.get(i);
            copyObj.addPaymentItem(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CurrencyPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Currency:\n");
        str.append("CurrencyId = ")
               .append(getCurrencyId())
             .append("\n");
        str.append("CurrencyName = ")
               .append(getCurrencyName())
             .append("\n");
        str.append("CurrencyCode = ")
               .append(getCurrencyCode())
             .append("\n");
        str.append("CurrencyRate = ")
               .append(getCurrencyRate())
             .append("\n");
        return(str.toString());
    }
}
