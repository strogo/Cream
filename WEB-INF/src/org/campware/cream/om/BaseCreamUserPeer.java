package org.campware.cream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.campware.cream.om.map.*;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 */
public abstract class BaseCreamUserPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "cream";

     /** the table name for this class */
    public static final String TABLE_NAME = "CREAM_USER";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(CreamUserMapBuilder.CLASS_NAME);
    }

      /** the column name for the USER_ID field */
    public static final String USER_ID;
      /** the column name for the LOGIN_NAME field */
    public static final String LOGIN_NAME;
      /** the column name for the WELCOME field */
    public static final String WELCOME;
      /** the column name for the DEFAULT_LIST field */
    public static final String DEFAULT_LIST;
      /** the column name for the INBOX_FID field */
    public static final String INBOX_FID;
      /** the column name for the OUTBOX_FID field */
    public static final String OUTBOX_FID;
      /** the column name for the NEWS_SUBS_FID field */
    public static final String NEWS_SUBS_FID;
      /** the column name for the NEWSLETTER_FID field */
    public static final String NEWSLETTER_FID;
      /** the column name for the ONLINE_SUBS_FID field */
    public static final String ONLINE_SUBS_FID;
      /** the column name for the PRINT_SUBS_FID field */
    public static final String PRINT_SUBS_FID;
      /** the column name for the SERVICE_FID field */
    public static final String SERVICE_FID;
      /** the column name for the SHIPMENT_FID field */
    public static final String SHIPMENT_FID;
      /** the column name for the PAYMENT_FID field */
    public static final String PAYMENT_FID;
      /** the column name for the SORDER_FID field */
    public static final String SORDER_FID;
      /** the column name for the CUSTOMER_FID field */
    public static final String CUSTOMER_FID;
      /** the column name for the PROJECT_FID field */
    public static final String PROJECT_FID;
      /** the column name for the PRODUCT_FID field */
    public static final String PRODUCT_FID;
      /** the column name for the CONTACT_FID field */
    public static final String CONTACT_FID;
      /** the column name for the TASK_FID field */
    public static final String TASK_FID;
      /** the column name for the FILE_FID field */
    public static final String FILE_FID;
      /** the column name for the LEAD_FID field */
    public static final String LEAD_FID;
      /** the column name for the OPPORTUNITY_FID field */
    public static final String OPPORTUNITY_FID;
  
    static
    {
          USER_ID = "CREAM_USER.USER_ID";
          LOGIN_NAME = "CREAM_USER.LOGIN_NAME";
          WELCOME = "CREAM_USER.WELCOME";
          DEFAULT_LIST = "CREAM_USER.DEFAULT_LIST";
          INBOX_FID = "CREAM_USER.INBOX_FID";
          OUTBOX_FID = "CREAM_USER.OUTBOX_FID";
          NEWS_SUBS_FID = "CREAM_USER.NEWS_SUBS_FID";
          NEWSLETTER_FID = "CREAM_USER.NEWSLETTER_FID";
          ONLINE_SUBS_FID = "CREAM_USER.ONLINE_SUBS_FID";
          PRINT_SUBS_FID = "CREAM_USER.PRINT_SUBS_FID";
          SERVICE_FID = "CREAM_USER.SERVICE_FID";
          SHIPMENT_FID = "CREAM_USER.SHIPMENT_FID";
          PAYMENT_FID = "CREAM_USER.PAYMENT_FID";
          SORDER_FID = "CREAM_USER.SORDER_FID";
          CUSTOMER_FID = "CREAM_USER.CUSTOMER_FID";
          PROJECT_FID = "CREAM_USER.PROJECT_FID";
          PRODUCT_FID = "CREAM_USER.PRODUCT_FID";
          CONTACT_FID = "CREAM_USER.CONTACT_FID";
          TASK_FID = "CREAM_USER.TASK_FID";
          FILE_FID = "CREAM_USER.FILE_FID";
          LEAD_FID = "CREAM_USER.LEAD_FID";
          OPPORTUNITY_FID = "CREAM_USER.OPPORTUNITY_FID";
          if (Torque.isInit())
        {
            try
            {
                getMapBuilder(CreamUserMapBuilder.CLASS_NAME);
            }
            catch (Exception e)
            {
                log.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(CreamUserMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  22;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.campware.cream.om.CreamUser";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }


  
    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseCreamUserPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                                                                      
        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
          criteria.addSelectColumn(USER_ID);
          criteria.addSelectColumn(LOGIN_NAME);
          criteria.addSelectColumn(WELCOME);
          criteria.addSelectColumn(DEFAULT_LIST);
          criteria.addSelectColumn(INBOX_FID);
          criteria.addSelectColumn(OUTBOX_FID);
          criteria.addSelectColumn(NEWS_SUBS_FID);
          criteria.addSelectColumn(NEWSLETTER_FID);
          criteria.addSelectColumn(ONLINE_SUBS_FID);
          criteria.addSelectColumn(PRINT_SUBS_FID);
          criteria.addSelectColumn(SERVICE_FID);
          criteria.addSelectColumn(SHIPMENT_FID);
          criteria.addSelectColumn(PAYMENT_FID);
          criteria.addSelectColumn(SORDER_FID);
          criteria.addSelectColumn(CUSTOMER_FID);
          criteria.addSelectColumn(PROJECT_FID);
          criteria.addSelectColumn(PRODUCT_FID);
          criteria.addSelectColumn(CONTACT_FID);
          criteria.addSelectColumn(TASK_FID);
          criteria.addSelectColumn(FILE_FID);
          criteria.addSelectColumn(LEAD_FID);
          criteria.addSelectColumn(OPPORTUNITY_FID);
      }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static CreamUser row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            CreamUser obj = (CreamUser) cls.newInstance();
            CreamUserPeer.populateObject(row, offset, obj);
                  obj.setModified(false);
              obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      CreamUser obj)
        throws TorqueException
    {
        try
        {
                obj.setUserId(row.getValue(offset + 0).asInt());
                  obj.setUserName(row.getValue(offset + 1).asString());
                  obj.setWelcome(row.getValue(offset + 2).asString());
                  obj.setDefaultList(row.getValue(offset + 3).asInt());
                  obj.setInboxFid(row.getValue(offset + 4).asInt());
                  obj.setOutboxFid(row.getValue(offset + 5).asInt());
                  obj.setNewsSubsFid(row.getValue(offset + 6).asInt());
                  obj.setNewsletterFid(row.getValue(offset + 7).asInt());
                  obj.setOnlineSubsFid(row.getValue(offset + 8).asInt());
                  obj.setPrintSubsFid(row.getValue(offset + 9).asInt());
                  obj.setServiceFid(row.getValue(offset + 10).asInt());
                  obj.setShipmentFid(row.getValue(offset + 11).asInt());
                  obj.setPaymentFid(row.getValue(offset + 12).asInt());
                  obj.setSorderFid(row.getValue(offset + 13).asInt());
                  obj.setCustomerFid(row.getValue(offset + 14).asInt());
                  obj.setProjectFid(row.getValue(offset + 15).asInt());
                  obj.setProductFid(row.getValue(offset + 16).asInt());
                  obj.setContactFid(row.getValue(offset + 17).asInt());
                  obj.setTaskFid(row.getValue(offset + 18).asInt());
                  obj.setFileFid(row.getValue(offset + 19).asInt());
                  obj.setLeadFid(row.getValue(offset + 20).asInt());
                  obj.setOpportunityFid(row.getValue(offset + 21).asInt());
              }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseCreamUserPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                                                                      
        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
              results.add(CreamUserPeer.row2Object(row, 1,
                CreamUserPeer.getOMClass()));
          }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseCreamUserPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                   selectCriteria.put(USER_ID, criteria.remove(USER_ID));
                                                                                                                                                                                                                        
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         CreamUserPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                                                                      
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(CreamUser obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(CreamUser obj) throws TorqueException
    {
          doInsert(buildCriteria(obj));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(CreamUser obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(CreamUser obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(CreamUser) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(CreamUser obj, Connection con)
        throws TorqueException
    {
          doInsert(buildCriteria(obj), con);
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(CreamUser) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(CreamUser obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(CreamUser) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(CreamUser obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseCreamUserPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(USER_ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( CreamUser obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              criteria.add(USER_ID, obj.getUserId());
              criteria.add(LOGIN_NAME, obj.getUserName());
              criteria.add(WELCOME, obj.getWelcome());
              criteria.add(DEFAULT_LIST, obj.getDefaultList());
              criteria.add(INBOX_FID, obj.getInboxFid());
              criteria.add(OUTBOX_FID, obj.getOutboxFid());
              criteria.add(NEWS_SUBS_FID, obj.getNewsSubsFid());
              criteria.add(NEWSLETTER_FID, obj.getNewsletterFid());
              criteria.add(ONLINE_SUBS_FID, obj.getOnlineSubsFid());
              criteria.add(PRINT_SUBS_FID, obj.getPrintSubsFid());
              criteria.add(SERVICE_FID, obj.getServiceFid());
              criteria.add(SHIPMENT_FID, obj.getShipmentFid());
              criteria.add(PAYMENT_FID, obj.getPaymentFid());
              criteria.add(SORDER_FID, obj.getSorderFid());
              criteria.add(CUSTOMER_FID, obj.getCustomerFid());
              criteria.add(PROJECT_FID, obj.getProjectFid());
              criteria.add(PRODUCT_FID, obj.getProductFid());
              criteria.add(CONTACT_FID, obj.getContactFid());
              criteria.add(TASK_FID, obj.getTaskFid());
              criteria.add(FILE_FID, obj.getFileFid());
              criteria.add(LEAD_FID, obj.getLeadFid());
              criteria.add(OPPORTUNITY_FID, obj.getOpportunityFid());
          return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( CreamUser obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
                      criteria.add(USER_ID, obj.getUserId());
                          criteria.add(LOGIN_NAME, obj.getUserName());
                          criteria.add(WELCOME, obj.getWelcome());
                          criteria.add(DEFAULT_LIST, obj.getDefaultList());
                          criteria.add(INBOX_FID, obj.getInboxFid());
                          criteria.add(OUTBOX_FID, obj.getOutboxFid());
                          criteria.add(NEWS_SUBS_FID, obj.getNewsSubsFid());
                          criteria.add(NEWSLETTER_FID, obj.getNewsletterFid());
                          criteria.add(ONLINE_SUBS_FID, obj.getOnlineSubsFid());
                          criteria.add(PRINT_SUBS_FID, obj.getPrintSubsFid());
                          criteria.add(SERVICE_FID, obj.getServiceFid());
                          criteria.add(SHIPMENT_FID, obj.getShipmentFid());
                          criteria.add(PAYMENT_FID, obj.getPaymentFid());
                          criteria.add(SORDER_FID, obj.getSorderFid());
                          criteria.add(CUSTOMER_FID, obj.getCustomerFid());
                          criteria.add(PROJECT_FID, obj.getProjectFid());
                          criteria.add(PRODUCT_FID, obj.getProductFid());
                          criteria.add(CONTACT_FID, obj.getContactFid());
                          criteria.add(TASK_FID, obj.getTaskFid());
                          criteria.add(FILE_FID, obj.getFileFid());
                          criteria.add(LEAD_FID, obj.getLeadFid());
                          criteria.add(OPPORTUNITY_FID, obj.getOpportunityFid());
              return criteria;
    }
 
    
        /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static CreamUser retrieveByPK(int pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static CreamUser retrieveByPK(int pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
  
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static CreamUser retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        CreamUser retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static CreamUser retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (CreamUser)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( USER_ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



        
  
  
    
  
      /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
   
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
