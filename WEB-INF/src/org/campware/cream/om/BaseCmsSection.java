package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to CmsSection
 */
public abstract class BaseCmsSection extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final CmsSectionPeer peer =
        new CmsSectionPeer();

        
    /** The value for the cmsPublicationId field */
    private int cmsPublicationId;
      
    /** The value for the cmsSectionId field */
    private int cmsSectionId;
      
    /** The value for the cmsLanguageId field */
    private int cmsLanguageId;
      
    /** The value for the cmsSectionName field */
    private String cmsSectionName;
  
    
    /**
     * Get the CmsPublicationId
     *
     * @return int
     */
    public int getCmsPublicationId()
    {
        return cmsPublicationId;
    }

                        
    /**
     * Set the value of CmsPublicationId
     *
     * @param v new value
     */
    public void setCmsPublicationId(int v) 
    {
    
                  if (this.cmsPublicationId != v)
              {
            this.cmsPublicationId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CmsSectionId
     *
     * @return int
     */
    public int getCmsSectionId()
    {
        return cmsSectionId;
    }

                        
    /**
     * Set the value of CmsSectionId
     *
     * @param v new value
     */
    public void setCmsSectionId(int v) 
    {
    
                  if (this.cmsSectionId != v)
              {
            this.cmsSectionId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CmsLanguageId
     *
     * @return int
     */
    public int getCmsLanguageId()
    {
        return cmsLanguageId;
    }

                        
    /**
     * Set the value of CmsLanguageId
     *
     * @param v new value
     */
    public void setCmsLanguageId(int v) 
    {
    
                  if (this.cmsLanguageId != v)
              {
            this.cmsLanguageId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CmsSectionName
     *
     * @return String
     */
    public String getCmsSectionName()
    {
        return cmsSectionName;
    }

                        
    /**
     * Set the value of CmsSectionName
     *
     * @param v new value
     */
    public void setCmsSectionName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.cmsSectionName, v))
              {
            this.cmsSectionName = v;
            setModified(true);
        }
    
          
              }
  
         
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("CmsPublicationId");
              fieldNames.add("CmsSectionId");
              fieldNames.add("CmsLanguageId");
              fieldNames.add("CmsSectionName");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("CmsPublicationId"))
        {
                return new Integer(getCmsPublicationId());
            }
          if (name.equals("CmsSectionId"))
        {
                return new Integer(getCmsSectionId());
            }
          if (name.equals("CmsLanguageId"))
        {
                return new Integer(getCmsLanguageId());
            }
          if (name.equals("CmsSectionName"))
        {
                return getCmsSectionName();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CmsSectionPeer.CMS_PUBLICATION_ID))
        {
                return new Integer(getCmsPublicationId());
            }
          if (name.equals(CmsSectionPeer.CMS_SECTION_ID))
        {
                return new Integer(getCmsSectionId());
            }
          if (name.equals(CmsSectionPeer.CMS_LANGUAGE_ID))
        {
                return new Integer(getCmsLanguageId());
            }
          if (name.equals(CmsSectionPeer.CMS_SECTION_NAME))
        {
                return getCmsSectionName();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getCmsPublicationId());
            }
              if (pos == 1)
        {
                return new Integer(getCmsSectionId());
            }
              if (pos == 2)
        {
                return new Integer(getCmsLanguageId());
            }
              if (pos == 3)
        {
                return getCmsSectionName();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CmsSectionPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CmsSectionPeer.doInsert((CmsSection) this, con);
                    setNew(false);
                }
                else
                {
                    CmsSectionPeer.doUpdate((CmsSection) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

  
  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return null;
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public CmsSection copy() throws TorqueException
    {
        return copyInto(new CmsSection());
    }
  
    protected CmsSection copyInto(CmsSection copyObj) throws TorqueException
    {
          copyObj.setCmsPublicationId(cmsPublicationId);
          copyObj.setCmsSectionId(cmsSectionId);
          copyObj.setCmsLanguageId(cmsLanguageId);
          copyObj.setCmsSectionName(cmsSectionName);
  
                          
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CmsSectionPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("CmsSection:\n");
        str.append("CmsPublicationId = ")
               .append(getCmsPublicationId())
             .append("\n");
        str.append("CmsSectionId = ")
               .append(getCmsSectionId())
             .append("\n");
        str.append("CmsLanguageId = ")
               .append(getCmsLanguageId())
             .append("\n");
        str.append("CmsSectionName = ")
               .append(getCmsSectionName())
             .append("\n");
        return(str.toString());
    }
}
