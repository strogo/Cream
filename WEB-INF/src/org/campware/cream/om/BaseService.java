package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed May 04 09:10:56 CEST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Service
 */
public abstract class BaseService extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final ServicePeer peer =
        new ServicePeer();

        
    /** The value for the serviceId field */
    private int serviceId;
                                                
    /** The value for the serviceCode field */
    private String serviceCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
      
    /** The value for the issuedDate field */
    private Date issuedDate;
      
    /** The value for the closedDate field */
    private Date closedDate;
                                          
    /** The value for the customerId field */
    private int customerId = 1000;
                                          
    /** The value for the recipientId field */
    private int recipientId = 1000;
                                          
    /** The value for the projectId field */
    private int projectId = 1000;
                                          
    /** The value for the sorderId field */
    private int sorderId = 1000;
      
    /** The value for the invoiceCode field */
    private String invoiceCode;
                                                
    /** The value for the subject field */
    private String subject = "---";
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the ServiceId
     *
     * @return int
     */
    public int getServiceId()
    {
        return serviceId;
    }

                                              
    /**
     * Set the value of ServiceId
     *
     * @param v new value
     */
    public void setServiceId(int v) throws TorqueException
    {
    
                  if (this.serviceId != v)
              {
            this.serviceId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated ServiceItem
        if (collServiceItems != null)
        {
            for (int i = 0; i < collServiceItems.size(); i++)
            {
                ((ServiceItem) collServiceItems.get(i))
                    .setServiceId(v);
            }
        }
                                }
  
    /**
     * Get the ServiceCode
     *
     * @return String
     */
    public String getServiceCode()
    {
        return serviceCode;
    }

                        
    /**
     * Set the value of ServiceCode
     *
     * @param v new value
     */
    public void setServiceCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.serviceCode, v))
              {
            this.serviceCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the IssuedDate
     *
     * @return Date
     */
    public Date getIssuedDate()
    {
        return issuedDate;
    }

                        
    /**
     * Set the value of IssuedDate
     *
     * @param v new value
     */
    public void setIssuedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.issuedDate, v))
              {
            this.issuedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ClosedDate
     *
     * @return Date
     */
    public Date getClosedDate()
    {
        return closedDate;
    }

                        
    /**
     * Set the value of ClosedDate
     *
     * @param v new value
     */
    public void setClosedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.closedDate, v))
              {
            this.closedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerId
     *
     * @return int
     */
    public int getCustomerId()
    {
        return customerId;
    }

                              
    /**
     * Set the value of CustomerId
     *
     * @param v new value
     */
    public void setCustomerId(int v) throws TorqueException
    {
    
                  if (this.customerId != v)
              {
            this.customerId = v;
            setModified(true);
        }
    
                                                                  
                if (aCustomerRelatedByCustomerId != null && !(aCustomerRelatedByCustomerId.getCustomerId() == v))
                {
            aCustomerRelatedByCustomerId = null;
        }
      
              }
  
    /**
     * Get the RecipientId
     *
     * @return int
     */
    public int getRecipientId()
    {
        return recipientId;
    }

                              
    /**
     * Set the value of RecipientId
     *
     * @param v new value
     */
    public void setRecipientId(int v) throws TorqueException
    {
    
                  if (this.recipientId != v)
              {
            this.recipientId = v;
            setModified(true);
        }
    
                                                                  
                if (aCustomerRelatedByRecipientId != null && !(aCustomerRelatedByRecipientId.getCustomerId() == v))
                {
            aCustomerRelatedByRecipientId = null;
        }
      
              }
  
    /**
     * Get the ProjectId
     *
     * @return int
     */
    public int getProjectId()
    {
        return projectId;
    }

                              
    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(int v) throws TorqueException
    {
    
                  if (this.projectId != v)
              {
            this.projectId = v;
            setModified(true);
        }
    
                          
                if (aProject != null && !(aProject.getProjectId() == v))
                {
            aProject = null;
        }
      
              }
  
    /**
     * Get the SorderId
     *
     * @return int
     */
    public int getSorderId()
    {
        return sorderId;
    }

                              
    /**
     * Set the value of SorderId
     *
     * @param v new value
     */
    public void setSorderId(int v) throws TorqueException
    {
    
                  if (this.sorderId != v)
              {
            this.sorderId = v;
            setModified(true);
        }
    
                          
                if (aSorder != null && !(aSorder.getSorderId() == v))
                {
            aSorder = null;
        }
      
              }
  
    /**
     * Get the InvoiceCode
     *
     * @return String
     */
    public String getInvoiceCode()
    {
        return invoiceCode;
    }

                        
    /**
     * Set the value of InvoiceCode
     *
     * @param v new value
     */
    public void setInvoiceCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.invoiceCode, v))
              {
            this.invoiceCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Subject
     *
     * @return String
     */
    public String getSubject()
    {
        return subject;
    }

                        
    /**
     * Set the value of Subject
     *
     * @param v new value
     */
    public void setSubject(String v) 
    {
    
                  if (!ObjectUtils.equals(this.subject, v))
              {
            this.subject = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                        
        
        private Customer aCustomerRelatedByCustomerId;

    /**
     * Declares an association between this object and a Customer object
     *
     * @param v Customer
     * @throws TorqueException
     */
    public void setCustomerRelatedByCustomerId(Customer v) throws TorqueException
    {
            if (v == null)
        {
                          setCustomerId( 1000);
              }
        else
        {
            setCustomerId(v.getCustomerId());
        }
            aCustomerRelatedByCustomerId = v;
    }

                                            
    /**
     * Get the associated Customer object
     *
     * @return the associated Customer object
     * @throws TorqueException
     */
    public Customer getCustomerRelatedByCustomerId() throws TorqueException
    {
        if (aCustomerRelatedByCustomerId == null && (this.customerId != 0))
        {
                          aCustomerRelatedByCustomerId = CustomerPeer.retrieveByPK(SimpleKey.keyFor(this.customerId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Customer obj = CustomerPeer.retrieveByPK(this.customerId);
               obj.addServicesRelatedByCustomerId(this);
            */
        }
        return aCustomerRelatedByCustomerId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCustomerRelatedByCustomerIdKey(ObjectKey key) throws TorqueException
    {
      
                        setCustomerId(((NumberKey) key).intValue());
                  }
    
    
                        
        
        private Customer aCustomerRelatedByRecipientId;

    /**
     * Declares an association between this object and a Customer object
     *
     * @param v Customer
     * @throws TorqueException
     */
    public void setCustomerRelatedByRecipientId(Customer v) throws TorqueException
    {
            if (v == null)
        {
                          setRecipientId( 1000);
              }
        else
        {
            setRecipientId(v.getCustomerId());
        }
            aCustomerRelatedByRecipientId = v;
    }

                                            
    /**
     * Get the associated Customer object
     *
     * @return the associated Customer object
     * @throws TorqueException
     */
    public Customer getCustomerRelatedByRecipientId() throws TorqueException
    {
        if (aCustomerRelatedByRecipientId == null && (this.recipientId != 0))
        {
                          aCustomerRelatedByRecipientId = CustomerPeer.retrieveByPK(SimpleKey.keyFor(this.recipientId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Customer obj = CustomerPeer.retrieveByPK(this.recipientId);
               obj.addServicesRelatedByRecipientId(this);
            */
        }
        return aCustomerRelatedByRecipientId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCustomerRelatedByRecipientIdKey(ObjectKey key) throws TorqueException
    {
      
                        setRecipientId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
            if (v == null)
        {
                          setProjectId( 1000);
              }
        else
        {
            setProjectId(v.getProjectId());
        }
            aProject = v;
    }

                                            
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.projectId != 0))
        {
                          aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.projectId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.projectId);
               obj.addServices(this);
            */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
      
                        setProjectId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Sorder aSorder;

    /**
     * Declares an association between this object and a Sorder object
     *
     * @param v Sorder
     * @throws TorqueException
     */
    public void setSorder(Sorder v) throws TorqueException
    {
            if (v == null)
        {
                          setSorderId( 1000);
              }
        else
        {
            setSorderId(v.getSorderId());
        }
            aSorder = v;
    }

                                            
    /**
     * Get the associated Sorder object
     *
     * @return the associated Sorder object
     * @throws TorqueException
     */
    public Sorder getSorder() throws TorqueException
    {
        if (aSorder == null && (this.sorderId != 0))
        {
                          aSorder = SorderPeer.retrieveByPK(SimpleKey.keyFor(this.sorderId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Sorder obj = SorderPeer.retrieveByPK(this.sorderId);
               obj.addServices(this);
            */
        }
        return aSorder;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setSorderKey(ObjectKey key) throws TorqueException
    {
      
                        setSorderId(((NumberKey) key).intValue());
                  }
       
                                
            
          /**
     * Collection to store aggregation of collServiceItems
     */
    protected List collServiceItems;

    /**
     * Temporary storage of collServiceItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServiceItems()
    {
        if (collServiceItems == null)
        {
            collServiceItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ServiceItem object to this object
     * through the ServiceItem foreign key attribute
     *
     * @param l ServiceItem
     * @throws TorqueException
     */
    public void addServiceItem(ServiceItem l) throws TorqueException
    {
        getServiceItems().add(l);
        l.setService((Service) this);
    }

    /**
     * The criteria used to select the current contents of collServiceItems
     */
    private Criteria lastServiceItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServiceItems() throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10));
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Service is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServiceItems(Criteria criteria) throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId() );
                        collServiceItems = ServiceItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                            if (!lastServiceItemsCriteria.equals(criteria))
                {
                    collServiceItems = ServiceItemPeer.doSelect(criteria);
                }
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Connection con) throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10), con);
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Service is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                         criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                         collServiceItems = ServiceItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                             if (!lastServiceItemsCriteria.equals(criteria))
                 {
                     collServiceItems = ServiceItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastServiceItemsCriteria = criteria;

         return collServiceItems;
           }

                                                
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Service is new, it will return
     * an empty collection; or if this Service has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Service.
     */
    protected List getServiceItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.SERVICE_ID, getServiceId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ServiceId");
              fieldNames.add("ServiceCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("IssuedDate");
              fieldNames.add("ClosedDate");
              fieldNames.add("CustomerId");
              fieldNames.add("RecipientId");
              fieldNames.add("ProjectId");
              fieldNames.add("SorderId");
              fieldNames.add("InvoiceCode");
              fieldNames.add("Subject");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ServiceId"))
        {
                return new Integer(getServiceId());
            }
          if (name.equals("ServiceCode"))
        {
                return getServiceCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("IssuedDate"))
        {
                return getIssuedDate();
            }
          if (name.equals("ClosedDate"))
        {
                return getClosedDate();
            }
          if (name.equals("CustomerId"))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals("RecipientId"))
        {
                return new Integer(getRecipientId());
            }
          if (name.equals("ProjectId"))
        {
                return new Integer(getProjectId());
            }
          if (name.equals("SorderId"))
        {
                return new Integer(getSorderId());
            }
          if (name.equals("InvoiceCode"))
        {
                return getInvoiceCode();
            }
          if (name.equals("Subject"))
        {
                return getSubject();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ServicePeer.SERVICE_ID))
        {
                return new Integer(getServiceId());
            }
          if (name.equals(ServicePeer.SERVICE_CODE))
        {
                return getServiceCode();
            }
          if (name.equals(ServicePeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(ServicePeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(ServicePeer.ISSUED_DATE))
        {
                return getIssuedDate();
            }
          if (name.equals(ServicePeer.CLOSED_DATE))
        {
                return getClosedDate();
            }
          if (name.equals(ServicePeer.CUSTOMER_ID))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals(ServicePeer.RECIPIENT_ID))
        {
                return new Integer(getRecipientId());
            }
          if (name.equals(ServicePeer.PROJECT_ID))
        {
                return new Integer(getProjectId());
            }
          if (name.equals(ServicePeer.SORDER_ID))
        {
                return new Integer(getSorderId());
            }
          if (name.equals(ServicePeer.INVOICE_CODE))
        {
                return getInvoiceCode();
            }
          if (name.equals(ServicePeer.SUBJECT))
        {
                return getSubject();
            }
          if (name.equals(ServicePeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(ServicePeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(ServicePeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(ServicePeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(ServicePeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getServiceId());
            }
              if (pos == 1)
        {
                return getServiceCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return getIssuedDate();
            }
              if (pos == 5)
        {
                return getClosedDate();
            }
              if (pos == 6)
        {
                return new Integer(getCustomerId());
            }
              if (pos == 7)
        {
                return new Integer(getRecipientId());
            }
              if (pos == 8)
        {
                return new Integer(getProjectId());
            }
              if (pos == 9)
        {
                return new Integer(getSorderId());
            }
              if (pos == 10)
        {
                return getInvoiceCode();
            }
              if (pos == 11)
        {
                return getSubject();
            }
              if (pos == 12)
        {
                return getNotes();
            }
              if (pos == 13)
        {
                return getCreated();
            }
              if (pos == 14)
        {
                return getModified();
            }
              if (pos == 15)
        {
                return getCreatedBy();
            }
              if (pos == 16)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ServicePeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ServicePeer.doInsert((Service) this, con);
                    setNew(false);
                }
                else
                {
                    ServicePeer.doUpdate((Service) this, con);
                }
            }

                                      
                
                    if (collServiceItems != null)
            {
                for (int i = 0; i < collServiceItems.size(); i++)
                {
                    ((ServiceItem) collServiceItems.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key serviceId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setServiceId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setServiceId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getServiceId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Service copy() throws TorqueException
    {
        return copyInto(new Service());
    }
  
    protected Service copyInto(Service copyObj) throws TorqueException
    {
          copyObj.setServiceId(serviceId);
          copyObj.setServiceCode(serviceCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setIssuedDate(issuedDate);
          copyObj.setClosedDate(closedDate);
          copyObj.setCustomerId(customerId);
          copyObj.setRecipientId(recipientId);
          copyObj.setProjectId(projectId);
          copyObj.setSorderId(sorderId);
          copyObj.setInvoiceCode(invoiceCode);
          copyObj.setSubject(subject);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setServiceId( 0);
                                                                                                            
                                      
                            
        List v = getServiceItems();
        for (int i = 0; i < v.size(); i++)
        {
            ServiceItem obj = (ServiceItem) v.get(i);
            copyObj.addServiceItem(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ServicePeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Service:\n");
        str.append("ServiceId = ")
               .append(getServiceId())
             .append("\n");
        str.append("ServiceCode = ")
               .append(getServiceCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("IssuedDate = ")
               .append(getIssuedDate())
             .append("\n");
        str.append("ClosedDate = ")
               .append(getClosedDate())
             .append("\n");
        str.append("CustomerId = ")
               .append(getCustomerId())
             .append("\n");
        str.append("RecipientId = ")
               .append(getRecipientId())
             .append("\n");
        str.append("ProjectId = ")
               .append(getProjectId())
             .append("\n");
        str.append("SorderId = ")
               .append(getSorderId())
             .append("\n");
        str.append("InvoiceCode = ")
               .append(getInvoiceCode())
             .append("\n");
        str.append("Subject = ")
               .append(getSubject())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
