package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Notification
 */
public abstract class BaseNotification extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final NotificationPeer peer =
        new NotificationPeer();

        
    /** The value for the notificationId field */
    private int notificationId;
                                          
    /** The value for the notificationType field */
    private int notificationType = 10;
                                          
    /** The value for the languageId field */
    private int languageId = 1000;
                                          
    /** The value for the emailFormat field */
    private int emailFormat = 10;
      
    /** The value for the subject field */
    private String subject;
      
    /** The value for the body field */
    private String body;
  
    
    /**
     * Get the NotificationId
     *
     * @return int
     */
    public int getNotificationId()
    {
        return notificationId;
    }

                        
    /**
     * Set the value of NotificationId
     *
     * @param v new value
     */
    public void setNotificationId(int v) 
    {
    
                  if (this.notificationId != v)
              {
            this.notificationId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the NotificationType
     *
     * @return int
     */
    public int getNotificationType()
    {
        return notificationType;
    }

                        
    /**
     * Set the value of NotificationType
     *
     * @param v new value
     */
    public void setNotificationType(int v) 
    {
    
                  if (this.notificationType != v)
              {
            this.notificationType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LanguageId
     *
     * @return int
     */
    public int getLanguageId()
    {
        return languageId;
    }

                              
    /**
     * Set the value of LanguageId
     *
     * @param v new value
     */
    public void setLanguageId(int v) throws TorqueException
    {
    
                  if (this.languageId != v)
              {
            this.languageId = v;
            setModified(true);
        }
    
                          
                if (aLanguage != null && !(aLanguage.getLanguageId() == v))
                {
            aLanguage = null;
        }
      
              }
  
    /**
     * Get the EmailFormat
     *
     * @return int
     */
    public int getEmailFormat()
    {
        return emailFormat;
    }

                        
    /**
     * Set the value of EmailFormat
     *
     * @param v new value
     */
    public void setEmailFormat(int v) 
    {
    
                  if (this.emailFormat != v)
              {
            this.emailFormat = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Subject
     *
     * @return String
     */
    public String getSubject()
    {
        return subject;
    }

                        
    /**
     * Set the value of Subject
     *
     * @param v new value
     */
    public void setSubject(String v) 
    {
    
                  if (!ObjectUtils.equals(this.subject, v))
              {
            this.subject = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Body
     *
     * @return String
     */
    public String getBody()
    {
        return body;
    }

                        
    /**
     * Set the value of Body
     *
     * @param v new value
     */
    public void setBody(String v) 
    {
    
                  if (!ObjectUtils.equals(this.body, v))
              {
            this.body = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Language aLanguage;

    /**
     * Declares an association between this object and a Language object
     *
     * @param v Language
     * @throws TorqueException
     */
    public void setLanguage(Language v) throws TorqueException
    {
            if (v == null)
        {
                          setLanguageId( 1000);
              }
        else
        {
            setLanguageId(v.getLanguageId());
        }
            aLanguage = v;
    }

                                            
    /**
     * Get the associated Language object
     *
     * @return the associated Language object
     * @throws TorqueException
     */
    public Language getLanguage() throws TorqueException
    {
        if (aLanguage == null && (this.languageId != 0))
        {
                          aLanguage = LanguagePeer.retrieveByPK(SimpleKey.keyFor(this.languageId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Language obj = LanguagePeer.retrieveByPK(this.languageId);
               obj.addNotifications(this);
            */
        }
        return aLanguage;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLanguageKey(ObjectKey key) throws TorqueException
    {
      
                        setLanguageId(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("NotificationId");
              fieldNames.add("NotificationType");
              fieldNames.add("LanguageId");
              fieldNames.add("EmailFormat");
              fieldNames.add("Subject");
              fieldNames.add("Body");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("NotificationId"))
        {
                return new Integer(getNotificationId());
            }
          if (name.equals("NotificationType"))
        {
                return new Integer(getNotificationType());
            }
          if (name.equals("LanguageId"))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals("EmailFormat"))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals("Subject"))
        {
                return getSubject();
            }
          if (name.equals("Body"))
        {
                return getBody();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(NotificationPeer.NOTIFICATION_ID))
        {
                return new Integer(getNotificationId());
            }
          if (name.equals(NotificationPeer.NOTIFICATION_TYPE))
        {
                return new Integer(getNotificationType());
            }
          if (name.equals(NotificationPeer.LANGUAGE_ID))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals(NotificationPeer.EMAIL_FORMAT))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals(NotificationPeer.SUBJECT))
        {
                return getSubject();
            }
          if (name.equals(NotificationPeer.BODY))
        {
                return getBody();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getNotificationId());
            }
              if (pos == 1)
        {
                return new Integer(getNotificationType());
            }
              if (pos == 2)
        {
                return new Integer(getLanguageId());
            }
              if (pos == 3)
        {
                return new Integer(getEmailFormat());
            }
              if (pos == 4)
        {
                return getSubject();
            }
              if (pos == 5)
        {
                return getBody();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(NotificationPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    NotificationPeer.doInsert((Notification) this, con);
                    setNew(false);
                }
                else
                {
                    NotificationPeer.doUpdate((Notification) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key notificationId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setNotificationId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setNotificationId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getNotificationId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Notification copy() throws TorqueException
    {
        return copyInto(new Notification());
    }
  
    protected Notification copyInto(Notification copyObj) throws TorqueException
    {
          copyObj.setNotificationId(notificationId);
          copyObj.setNotificationType(notificationType);
          copyObj.setLanguageId(languageId);
          copyObj.setEmailFormat(emailFormat);
          copyObj.setSubject(subject);
          copyObj.setBody(body);
  
                            copyObj.setNotificationId( 0);
                                          
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public NotificationPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Notification:\n");
        str.append("NotificationId = ")
               .append(getNotificationId())
             .append("\n");
        str.append("NotificationType = ")
               .append(getNotificationType())
             .append("\n");
        str.append("LanguageId = ")
               .append(getLanguageId())
             .append("\n");
        str.append("EmailFormat = ")
               .append(getEmailFormat())
             .append("\n");
        str.append("Subject = ")
               .append(getSubject())
             .append("\n");
        str.append("Body = ")
               .append(getBody())
             .append("\n");
        return(str.toString());
    }
}
