package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Project
 */
public abstract class BaseProject extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final ProjectPeer peer =
        new ProjectPeer();

        
    /** The value for the projectId field */
    private int projectId;
                                                
    /** The value for the projectCode field */
    private String projectCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
                                          
    /** The value for the projectCatId field */
    private int projectCatId = 1000;
      
    /** The value for the projectName field */
    private String projectName;
      
    /** The value for the startDate field */
    private Date startDate;
      
    /** The value for the endDate field */
    private Date endDate;
                                  
    /** The value for the expenses field */
    private BigDecimal expenses= new BigDecimal(0);
                                  
    /** The value for the revenues field */
    private BigDecimal revenues= new BigDecimal(0);
      
    /** The value for the custom1 field */
    private String custom1;
      
    /** The value for the custom2 field */
    private String custom2;
      
    /** The value for the custom3 field */
    private String custom3;
      
    /** The value for the custom4 field */
    private String custom4;
      
    /** The value for the custom5 field */
    private String custom5;
      
    /** The value for the custom6 field */
    private String custom6;
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the ProjectId
     *
     * @return int
     */
    public int getProjectId()
    {
        return projectId;
    }

                                              
    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(int v) throws TorqueException
    {
    
                  if (this.projectId != v)
              {
            this.projectId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Opportunity
        if (collOpportunitys != null)
        {
            for (int i = 0; i < collOpportunitys.size(); i++)
            {
                ((Opportunity) collOpportunitys.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Sorder
        if (collSorders != null)
        {
            for (int i = 0; i < collSorders.size(); i++)
            {
                ((Sorder) collSorders.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Payment
        if (collPayments != null)
        {
            for (int i = 0; i < collPayments.size(); i++)
            {
                ((Payment) collPayments.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Service
        if (collServices != null)
        {
            for (int i = 0; i < collServices.size(); i++)
            {
                ((Service) collServices.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Shipment
        if (collShipments != null)
        {
            for (int i = 0; i < collShipments.size(); i++)
            {
                ((Shipment) collShipments.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated PrintSubscription
        if (collPrintSubscriptions != null)
        {
            for (int i = 0; i < collPrintSubscriptions.size(); i++)
            {
                ((PrintSubscription) collPrintSubscriptions.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated OnlineSubscription
        if (collOnlineSubscriptions != null)
        {
            for (int i = 0; i < collOnlineSubscriptions.size(); i++)
            {
                ((OnlineSubscription) collOnlineSubscriptions.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated InboxEvent
        if (collInboxEvents != null)
        {
            for (int i = 0; i < collInboxEvents.size(); i++)
            {
                ((InboxEvent) collInboxEvents.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated OutboxEvent
        if (collOutboxEvents != null)
        {
            for (int i = 0; i < collOutboxEvents.size(); i++)
            {
                ((OutboxEvent) collOutboxEvents.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated NewsSubscription
        if (collNewsSubscriptions != null)
        {
            for (int i = 0; i < collNewsSubscriptions.size(); i++)
            {
                ((NewsSubscription) collNewsSubscriptions.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Newsletter
        if (collNewslettersRelatedByProjectId != null)
        {
            for (int i = 0; i < collNewslettersRelatedByProjectId.size(); i++)
            {
                ((Newsletter) collNewslettersRelatedByProjectId.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated Newsletter
        if (collNewslettersRelatedByRelProjectId != null)
        {
            for (int i = 0; i < collNewslettersRelatedByRelProjectId.size(); i++)
            {
                ((Newsletter) collNewslettersRelatedByRelProjectId.get(i))
                    .setRelProjectId(v);
            }
        }
                                                    
                  // update associated Task
        if (collTasks != null)
        {
            for (int i = 0; i < collTasks.size(); i++)
            {
                ((Task) collTasks.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated SorderItem
        if (collSorderItems != null)
        {
            for (int i = 0; i < collSorderItems.size(); i++)
            {
                ((SorderItem) collSorderItems.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated PaymentItem
        if (collPaymentItems != null)
        {
            for (int i = 0; i < collPaymentItems.size(); i++)
            {
                ((PaymentItem) collPaymentItems.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated ShipmentItem
        if (collShipmentItems != null)
        {
            for (int i = 0; i < collShipmentItems.size(); i++)
            {
                ((ShipmentItem) collShipmentItems.get(i))
                    .setProjectId(v);
            }
        }
                                                    
                  // update associated ServiceItem
        if (collServiceItems != null)
        {
            for (int i = 0; i < collServiceItems.size(); i++)
            {
                ((ServiceItem) collServiceItems.get(i))
                    .setProjectId(v);
            }
        }
                                }
  
    /**
     * Get the ProjectCode
     *
     * @return String
     */
    public String getProjectCode()
    {
        return projectCode;
    }

                        
    /**
     * Set the value of ProjectCode
     *
     * @param v new value
     */
    public void setProjectCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.projectCode, v))
              {
            this.projectCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ProjectCatId
     *
     * @return int
     */
    public int getProjectCatId()
    {
        return projectCatId;
    }

                              
    /**
     * Set the value of ProjectCatId
     *
     * @param v new value
     */
    public void setProjectCatId(int v) throws TorqueException
    {
    
                  if (this.projectCatId != v)
              {
            this.projectCatId = v;
            setModified(true);
        }
    
                          
                if (aProjectCategory != null && !(aProjectCategory.getProjectCatId() == v))
                {
            aProjectCategory = null;
        }
      
              }
  
    /**
     * Get the ProjectName
     *
     * @return String
     */
    public String getProjectName()
    {
        return projectName;
    }

                        
    /**
     * Set the value of ProjectName
     *
     * @param v new value
     */
    public void setProjectName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.projectName, v))
              {
            this.projectName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the StartDate
     *
     * @return Date
     */
    public Date getStartDate()
    {
        return startDate;
    }

                        
    /**
     * Set the value of StartDate
     *
     * @param v new value
     */
    public void setStartDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.startDate, v))
              {
            this.startDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EndDate
     *
     * @return Date
     */
    public Date getEndDate()
    {
        return endDate;
    }

                        
    /**
     * Set the value of EndDate
     *
     * @param v new value
     */
    public void setEndDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.endDate, v))
              {
            this.endDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Expenses
     *
     * @return BigDecimal
     */
    public BigDecimal getExpenses()
    {
        return expenses;
    }

                        
    /**
     * Set the value of Expenses
     *
     * @param v new value
     */
    public void setExpenses(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.expenses, v))
              {
            this.expenses = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Revenues
     *
     * @return BigDecimal
     */
    public BigDecimal getRevenues()
    {
        return revenues;
    }

                        
    /**
     * Set the value of Revenues
     *
     * @param v new value
     */
    public void setRevenues(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.revenues, v))
              {
            this.revenues = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom1
     *
     * @return String
     */
    public String getCustom1()
    {
        return custom1;
    }

                        
    /**
     * Set the value of Custom1
     *
     * @param v new value
     */
    public void setCustom1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom1, v))
              {
            this.custom1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom2
     *
     * @return String
     */
    public String getCustom2()
    {
        return custom2;
    }

                        
    /**
     * Set the value of Custom2
     *
     * @param v new value
     */
    public void setCustom2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom2, v))
              {
            this.custom2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom3
     *
     * @return String
     */
    public String getCustom3()
    {
        return custom3;
    }

                        
    /**
     * Set the value of Custom3
     *
     * @param v new value
     */
    public void setCustom3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom3, v))
              {
            this.custom3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom4
     *
     * @return String
     */
    public String getCustom4()
    {
        return custom4;
    }

                        
    /**
     * Set the value of Custom4
     *
     * @param v new value
     */
    public void setCustom4(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom4, v))
              {
            this.custom4 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom5
     *
     * @return String
     */
    public String getCustom5()
    {
        return custom5;
    }

                        
    /**
     * Set the value of Custom5
     *
     * @param v new value
     */
    public void setCustom5(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom5, v))
              {
            this.custom5 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom6
     *
     * @return String
     */
    public String getCustom6()
    {
        return custom6;
    }

                        
    /**
     * Set the value of Custom6
     *
     * @param v new value
     */
    public void setCustom6(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom6, v))
              {
            this.custom6 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private ProjectCategory aProjectCategory;

    /**
     * Declares an association between this object and a ProjectCategory object
     *
     * @param v ProjectCategory
     * @throws TorqueException
     */
    public void setProjectCategory(ProjectCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setProjectCatId( 1000);
              }
        else
        {
            setProjectCatId(v.getProjectCatId());
        }
            aProjectCategory = v;
    }

                                            
    /**
     * Get the associated ProjectCategory object
     *
     * @return the associated ProjectCategory object
     * @throws TorqueException
     */
    public ProjectCategory getProjectCategory() throws TorqueException
    {
        if (aProjectCategory == null && (this.projectCatId != 0))
        {
                          aProjectCategory = ProjectCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.projectCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ProjectCategory obj = ProjectCategoryPeer.retrieveByPK(this.projectCatId);
               obj.addProjects(this);
            */
        }
        return aProjectCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setProjectCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setProjectCatId(((NumberKey) key).intValue());
                  }
       
                                
            
          /**
     * Collection to store aggregation of collOpportunitys
     */
    protected List collOpportunitys;

    /**
     * Temporary storage of collOpportunitys to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOpportunitys()
    {
        if (collOpportunitys == null)
        {
            collOpportunitys = new ArrayList();
        }
    }

    /**
     * Method called to associate a Opportunity object to this object
     * through the Opportunity foreign key attribute
     *
     * @param l Opportunity
     * @throws TorqueException
     */
    public void addOpportunity(Opportunity l) throws TorqueException
    {
        getOpportunitys().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collOpportunitys
     */
    private Criteria lastOpportunitysCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOpportunitys(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOpportunitys() throws TorqueException
    {
              if (collOpportunitys == null)
        {
            collOpportunitys = getOpportunitys(new Criteria(10));
        }
        return collOpportunitys;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOpportunitys(Criteria criteria) throws TorqueException
    {
              if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId() );
                        collOpportunitys = OpportunityPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                            if (!lastOpportunitysCriteria.equals(criteria))
                {
                    collOpportunitys = OpportunityPeer.doSelect(criteria);
                }
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOpportunitys(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOpportunitys(Connection con) throws TorqueException
    {
              if (collOpportunitys == null)
        {
            collOpportunitys = getOpportunitys(new Criteria(10), con);
        }
        return collOpportunitys;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOpportunitys(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                         criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                         collOpportunitys = OpportunityPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                             if (!lastOpportunitysCriteria.equals(criteria))
                 {
                     collOpportunitys = OpportunityPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOpportunitysCriteria = criteria;

         return collOpportunitys;
           }

                                          
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOpportunitysJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                              collOpportunitys = OpportunityPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                                    if (!lastOpportunitysCriteria.equals(criteria))
            {
                collOpportunitys = OpportunityPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOpportunitysJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                              collOpportunitys = OpportunityPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                                    if (!lastOpportunitysCriteria.equals(criteria))
            {
                collOpportunitys = OpportunityPeer.doSelectJoinProject(criteria);
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOpportunitysJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                              collOpportunitys = OpportunityPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                                    if (!lastOpportunitysCriteria.equals(criteria))
            {
                collOpportunitys = OpportunityPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOpportunitysJoinLeadSource(Criteria criteria)
        throws TorqueException
    {
                    if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                              collOpportunitys = OpportunityPeer.doSelectJoinLeadSource(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                                    if (!lastOpportunitysCriteria.equals(criteria))
            {
                collOpportunitys = OpportunityPeer.doSelectJoinLeadSource(criteria);
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Opportunitys from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOpportunitysJoinOpportunityCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collOpportunitys == null)
        {
            if (isNew())
            {
               collOpportunitys = new ArrayList();
            }
            else
            {
                              criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                              collOpportunitys = OpportunityPeer.doSelectJoinOpportunityCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OpportunityPeer.PROJECT_ID, getProjectId());
                                    if (!lastOpportunitysCriteria.equals(criteria))
            {
                collOpportunitys = OpportunityPeer.doSelectJoinOpportunityCategory(criteria);
            }
        }
        lastOpportunitysCriteria = criteria;

        return collOpportunitys;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collSorders
     */
    protected List collSorders;

    /**
     * Temporary storage of collSorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorders()
    {
        if (collSorders == null)
        {
            collSorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorder(Sorder l) throws TorqueException
    {
        getSorders().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collSorders
     */
    private Criteria lastSordersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorders() throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10));
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorders(Criteria criteria) throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId() );
                        collSorders = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                            if (!lastSordersCriteria.equals(criteria))
                {
                    collSorders = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Connection con) throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10), con);
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                         collSorders = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                             if (!lastSordersCriteria.equals(criteria))
                 {
                     collSorders = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersCriteria = criteria;

         return collSorders;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinOpportunity(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSordersJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                              collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.PROJECT_ID, getProjectId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPayments
     */
    protected List collPayments;

    /**
     * Temporary storage of collPayments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPayments()
    {
        if (collPayments == null)
        {
            collPayments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Payment object to this object
     * through the Payment foreign key attribute
     *
     * @param l Payment
     * @throws TorqueException
     */
    public void addPayment(Payment l) throws TorqueException
    {
        getPayments().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collPayments
     */
    private Criteria lastPaymentsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPayments() throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10));
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPayments(Criteria criteria) throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentPeer.PROJECT_ID, getProjectId() );
                        collPayments = PaymentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                            if (!lastPaymentsCriteria.equals(criteria))
                {
                    collPayments = PaymentPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Connection con) throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10), con);
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                         collPayments = PaymentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                             if (!lastPaymentsCriteria.equals(criteria))
                 {
                     collPayments = PaymentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentsCriteria = criteria;

         return collPayments;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                              collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                              collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                              collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                              collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collServices
     */
    protected List collServices;

    /**
     * Temporary storage of collServices to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServices()
    {
        if (collServices == null)
        {
            collServices = new ArrayList();
        }
    }

    /**
     * Method called to associate a Service object to this object
     * through the Service foreign key attribute
     *
     * @param l Service
     * @throws TorqueException
     */
    public void addService(Service l) throws TorqueException
    {
        getServices().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collServices
     */
    private Criteria lastServicesCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServices(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServices() throws TorqueException
    {
              if (collServices == null)
        {
            collServices = getServices(new Criteria(10));
        }
        return collServices;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Services from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServices(Criteria criteria) throws TorqueException
    {
              if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                        criteria.add(ServicePeer.PROJECT_ID, getProjectId() );
                        collServices = ServicePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                            if (!lastServicesCriteria.equals(criteria))
                {
                    collServices = ServicePeer.doSelect(criteria);
                }
            }
        }
        lastServicesCriteria = criteria;

        return collServices;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServices(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServices(Connection con) throws TorqueException
    {
              if (collServices == null)
        {
            collServices = getServices(new Criteria(10), con);
        }
        return collServices;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Services from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServices(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                         criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                         collServices = ServicePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                             if (!lastServicesCriteria.equals(criteria))
                 {
                     collServices = ServicePeer.doSelect(criteria, con);
                 }
             }
         }
         lastServicesCriteria = criteria;

         return collServices;
           }

                                    
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Services from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServicesJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                              collServices = ServicePeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                                    if (!lastServicesCriteria.equals(criteria))
            {
                collServices = ServicePeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServicesCriteria = criteria;

        return collServices;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Services from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServicesJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                              collServices = ServicePeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                                    if (!lastServicesCriteria.equals(criteria))
            {
                collServices = ServicePeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServicesCriteria = criteria;

        return collServices;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Services from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServicesJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                              collServices = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                                    if (!lastServicesCriteria.equals(criteria))
            {
                collServices = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        lastServicesCriteria = criteria;

        return collServices;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Services from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServicesJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServices == null)
        {
            if (isNew())
            {
               collServices = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                              collServices = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.PROJECT_ID, getProjectId());
                                    if (!lastServicesCriteria.equals(criteria))
            {
                collServices = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        lastServicesCriteria = criteria;

        return collServices;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collShipments
     */
    protected List collShipments;

    /**
     * Temporary storage of collShipments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipments()
    {
        if (collShipments == null)
        {
            collShipments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Shipment object to this object
     * through the Shipment foreign key attribute
     *
     * @param l Shipment
     * @throws TorqueException
     */
    public void addShipment(Shipment l) throws TorqueException
    {
        getShipments().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collShipments
     */
    private Criteria lastShipmentsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipments() throws TorqueException
    {
              if (collShipments == null)
        {
            collShipments = getShipments(new Criteria(10));
        }
        return collShipments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipments(Criteria criteria) throws TorqueException
    {
              if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId() );
                        collShipments = ShipmentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                            if (!lastShipmentsCriteria.equals(criteria))
                {
                    collShipments = ShipmentPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipments(Connection con) throws TorqueException
    {
              if (collShipments == null)
        {
            collShipments = getShipments(new Criteria(10), con);
        }
        return collShipments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipments(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                         collShipments = ShipmentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                             if (!lastShipmentsCriteria.equals(criteria))
                 {
                     collShipments = ShipmentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentsCriteria = criteria;

         return collShipments;
           }

                                          
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                              collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                              collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                              collShipments = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                              collShipments = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Shipments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentsJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collShipments == null)
        {
            if (isNew())
            {
               collShipments = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                              collShipments = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentsCriteria.equals(criteria))
            {
                collShipments = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastShipmentsCriteria = criteria;

        return collShipments;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPrintSubscriptions
     */
    protected List collPrintSubscriptions;

    /**
     * Temporary storage of collPrintSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPrintSubscriptions()
    {
        if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a PrintSubscription object to this object
     * through the PrintSubscription foreign key attribute
     *
     * @param l PrintSubscription
     * @throws TorqueException
     */
    public void addPrintSubscription(PrintSubscription l) throws TorqueException
    {
        getPrintSubscriptions().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collPrintSubscriptions
     */
    private Criteria lastPrintSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions() throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10));
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId() );
                        collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                            if (!lastPrintSubscriptionsCriteria.equals(criteria))
                {
                    collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Connection con) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10), con);
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                         collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                             if (!lastPrintSubscriptionsCriteria.equals(criteria))
                 {
                     collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPrintSubscriptionsCriteria = criteria;

         return collPrintSubscriptions;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPrintSubscriptionsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOnlineSubscriptions
     */
    protected List collOnlineSubscriptions;

    /**
     * Temporary storage of collOnlineSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOnlineSubscriptions()
    {
        if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a OnlineSubscription object to this object
     * through the OnlineSubscription foreign key attribute
     *
     * @param l OnlineSubscription
     * @throws TorqueException
     */
    public void addOnlineSubscription(OnlineSubscription l) throws TorqueException
    {
        getOnlineSubscriptions().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collOnlineSubscriptions
     */
    private Criteria lastOnlineSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptions() throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = getOnlineSubscriptions(new Criteria(10));
        }
        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId() );
                        collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                            if (!lastOnlineSubscriptionsCriteria.equals(criteria))
                {
                    collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptions(Connection con) throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = getOnlineSubscriptions(new Criteria(10), con);
        }
        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                         collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                             if (!lastOnlineSubscriptionsCriteria.equals(criteria))
                 {
                     collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOnlineSubscriptionsCriteria = criteria;

         return collOnlineSubscriptions;
           }

                                          
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOnlineSubscriptionsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOnlineSubscriptionsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOnlineSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOnlineSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOnlineSubscriptionsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collInboxEvents
     */
    protected List collInboxEvents;

    /**
     * Temporary storage of collInboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInboxEvents()
    {
        if (collInboxEvents == null)
        {
            collInboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a InboxEvent object to this object
     * through the InboxEvent foreign key attribute
     *
     * @param l InboxEvent
     * @throws TorqueException
     */
    public void addInboxEvent(InboxEvent l) throws TorqueException
    {
        getInboxEvents().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collInboxEvents
     */
    private Criteria lastInboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getInboxEvents() throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10));
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInboxEvents(Criteria criteria) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(InboxEventPeer.PROJECT_ID, getProjectId() );
                        collInboxEvents = InboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                            if (!lastInboxEventsCriteria.equals(criteria))
                {
                    collInboxEvents = InboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Connection con) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10), con);
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                         collInboxEvents = InboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                             if (!lastInboxEventsCriteria.equals(criteria))
                 {
                     collInboxEvents = InboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInboxEventsCriteria = criteria;

         return collInboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getInboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                              collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getInboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                              collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getInboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getInboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOutboxEvents
     */
    protected List collOutboxEvents;

    /**
     * Temporary storage of collOutboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOutboxEvents()
    {
        if (collOutboxEvents == null)
        {
            collOutboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a OutboxEvent object to this object
     * through the OutboxEvent foreign key attribute
     *
     * @param l OutboxEvent
     * @throws TorqueException
     */
    public void addOutboxEvent(OutboxEvent l) throws TorqueException
    {
        getOutboxEvents().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collOutboxEvents
     */
    private Criteria lastOutboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOutboxEvents() throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10));
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOutboxEvents(Criteria criteria) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId() );
                        collOutboxEvents = OutboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                            if (!lastOutboxEventsCriteria.equals(criteria))
                {
                    collOutboxEvents = OutboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Connection con) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10), con);
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                         collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                             if (!lastOutboxEventsCriteria.equals(criteria))
                 {
                     collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOutboxEventsCriteria = criteria;

         return collOutboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOutboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOutboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOutboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getOutboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PROJECT_ID, getProjectId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collNewsSubscriptions
     */
    protected List collNewsSubscriptions;

    /**
     * Temporary storage of collNewsSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewsSubscriptions()
    {
        if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a NewsSubscription object to this object
     * through the NewsSubscription foreign key attribute
     *
     * @param l NewsSubscription
     * @throws TorqueException
     */
    public void addNewsSubscription(NewsSubscription l) throws TorqueException
    {
        getNewsSubscriptions().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collNewsSubscriptions
     */
    private Criteria lastNewsSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewsSubscriptions() throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = getNewsSubscriptions(new Criteria(10));
        }
        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewsSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId() );
                        collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                            if (!lastNewsSubscriptionsCriteria.equals(criteria))
                {
                    collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsSubscriptions(Connection con) throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = getNewsSubscriptions(new Criteria(10), con);
        }
        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                         collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                             if (!lastNewsSubscriptionsCriteria.equals(criteria))
                 {
                     collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewsSubscriptionsCriteria = criteria;

         return collNewsSubscriptions;
           }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewsSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                              collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewsSubscriptionsCriteria.equals(criteria))
            {
                collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewsSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                              collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsSubscriptionPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewsSubscriptionsCriteria.equals(criteria))
            {
                collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collNewslettersRelatedByProjectId
     */
    protected List collNewslettersRelatedByProjectId;

    /**
     * Temporary storage of collNewslettersRelatedByProjectId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewslettersRelatedByProjectId()
    {
        if (collNewslettersRelatedByProjectId == null)
        {
            collNewslettersRelatedByProjectId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Newsletter object to this object
     * through the Newsletter foreign key attribute
     *
     * @param l Newsletter
     * @throws TorqueException
     */
    public void addNewsletterRelatedByProjectId(Newsletter l) throws TorqueException
    {
        getNewslettersRelatedByProjectId().add(l);
        l.setProjectRelatedByProjectId((Project) this);
    }

    /**
     * The criteria used to select the current contents of collNewslettersRelatedByProjectId
     */
    private Criteria lastNewslettersRelatedByProjectIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByProjectId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByProjectId() throws TorqueException
    {
              if (collNewslettersRelatedByProjectId == null)
        {
            collNewslettersRelatedByProjectId = getNewslettersRelatedByProjectId(new Criteria(10));
        }
        return collNewslettersRelatedByProjectId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByProjectId(Criteria criteria) throws TorqueException
    {
              if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId() );
                        collNewslettersRelatedByProjectId = NewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                            if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
                {
                    collNewslettersRelatedByProjectId = NewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByProjectId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByProjectId(Connection con) throws TorqueException
    {
              if (collNewslettersRelatedByProjectId == null)
        {
            collNewslettersRelatedByProjectId = getNewslettersRelatedByProjectId(new Criteria(10), con);
        }
        return collNewslettersRelatedByProjectId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByProjectId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                         criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                         collNewslettersRelatedByProjectId = NewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                             if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
                 {
                     collNewslettersRelatedByProjectId = NewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewslettersRelatedByProjectIdCriteria = criteria;

         return collNewslettersRelatedByProjectId;
           }

                                                            
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinProductRelatedByProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinProjectRelatedByRelProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinProductRelatedByRelProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinCountry(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinLanguageRelatedByCustLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByProjectIdJoinLanguageRelatedByLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                              collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByProjectIdCriteria = criteria;

        return collNewslettersRelatedByProjectId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collNewslettersRelatedByRelProjectId
     */
    protected List collNewslettersRelatedByRelProjectId;

    /**
     * Temporary storage of collNewslettersRelatedByRelProjectId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewslettersRelatedByRelProjectId()
    {
        if (collNewslettersRelatedByRelProjectId == null)
        {
            collNewslettersRelatedByRelProjectId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Newsletter object to this object
     * through the Newsletter foreign key attribute
     *
     * @param l Newsletter
     * @throws TorqueException
     */
    public void addNewsletterRelatedByRelProjectId(Newsletter l) throws TorqueException
    {
        getNewslettersRelatedByRelProjectId().add(l);
        l.setProjectRelatedByRelProjectId((Project) this);
    }

    /**
     * The criteria used to select the current contents of collNewslettersRelatedByRelProjectId
     */
    private Criteria lastNewslettersRelatedByRelProjectIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByRelProjectId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByRelProjectId() throws TorqueException
    {
              if (collNewslettersRelatedByRelProjectId == null)
        {
            collNewslettersRelatedByRelProjectId = getNewslettersRelatedByRelProjectId(new Criteria(10));
        }
        return collNewslettersRelatedByRelProjectId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByRelProjectId(Criteria criteria) throws TorqueException
    {
              if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId() );
                        collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                            if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
                {
                    collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByRelProjectId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByRelProjectId(Connection con) throws TorqueException
    {
              if (collNewslettersRelatedByRelProjectId == null)
        {
            collNewslettersRelatedByRelProjectId = getNewslettersRelatedByRelProjectId(new Criteria(10), con);
        }
        return collNewslettersRelatedByRelProjectId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByRelProjectId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                         criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                         collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                             if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
                 {
                     collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewslettersRelatedByRelProjectIdCriteria = criteria;

         return collNewslettersRelatedByRelProjectId;
           }

                                                            
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinProjectRelatedByProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinProductRelatedByProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinProductRelatedByRelProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinCountry(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinLanguageRelatedByCustLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProjectId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getNewslettersRelatedByRelProjectIdJoinLanguageRelatedByLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProjectId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProjectId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                              collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PROJECT_ID, getProjectId());
                                    if (!lastNewslettersRelatedByRelProjectIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProjectId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByRelProjectIdCriteria = criteria;

        return collNewslettersRelatedByRelProjectId;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collTasks
     */
    protected List collTasks;

    /**
     * Temporary storage of collTasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasks()
    {
        if (collTasks == null)
        {
            collTasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Task object to this object
     * through the Task foreign key attribute
     *
     * @param l Task
     * @throws TorqueException
     */
    public void addTask(Task l) throws TorqueException
    {
        getTasks().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collTasks
     */
    private Criteria lastTasksCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasks() throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10));
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasks(Criteria criteria) throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                        criteria.add(TaskPeer.PROJECT_ID, getProjectId() );
                        collTasks = TaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                            if (!lastTasksCriteria.equals(criteria))
                {
                    collTasks = TaskPeer.doSelect(criteria);
                }
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Connection con) throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10), con);
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                         criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                         collTasks = TaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                             if (!lastTasksCriteria.equals(criteria))
                 {
                     collTasks = TaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasksCriteria = criteria;

         return collTasks;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getTasksJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                              collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getTasksJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                              collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getTasksJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                              collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getTasksJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                              collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PROJECT_ID, getProjectId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collSorderItems
     */
    protected List collSorderItems;

    /**
     * Temporary storage of collSorderItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorderItems()
    {
        if (collSorderItems == null)
        {
            collSorderItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a SorderItem object to this object
     * through the SorderItem foreign key attribute
     *
     * @param l SorderItem
     * @throws TorqueException
     */
    public void addSorderItem(SorderItem l) throws TorqueException
    {
        getSorderItems().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collSorderItems
     */
    private Criteria lastSorderItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorderItems() throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10));
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorderItems(Criteria criteria) throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId() );
                        collSorderItems = SorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                            if (!lastSorderItemsCriteria.equals(criteria))
                {
                    collSorderItems = SorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Connection con) throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10), con);
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                         criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                         collSorderItems = SorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                             if (!lastSorderItemsCriteria.equals(criteria))
                 {
                     collSorderItems = SorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSorderItemsCriteria = criteria;

         return collSorderItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getSorderItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                              collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPaymentItems
     */
    protected List collPaymentItems;

    /**
     * Temporary storage of collPaymentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPaymentItems()
    {
        if (collPaymentItems == null)
        {
            collPaymentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a PaymentItem object to this object
     * through the PaymentItem foreign key attribute
     *
     * @param l PaymentItem
     * @throws TorqueException
     */
    public void addPaymentItem(PaymentItem l) throws TorqueException
    {
        getPaymentItems().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collPaymentItems
     */
    private Criteria lastPaymentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPaymentItems() throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10));
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPaymentItems(Criteria criteria) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId() );
                        collPaymentItems = PaymentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                            if (!lastPaymentItemsCriteria.equals(criteria))
                {
                    collPaymentItems = PaymentItemPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Connection con) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10), con);
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                         collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                             if (!lastPaymentItemsCriteria.equals(criteria))
                 {
                     collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentItemsCriteria = criteria;

         return collPaymentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinPayment(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getPaymentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collShipmentItems
     */
    protected List collShipmentItems;

    /**
     * Temporary storage of collShipmentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentItems()
    {
        if (collShipmentItems == null)
        {
            collShipmentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ShipmentItem object to this object
     * through the ShipmentItem foreign key attribute
     *
     * @param l ShipmentItem
     * @throws TorqueException
     */
    public void addShipmentItem(ShipmentItem l) throws TorqueException
    {
        getShipmentItems().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentItems
     */
    private Criteria lastShipmentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentItems() throws TorqueException
    {
              if (collShipmentItems == null)
        {
            collShipmentItems = getShipmentItems(new Criteria(10));
        }
        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentItems(Criteria criteria) throws TorqueException
    {
              if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId() );
                        collShipmentItems = ShipmentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                            if (!lastShipmentItemsCriteria.equals(criteria))
                {
                    collShipmentItems = ShipmentItemPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItems(Connection con) throws TorqueException
    {
              if (collShipmentItems == null)
        {
            collShipmentItems = getShipmentItems(new Criteria(10), con);
        }
        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                         collShipmentItems = ShipmentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                             if (!lastShipmentItemsCriteria.equals(criteria))
                 {
                     collShipmentItems = ShipmentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentItemsCriteria = criteria;

         return collShipmentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinShipment(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getShipmentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collServiceItems
     */
    protected List collServiceItems;

    /**
     * Temporary storage of collServiceItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServiceItems()
    {
        if (collServiceItems == null)
        {
            collServiceItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ServiceItem object to this object
     * through the ServiceItem foreign key attribute
     *
     * @param l ServiceItem
     * @throws TorqueException
     */
    public void addServiceItem(ServiceItem l) throws TorqueException
    {
        getServiceItems().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collServiceItems
     */
    private Criteria lastServiceItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServiceItems() throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10));
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServiceItems(Criteria criteria) throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId() );
                        collServiceItems = ServiceItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                            if (!lastServiceItemsCriteria.equals(criteria))
                {
                    collServiceItems = ServiceItemPeer.doSelect(criteria);
                }
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Connection con) throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10), con);
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                         criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                         collServiceItems = ServiceItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                             if (!lastServiceItemsCriteria.equals(criteria))
                 {
                     collServiceItems = ServiceItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastServiceItemsCriteria = criteria;

         return collServiceItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project is new, it will return
     * an empty collection; or if this Project has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Project.
     */
    protected List getServiceItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PROJECT_ID, getProjectId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ProjectId");
              fieldNames.add("ProjectCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("ProjectCatId");
              fieldNames.add("ProjectName");
              fieldNames.add("StartDate");
              fieldNames.add("EndDate");
              fieldNames.add("Expenses");
              fieldNames.add("Revenues");
              fieldNames.add("Custom1");
              fieldNames.add("Custom2");
              fieldNames.add("Custom3");
              fieldNames.add("Custom4");
              fieldNames.add("Custom5");
              fieldNames.add("Custom6");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ProjectId"))
        {
                return new Integer(getProjectId());
            }
          if (name.equals("ProjectCode"))
        {
                return getProjectCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("ProjectCatId"))
        {
                return new Integer(getProjectCatId());
            }
          if (name.equals("ProjectName"))
        {
                return getProjectName();
            }
          if (name.equals("StartDate"))
        {
                return getStartDate();
            }
          if (name.equals("EndDate"))
        {
                return getEndDate();
            }
          if (name.equals("Expenses"))
        {
                return getExpenses();
            }
          if (name.equals("Revenues"))
        {
                return getRevenues();
            }
          if (name.equals("Custom1"))
        {
                return getCustom1();
            }
          if (name.equals("Custom2"))
        {
                return getCustom2();
            }
          if (name.equals("Custom3"))
        {
                return getCustom3();
            }
          if (name.equals("Custom4"))
        {
                return getCustom4();
            }
          if (name.equals("Custom5"))
        {
                return getCustom5();
            }
          if (name.equals("Custom6"))
        {
                return getCustom6();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ProjectPeer.PROJECT_ID))
        {
                return new Integer(getProjectId());
            }
          if (name.equals(ProjectPeer.PROJECT_CODE))
        {
                return getProjectCode();
            }
          if (name.equals(ProjectPeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(ProjectPeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(ProjectPeer.PROJECT_CAT_ID))
        {
                return new Integer(getProjectCatId());
            }
          if (name.equals(ProjectPeer.PROJECT_NAME))
        {
                return getProjectName();
            }
          if (name.equals(ProjectPeer.START_DATE))
        {
                return getStartDate();
            }
          if (name.equals(ProjectPeer.END_DATE))
        {
                return getEndDate();
            }
          if (name.equals(ProjectPeer.EXPENSES))
        {
                return getExpenses();
            }
          if (name.equals(ProjectPeer.REVENUES))
        {
                return getRevenues();
            }
          if (name.equals(ProjectPeer.CUSTOM_1))
        {
                return getCustom1();
            }
          if (name.equals(ProjectPeer.CUSTOM_2))
        {
                return getCustom2();
            }
          if (name.equals(ProjectPeer.CUSTOM_3))
        {
                return getCustom3();
            }
          if (name.equals(ProjectPeer.CUSTOM_4))
        {
                return getCustom4();
            }
          if (name.equals(ProjectPeer.CUSTOM_5))
        {
                return getCustom5();
            }
          if (name.equals(ProjectPeer.CUSTOM_6))
        {
                return getCustom6();
            }
          if (name.equals(ProjectPeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(ProjectPeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(ProjectPeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(ProjectPeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(ProjectPeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getProjectId());
            }
              if (pos == 1)
        {
                return getProjectCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return new Integer(getProjectCatId());
            }
              if (pos == 5)
        {
                return getProjectName();
            }
              if (pos == 6)
        {
                return getStartDate();
            }
              if (pos == 7)
        {
                return getEndDate();
            }
              if (pos == 8)
        {
                return getExpenses();
            }
              if (pos == 9)
        {
                return getRevenues();
            }
              if (pos == 10)
        {
                return getCustom1();
            }
              if (pos == 11)
        {
                return getCustom2();
            }
              if (pos == 12)
        {
                return getCustom3();
            }
              if (pos == 13)
        {
                return getCustom4();
            }
              if (pos == 14)
        {
                return getCustom5();
            }
              if (pos == 15)
        {
                return getCustom6();
            }
              if (pos == 16)
        {
                return getNotes();
            }
              if (pos == 17)
        {
                return getCreated();
            }
              if (pos == 18)
        {
                return getModified();
            }
              if (pos == 19)
        {
                return getCreatedBy();
            }
              if (pos == 20)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ProjectPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ProjectPeer.doInsert((Project) this, con);
                    setNew(false);
                }
                else
                {
                    ProjectPeer.doUpdate((Project) this, con);
                }
            }

                                      
                
                    if (collOpportunitys != null)
            {
                for (int i = 0; i < collOpportunitys.size(); i++)
                {
                    ((Opportunity) collOpportunitys.get(i)).save(con);
                }
            }
                                                  
                
                    if (collSorders != null)
            {
                for (int i = 0; i < collSorders.size(); i++)
                {
                    ((Sorder) collSorders.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPayments != null)
            {
                for (int i = 0; i < collPayments.size(); i++)
                {
                    ((Payment) collPayments.get(i)).save(con);
                }
            }
                                                  
                
                    if (collServices != null)
            {
                for (int i = 0; i < collServices.size(); i++)
                {
                    ((Service) collServices.get(i)).save(con);
                }
            }
                                                  
                
                    if (collShipments != null)
            {
                for (int i = 0; i < collShipments.size(); i++)
                {
                    ((Shipment) collShipments.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPrintSubscriptions != null)
            {
                for (int i = 0; i < collPrintSubscriptions.size(); i++)
                {
                    ((PrintSubscription) collPrintSubscriptions.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOnlineSubscriptions != null)
            {
                for (int i = 0; i < collOnlineSubscriptions.size(); i++)
                {
                    ((OnlineSubscription) collOnlineSubscriptions.get(i)).save(con);
                }
            }
                                                  
                
                    if (collInboxEvents != null)
            {
                for (int i = 0; i < collInboxEvents.size(); i++)
                {
                    ((InboxEvent) collInboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOutboxEvents != null)
            {
                for (int i = 0; i < collOutboxEvents.size(); i++)
                {
                    ((OutboxEvent) collOutboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collNewsSubscriptions != null)
            {
                for (int i = 0; i < collNewsSubscriptions.size(); i++)
                {
                    ((NewsSubscription) collNewsSubscriptions.get(i)).save(con);
                }
            }
                                                            
                
                    if (collNewslettersRelatedByProjectId != null)
            {
                for (int i = 0; i < collNewslettersRelatedByProjectId.size(); i++)
                {
                    ((Newsletter) collNewslettersRelatedByProjectId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collNewslettersRelatedByRelProjectId != null)
            {
                for (int i = 0; i < collNewslettersRelatedByRelProjectId.size(); i++)
                {
                    ((Newsletter) collNewslettersRelatedByRelProjectId.get(i)).save(con);
                }
            }
                                                  
                
                    if (collTasks != null)
            {
                for (int i = 0; i < collTasks.size(); i++)
                {
                    ((Task) collTasks.get(i)).save(con);
                }
            }
                                                  
                
                    if (collSorderItems != null)
            {
                for (int i = 0; i < collSorderItems.size(); i++)
                {
                    ((SorderItem) collSorderItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPaymentItems != null)
            {
                for (int i = 0; i < collPaymentItems.size(); i++)
                {
                    ((PaymentItem) collPaymentItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collShipmentItems != null)
            {
                for (int i = 0; i < collShipmentItems.size(); i++)
                {
                    ((ShipmentItem) collShipmentItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collServiceItems != null)
            {
                for (int i = 0; i < collServiceItems.size(); i++)
                {
                    ((ServiceItem) collServiceItems.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key projectId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setProjectId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setProjectId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getProjectId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Project copy() throws TorqueException
    {
        return copyInto(new Project());
    }
  
    protected Project copyInto(Project copyObj) throws TorqueException
    {
          copyObj.setProjectId(projectId);
          copyObj.setProjectCode(projectCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setProjectCatId(projectCatId);
          copyObj.setProjectName(projectName);
          copyObj.setStartDate(startDate);
          copyObj.setEndDate(endDate);
          copyObj.setExpenses(expenses);
          copyObj.setRevenues(revenues);
          copyObj.setCustom1(custom1);
          copyObj.setCustom2(custom2);
          copyObj.setCustom3(custom3);
          copyObj.setCustom4(custom4);
          copyObj.setCustom5(custom5);
          copyObj.setCustom6(custom6);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setProjectId( 0);
                                                                                                                                    
                                      
                            
        List v = getOpportunitys();
        for (int i = 0; i < v.size(); i++)
        {
            Opportunity obj = (Opportunity) v.get(i);
            copyObj.addOpportunity(obj.copy());
        }
                                                  
                            
        v = getSorders();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorder(obj.copy());
        }
                                                  
                            
        v = getPayments();
        for (int i = 0; i < v.size(); i++)
        {
            Payment obj = (Payment) v.get(i);
            copyObj.addPayment(obj.copy());
        }
                                                  
                            
        v = getServices();
        for (int i = 0; i < v.size(); i++)
        {
            Service obj = (Service) v.get(i);
            copyObj.addService(obj.copy());
        }
                                                  
                            
        v = getShipments();
        for (int i = 0; i < v.size(); i++)
        {
            Shipment obj = (Shipment) v.get(i);
            copyObj.addShipment(obj.copy());
        }
                                                  
                            
        v = getPrintSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            PrintSubscription obj = (PrintSubscription) v.get(i);
            copyObj.addPrintSubscription(obj.copy());
        }
                                                  
                            
        v = getOnlineSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            OnlineSubscription obj = (OnlineSubscription) v.get(i);
            copyObj.addOnlineSubscription(obj.copy());
        }
                                                  
                            
        v = getInboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            InboxEvent obj = (InboxEvent) v.get(i);
            copyObj.addInboxEvent(obj.copy());
        }
                                                  
                            
        v = getOutboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            OutboxEvent obj = (OutboxEvent) v.get(i);
            copyObj.addOutboxEvent(obj.copy());
        }
                                                  
                            
        v = getNewsSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            NewsSubscription obj = (NewsSubscription) v.get(i);
            copyObj.addNewsSubscription(obj.copy());
        }
                                                            
                            
        v = getNewslettersRelatedByProjectId();
        for (int i = 0; i < v.size(); i++)
        {
            Newsletter obj = (Newsletter) v.get(i);
            copyObj.addNewsletterRelatedByProjectId(obj.copy());
        }
                                                            
                            
        v = getNewslettersRelatedByRelProjectId();
        for (int i = 0; i < v.size(); i++)
        {
            Newsletter obj = (Newsletter) v.get(i);
            copyObj.addNewsletterRelatedByRelProjectId(obj.copy());
        }
                                                  
                            
        v = getTasks();
        for (int i = 0; i < v.size(); i++)
        {
            Task obj = (Task) v.get(i);
            copyObj.addTask(obj.copy());
        }
                                                  
                            
        v = getSorderItems();
        for (int i = 0; i < v.size(); i++)
        {
            SorderItem obj = (SorderItem) v.get(i);
            copyObj.addSorderItem(obj.copy());
        }
                                                  
                            
        v = getPaymentItems();
        for (int i = 0; i < v.size(); i++)
        {
            PaymentItem obj = (PaymentItem) v.get(i);
            copyObj.addPaymentItem(obj.copy());
        }
                                                  
                            
        v = getShipmentItems();
        for (int i = 0; i < v.size(); i++)
        {
            ShipmentItem obj = (ShipmentItem) v.get(i);
            copyObj.addShipmentItem(obj.copy());
        }
                                                  
                            
        v = getServiceItems();
        for (int i = 0; i < v.size(); i++)
        {
            ServiceItem obj = (ServiceItem) v.get(i);
            copyObj.addServiceItem(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProjectPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Project:\n");
        str.append("ProjectId = ")
               .append(getProjectId())
             .append("\n");
        str.append("ProjectCode = ")
               .append(getProjectCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("ProjectCatId = ")
               .append(getProjectCatId())
             .append("\n");
        str.append("ProjectName = ")
               .append(getProjectName())
             .append("\n");
        str.append("StartDate = ")
               .append(getStartDate())
             .append("\n");
        str.append("EndDate = ")
               .append(getEndDate())
             .append("\n");
        str.append("Expenses = ")
               .append(getExpenses())
             .append("\n");
        str.append("Revenues = ")
               .append(getRevenues())
             .append("\n");
        str.append("Custom1 = ")
               .append(getCustom1())
             .append("\n");
        str.append("Custom2 = ")
               .append(getCustom2())
             .append("\n");
        str.append("Custom3 = ")
               .append(getCustom3())
             .append("\n");
        str.append("Custom4 = ")
               .append(getCustom4())
             .append("\n");
        str.append("Custom5 = ")
               .append(getCustom5())
             .append("\n");
        str.append("Custom6 = ")
               .append(getCustom6())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
