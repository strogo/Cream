package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Product
 */
public abstract class BaseProduct extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final ProductPeer peer =
        new ProductPeer();

        
    /** The value for the productId field */
    private int productId;
                                                
    /** The value for the productCode field */
    private String productCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
                                          
    /** The value for the productType field */
    private int productType = 10;
                                          
    /** The value for the productCatId field */
    private int productCatId = 1000;
      
    /** The value for the productDescription field */
    private String productDescription;
      
    /** The value for the productDisplay field */
    private String productDisplay;
                                          
    /** The value for the basePrice field */
    private double basePrice = 0;
                                          
    /** The value for the uomId field */
    private int uomId = 1000;
      
    /** The value for the webUrl field */
    private String webUrl;
                                          
    /** The value for the showOnPricelist field */
    private int showOnPricelist = 20;
                                          
    /** The value for the vendorId field */
    private int vendorId = 1000;
      
    /** The value for the vendorsCode field */
    private String vendorsCode;
      
    /** The value for the eanUpcCode field */
    private String eanUpcCode;
      
    /** The value for the location field */
    private String location;
      
    /** The value for the custom1 field */
    private String custom1;
      
    /** The value for the custom2 field */
    private String custom2;
      
    /** The value for the custom3 field */
    private String custom3;
      
    /** The value for the custom4 field */
    private String custom4;
      
    /** The value for the custom5 field */
    private String custom5;
      
    /** The value for the custom6 field */
    private String custom6;
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the ProductId
     *
     * @return int
     */
    public int getProductId()
    {
        return productId;
    }

                                              
    /**
     * Set the value of ProductId
     *
     * @param v new value
     */
    public void setProductId(int v) throws TorqueException
    {
    
                  if (this.productId != v)
              {
            this.productId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated PrintSubscription
        if (collPrintSubscriptions != null)
        {
            for (int i = 0; i < collPrintSubscriptions.size(); i++)
            {
                ((PrintSubscription) collPrintSubscriptions.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated OnlineSubscription
        if (collOnlineSubscriptions != null)
        {
            for (int i = 0; i < collOnlineSubscriptions.size(); i++)
            {
                ((OnlineSubscription) collOnlineSubscriptions.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated InboxEvent
        if (collInboxEvents != null)
        {
            for (int i = 0; i < collInboxEvents.size(); i++)
            {
                ((InboxEvent) collInboxEvents.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated OutboxEvent
        if (collOutboxEvents != null)
        {
            for (int i = 0; i < collOutboxEvents.size(); i++)
            {
                ((OutboxEvent) collOutboxEvents.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated NewsSubscription
        if (collNewsSubscriptions != null)
        {
            for (int i = 0; i < collNewsSubscriptions.size(); i++)
            {
                ((NewsSubscription) collNewsSubscriptions.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated Newsletter
        if (collNewslettersRelatedByProductId != null)
        {
            for (int i = 0; i < collNewslettersRelatedByProductId.size(); i++)
            {
                ((Newsletter) collNewslettersRelatedByProductId.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated Newsletter
        if (collNewslettersRelatedByRelProductId != null)
        {
            for (int i = 0; i < collNewslettersRelatedByRelProductId.size(); i++)
            {
                ((Newsletter) collNewslettersRelatedByRelProductId.get(i))
                    .setRelProductId(v);
            }
        }
                                                    
                  // update associated Task
        if (collTasks != null)
        {
            for (int i = 0; i < collTasks.size(); i++)
            {
                ((Task) collTasks.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated SorderItem
        if (collSorderItems != null)
        {
            for (int i = 0; i < collSorderItems.size(); i++)
            {
                ((SorderItem) collSorderItems.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated PaymentItem
        if (collPaymentItems != null)
        {
            for (int i = 0; i < collPaymentItems.size(); i++)
            {
                ((PaymentItem) collPaymentItems.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated ShipmentItem
        if (collShipmentItems != null)
        {
            for (int i = 0; i < collShipmentItems.size(); i++)
            {
                ((ShipmentItem) collShipmentItems.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated ServiceItem
        if (collServiceItems != null)
        {
            for (int i = 0; i < collServiceItems.size(); i++)
            {
                ((ServiceItem) collServiceItems.get(i))
                    .setProductId(v);
            }
        }
                                                    
                  // update associated ProductCmsSection
        if (collProductCmsSections != null)
        {
            for (int i = 0; i < collProductCmsSections.size(); i++)
            {
                ((ProductCmsSection) collProductCmsSections.get(i))
                    .setProductId(v);
            }
        }
                                }
  
    /**
     * Get the ProductCode
     *
     * @return String
     */
    public String getProductCode()
    {
        return productCode;
    }

                        
    /**
     * Set the value of ProductCode
     *
     * @param v new value
     */
    public void setProductCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.productCode, v))
              {
            this.productCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ProductType
     *
     * @return int
     */
    public int getProductType()
    {
        return productType;
    }

                        
    /**
     * Set the value of ProductType
     *
     * @param v new value
     */
    public void setProductType(int v) 
    {
    
                  if (this.productType != v)
              {
            this.productType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ProductCatId
     *
     * @return int
     */
    public int getProductCatId()
    {
        return productCatId;
    }

                              
    /**
     * Set the value of ProductCatId
     *
     * @param v new value
     */
    public void setProductCatId(int v) throws TorqueException
    {
    
                  if (this.productCatId != v)
              {
            this.productCatId = v;
            setModified(true);
        }
    
                          
                if (aProductCategory != null && !(aProductCategory.getProductCatId() == v))
                {
            aProductCategory = null;
        }
      
              }
  
    /**
     * Get the ProductDescription
     *
     * @return String
     */
    public String getProductDescription()
    {
        return productDescription;
    }

                        
    /**
     * Set the value of ProductDescription
     *
     * @param v new value
     */
    public void setProductDescription(String v) 
    {
    
                  if (!ObjectUtils.equals(this.productDescription, v))
              {
            this.productDescription = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ProductDisplay
     *
     * @return String
     */
    public String getProductDisplay()
    {
        return productDisplay;
    }

                        
    /**
     * Set the value of ProductDisplay
     *
     * @param v new value
     */
    public void setProductDisplay(String v) 
    {
    
                  if (!ObjectUtils.equals(this.productDisplay, v))
              {
            this.productDisplay = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the BasePrice
     *
     * @return double
     */
    public double getBasePrice()
    {
        return basePrice;
    }

                        
    /**
     * Set the value of BasePrice
     *
     * @param v new value
     */
    public void setBasePrice(double v) 
    {
    
                  if (this.basePrice != v)
              {
            this.basePrice = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the UomId
     *
     * @return int
     */
    public int getUomId()
    {
        return uomId;
    }

                              
    /**
     * Set the value of UomId
     *
     * @param v new value
     */
    public void setUomId(int v) throws TorqueException
    {
    
                  if (this.uomId != v)
              {
            this.uomId = v;
            setModified(true);
        }
    
                          
                if (aUom != null && !(aUom.getUomId() == v))
                {
            aUom = null;
        }
      
              }
  
    /**
     * Get the WebUrl
     *
     * @return String
     */
    public String getWebUrl()
    {
        return webUrl;
    }

                        
    /**
     * Set the value of WebUrl
     *
     * @param v new value
     */
    public void setWebUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.webUrl, v))
              {
            this.webUrl = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ShowOnPricelist
     *
     * @return int
     */
    public int getShowOnPricelist()
    {
        return showOnPricelist;
    }

                        
    /**
     * Set the value of ShowOnPricelist
     *
     * @param v new value
     */
    public void setShowOnPricelist(int v) 
    {
    
                  if (this.showOnPricelist != v)
              {
            this.showOnPricelist = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the VendorId
     *
     * @return int
     */
    public int getVendorId()
    {
        return vendorId;
    }

                              
    /**
     * Set the value of VendorId
     *
     * @param v new value
     */
    public void setVendorId(int v) throws TorqueException
    {
    
                  if (this.vendorId != v)
              {
            this.vendorId = v;
            setModified(true);
        }
    
                          
                if (aVendor != null && !(aVendor.getVendorId() == v))
                {
            aVendor = null;
        }
      
              }
  
    /**
     * Get the VendorsCode
     *
     * @return String
     */
    public String getVendorsCode()
    {
        return vendorsCode;
    }

                        
    /**
     * Set the value of VendorsCode
     *
     * @param v new value
     */
    public void setVendorsCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.vendorsCode, v))
              {
            this.vendorsCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EanUpcCode
     *
     * @return String
     */
    public String getEanUpcCode()
    {
        return eanUpcCode;
    }

                        
    /**
     * Set the value of EanUpcCode
     *
     * @param v new value
     */
    public void setEanUpcCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.eanUpcCode, v))
              {
            this.eanUpcCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Location
     *
     * @return String
     */
    public String getLocation()
    {
        return location;
    }

                        
    /**
     * Set the value of Location
     *
     * @param v new value
     */
    public void setLocation(String v) 
    {
    
                  if (!ObjectUtils.equals(this.location, v))
              {
            this.location = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom1
     *
     * @return String
     */
    public String getCustom1()
    {
        return custom1;
    }

                        
    /**
     * Set the value of Custom1
     *
     * @param v new value
     */
    public void setCustom1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom1, v))
              {
            this.custom1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom2
     *
     * @return String
     */
    public String getCustom2()
    {
        return custom2;
    }

                        
    /**
     * Set the value of Custom2
     *
     * @param v new value
     */
    public void setCustom2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom2, v))
              {
            this.custom2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom3
     *
     * @return String
     */
    public String getCustom3()
    {
        return custom3;
    }

                        
    /**
     * Set the value of Custom3
     *
     * @param v new value
     */
    public void setCustom3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom3, v))
              {
            this.custom3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom4
     *
     * @return String
     */
    public String getCustom4()
    {
        return custom4;
    }

                        
    /**
     * Set the value of Custom4
     *
     * @param v new value
     */
    public void setCustom4(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom4, v))
              {
            this.custom4 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom5
     *
     * @return String
     */
    public String getCustom5()
    {
        return custom5;
    }

                        
    /**
     * Set the value of Custom5
     *
     * @param v new value
     */
    public void setCustom5(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom5, v))
              {
            this.custom5 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom6
     *
     * @return String
     */
    public String getCustom6()
    {
        return custom6;
    }

                        
    /**
     * Set the value of Custom6
     *
     * @param v new value
     */
    public void setCustom6(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom6, v))
              {
            this.custom6 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private ProductCategory aProductCategory;

    /**
     * Declares an association between this object and a ProductCategory object
     *
     * @param v ProductCategory
     * @throws TorqueException
     */
    public void setProductCategory(ProductCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setProductCatId( 1000);
              }
        else
        {
            setProductCatId(v.getProductCatId());
        }
            aProductCategory = v;
    }

                                            
    /**
     * Get the associated ProductCategory object
     *
     * @return the associated ProductCategory object
     * @throws TorqueException
     */
    public ProductCategory getProductCategory() throws TorqueException
    {
        if (aProductCategory == null && (this.productCatId != 0))
        {
                          aProductCategory = ProductCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.productCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ProductCategory obj = ProductCategoryPeer.retrieveByPK(this.productCatId);
               obj.addProducts(this);
            */
        }
        return aProductCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setProductCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setProductCatId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Uom aUom;

    /**
     * Declares an association between this object and a Uom object
     *
     * @param v Uom
     * @throws TorqueException
     */
    public void setUom(Uom v) throws TorqueException
    {
            if (v == null)
        {
                          setUomId( 1000);
              }
        else
        {
            setUomId(v.getUomId());
        }
            aUom = v;
    }

                                            
    /**
     * Get the associated Uom object
     *
     * @return the associated Uom object
     * @throws TorqueException
     */
    public Uom getUom() throws TorqueException
    {
        if (aUom == null && (this.uomId != 0))
        {
                          aUom = UomPeer.retrieveByPK(SimpleKey.keyFor(this.uomId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Uom obj = UomPeer.retrieveByPK(this.uomId);
               obj.addProducts(this);
            */
        }
        return aUom;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setUomKey(ObjectKey key) throws TorqueException
    {
      
                        setUomId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Vendor aVendor;

    /**
     * Declares an association between this object and a Vendor object
     *
     * @param v Vendor
     * @throws TorqueException
     */
    public void setVendor(Vendor v) throws TorqueException
    {
            if (v == null)
        {
                          setVendorId( 1000);
              }
        else
        {
            setVendorId(v.getVendorId());
        }
            aVendor = v;
    }

                                            
    /**
     * Get the associated Vendor object
     *
     * @return the associated Vendor object
     * @throws TorqueException
     */
    public Vendor getVendor() throws TorqueException
    {
        if (aVendor == null && (this.vendorId != 0))
        {
                          aVendor = VendorPeer.retrieveByPK(SimpleKey.keyFor(this.vendorId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Vendor obj = VendorPeer.retrieveByPK(this.vendorId);
               obj.addProducts(this);
            */
        }
        return aVendor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setVendorKey(ObjectKey key) throws TorqueException
    {
      
                        setVendorId(((NumberKey) key).intValue());
                  }
       
                                
            
          /**
     * Collection to store aggregation of collPrintSubscriptions
     */
    protected List collPrintSubscriptions;

    /**
     * Temporary storage of collPrintSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPrintSubscriptions()
    {
        if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a PrintSubscription object to this object
     * through the PrintSubscription foreign key attribute
     *
     * @param l PrintSubscription
     * @throws TorqueException
     */
    public void addPrintSubscription(PrintSubscription l) throws TorqueException
    {
        getPrintSubscriptions().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collPrintSubscriptions
     */
    private Criteria lastPrintSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions() throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10));
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId() );
                        collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                            if (!lastPrintSubscriptionsCriteria.equals(criteria))
                {
                    collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Connection con) throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            collPrintSubscriptions = getPrintSubscriptions(new Criteria(10), con);
        }
        return collPrintSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                         collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                             if (!lastPrintSubscriptionsCriteria.equals(criteria))
                 {
                     collPrintSubscriptions = PrintSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPrintSubscriptionsCriteria = criteria;

         return collPrintSubscriptions;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PrintSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPrintSubscriptionsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptions == null)
        {
            if (isNew())
            {
               collPrintSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                              collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastPrintSubscriptionsCriteria.equals(criteria))
            {
                collPrintSubscriptions = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPrintSubscriptionsCriteria = criteria;

        return collPrintSubscriptions;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOnlineSubscriptions
     */
    protected List collOnlineSubscriptions;

    /**
     * Temporary storage of collOnlineSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOnlineSubscriptions()
    {
        if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a OnlineSubscription object to this object
     * through the OnlineSubscription foreign key attribute
     *
     * @param l OnlineSubscription
     * @throws TorqueException
     */
    public void addOnlineSubscription(OnlineSubscription l) throws TorqueException
    {
        getOnlineSubscriptions().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collOnlineSubscriptions
     */
    private Criteria lastOnlineSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptions() throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = getOnlineSubscriptions(new Criteria(10));
        }
        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId() );
                        collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                            if (!lastOnlineSubscriptionsCriteria.equals(criteria))
                {
                    collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptions(Connection con) throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            collOnlineSubscriptions = getOnlineSubscriptions(new Criteria(10), con);
        }
        return collOnlineSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                         collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                             if (!lastOnlineSubscriptionsCriteria.equals(criteria))
                 {
                     collOnlineSubscriptions = OnlineSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOnlineSubscriptionsCriteria = criteria;

         return collOnlineSubscriptions;
           }

                                          
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOnlineSubscriptionsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOnlineSubscriptionsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOnlineSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOnlineSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OnlineSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOnlineSubscriptionsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptions == null)
        {
            if (isNew())
            {
               collOnlineSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                              collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastOnlineSubscriptionsCriteria.equals(criteria))
            {
                collOnlineSubscriptions = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastOnlineSubscriptionsCriteria = criteria;

        return collOnlineSubscriptions;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collInboxEvents
     */
    protected List collInboxEvents;

    /**
     * Temporary storage of collInboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInboxEvents()
    {
        if (collInboxEvents == null)
        {
            collInboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a InboxEvent object to this object
     * through the InboxEvent foreign key attribute
     *
     * @param l InboxEvent
     * @throws TorqueException
     */
    public void addInboxEvent(InboxEvent l) throws TorqueException
    {
        getInboxEvents().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collInboxEvents
     */
    private Criteria lastInboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getInboxEvents() throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10));
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInboxEvents(Criteria criteria) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(InboxEventPeer.PRODUCT_ID, getProductId() );
                        collInboxEvents = InboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                            if (!lastInboxEventsCriteria.equals(criteria))
                {
                    collInboxEvents = InboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Connection con) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10), con);
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                         collInboxEvents = InboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                             if (!lastInboxEventsCriteria.equals(criteria))
                 {
                     collInboxEvents = InboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInboxEventsCriteria = criteria;

         return collInboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getInboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                              collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getInboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                              collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getInboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getInboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOutboxEvents
     */
    protected List collOutboxEvents;

    /**
     * Temporary storage of collOutboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOutboxEvents()
    {
        if (collOutboxEvents == null)
        {
            collOutboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a OutboxEvent object to this object
     * through the OutboxEvent foreign key attribute
     *
     * @param l OutboxEvent
     * @throws TorqueException
     */
    public void addOutboxEvent(OutboxEvent l) throws TorqueException
    {
        getOutboxEvents().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collOutboxEvents
     */
    private Criteria lastOutboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOutboxEvents() throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10));
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOutboxEvents(Criteria criteria) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId() );
                        collOutboxEvents = OutboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                            if (!lastOutboxEventsCriteria.equals(criteria))
                {
                    collOutboxEvents = OutboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Connection con) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10), con);
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                         collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                             if (!lastOutboxEventsCriteria.equals(criteria))
                 {
                     collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOutboxEventsCriteria = criteria;

         return collOutboxEvents;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOutboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOutboxEventsJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinContact(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOutboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getOutboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.PRODUCT_ID, getProductId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collNewsSubscriptions
     */
    protected List collNewsSubscriptions;

    /**
     * Temporary storage of collNewsSubscriptions to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewsSubscriptions()
    {
        if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = new ArrayList();
        }
    }

    /**
     * Method called to associate a NewsSubscription object to this object
     * through the NewsSubscription foreign key attribute
     *
     * @param l NewsSubscription
     * @throws TorqueException
     */
    public void addNewsSubscription(NewsSubscription l) throws TorqueException
    {
        getNewsSubscriptions().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collNewsSubscriptions
     */
    private Criteria lastNewsSubscriptionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsSubscriptions(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewsSubscriptions() throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = getNewsSubscriptions(new Criteria(10));
        }
        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewsSubscriptions(Criteria criteria) throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                        criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId() );
                        collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                            if (!lastNewsSubscriptionsCriteria.equals(criteria))
                {
                    collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsSubscriptions(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsSubscriptions(Connection con) throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            collNewsSubscriptions = getNewsSubscriptions(new Criteria(10), con);
        }
        return collNewsSubscriptions;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsSubscriptions(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                         criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                         collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                             if (!lastNewsSubscriptionsCriteria.equals(criteria))
                 {
                     collNewsSubscriptions = NewsSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewsSubscriptionsCriteria = criteria;

         return collNewsSubscriptions;
           }

                        
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewsSubscriptionsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                              collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewsSubscriptionsCriteria.equals(criteria))
            {
                collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewsSubscriptions from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewsSubscriptionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsSubscriptions == null)
        {
            if (isNew())
            {
               collNewsSubscriptions = new ArrayList();
            }
            else
            {
                              criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                              collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsSubscriptionPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewsSubscriptionsCriteria.equals(criteria))
            {
                collNewsSubscriptions = NewsSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastNewsSubscriptionsCriteria = criteria;

        return collNewsSubscriptions;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collNewslettersRelatedByProductId
     */
    protected List collNewslettersRelatedByProductId;

    /**
     * Temporary storage of collNewslettersRelatedByProductId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewslettersRelatedByProductId()
    {
        if (collNewslettersRelatedByProductId == null)
        {
            collNewslettersRelatedByProductId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Newsletter object to this object
     * through the Newsletter foreign key attribute
     *
     * @param l Newsletter
     * @throws TorqueException
     */
    public void addNewsletterRelatedByProductId(Newsletter l) throws TorqueException
    {
        getNewslettersRelatedByProductId().add(l);
        l.setProductRelatedByProductId((Product) this);
    }

    /**
     * The criteria used to select the current contents of collNewslettersRelatedByProductId
     */
    private Criteria lastNewslettersRelatedByProductIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByProductId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByProductId() throws TorqueException
    {
              if (collNewslettersRelatedByProductId == null)
        {
            collNewslettersRelatedByProductId = getNewslettersRelatedByProductId(new Criteria(10));
        }
        return collNewslettersRelatedByProductId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByProductId(Criteria criteria) throws TorqueException
    {
              if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId() );
                        collNewslettersRelatedByProductId = NewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                            if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
                {
                    collNewslettersRelatedByProductId = NewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByProductId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByProductId(Connection con) throws TorqueException
    {
              if (collNewslettersRelatedByProductId == null)
        {
            collNewslettersRelatedByProductId = getNewslettersRelatedByProductId(new Criteria(10), con);
        }
        return collNewslettersRelatedByProductId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByProductId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                         criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                         collNewslettersRelatedByProductId = NewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                             if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
                 {
                     collNewslettersRelatedByProductId = NewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewslettersRelatedByProductIdCriteria = criteria;

         return collNewslettersRelatedByProductId;
           }

                                                            
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinProjectRelatedByProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinProjectRelatedByRelProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinProductRelatedByRelProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinCountry(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinLanguageRelatedByCustLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByProductIdJoinLanguageRelatedByLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                              collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByProductId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByProductIdCriteria = criteria;

        return collNewslettersRelatedByProductId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collNewslettersRelatedByRelProductId
     */
    protected List collNewslettersRelatedByRelProductId;

    /**
     * Temporary storage of collNewslettersRelatedByRelProductId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewslettersRelatedByRelProductId()
    {
        if (collNewslettersRelatedByRelProductId == null)
        {
            collNewslettersRelatedByRelProductId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Newsletter object to this object
     * through the Newsletter foreign key attribute
     *
     * @param l Newsletter
     * @throws TorqueException
     */
    public void addNewsletterRelatedByRelProductId(Newsletter l) throws TorqueException
    {
        getNewslettersRelatedByRelProductId().add(l);
        l.setProductRelatedByRelProductId((Product) this);
    }

    /**
     * The criteria used to select the current contents of collNewslettersRelatedByRelProductId
     */
    private Criteria lastNewslettersRelatedByRelProductIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByRelProductId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByRelProductId() throws TorqueException
    {
              if (collNewslettersRelatedByRelProductId == null)
        {
            collNewslettersRelatedByRelProductId = getNewslettersRelatedByRelProductId(new Criteria(10));
        }
        return collNewslettersRelatedByRelProductId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewslettersRelatedByRelProductId(Criteria criteria) throws TorqueException
    {
              if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId() );
                        collNewslettersRelatedByRelProductId = NewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                            if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
                {
                    collNewslettersRelatedByRelProductId = NewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewslettersRelatedByRelProductId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByRelProductId(Connection con) throws TorqueException
    {
              if (collNewslettersRelatedByRelProductId == null)
        {
            collNewslettersRelatedByRelProductId = getNewslettersRelatedByRelProductId(new Criteria(10), con);
        }
        return collNewslettersRelatedByRelProductId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewslettersRelatedByRelProductId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                         criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                         collNewslettersRelatedByRelProductId = NewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                             if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
                 {
                     collNewslettersRelatedByRelProductId = NewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewslettersRelatedByRelProductIdCriteria = criteria;

         return collNewslettersRelatedByRelProductId;
           }

                                                            
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinProjectRelatedByProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinProductRelatedByProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinProjectRelatedByRelProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinCountry(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinLanguageRelatedByCustLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related NewslettersRelatedByRelProductId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getNewslettersRelatedByRelProductIdJoinLanguageRelatedByLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewslettersRelatedByRelProductId == null)
        {
            if (isNew())
            {
               collNewslettersRelatedByRelProductId = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                              collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.REL_PRODUCT_ID, getProductId());
                                    if (!lastNewslettersRelatedByRelProductIdCriteria.equals(criteria))
            {
                collNewslettersRelatedByRelProductId = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        lastNewslettersRelatedByRelProductIdCriteria = criteria;

        return collNewslettersRelatedByRelProductId;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collTasks
     */
    protected List collTasks;

    /**
     * Temporary storage of collTasks to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initTasks()
    {
        if (collTasks == null)
        {
            collTasks = new ArrayList();
        }
    }

    /**
     * Method called to associate a Task object to this object
     * through the Task foreign key attribute
     *
     * @param l Task
     * @throws TorqueException
     */
    public void addTask(Task l) throws TorqueException
    {
        getTasks().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collTasks
     */
    private Criteria lastTasksCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria())
     *
     * @throws TorqueException
     */
    public List getTasks() throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10));
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getTasks(Criteria criteria) throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                        criteria.add(TaskPeer.PRODUCT_ID, getProductId() );
                        collTasks = TaskPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                            if (!lastTasksCriteria.equals(criteria))
                {
                    collTasks = TaskPeer.doSelect(criteria);
                }
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getTasks(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Connection con) throws TorqueException
    {
              if (collTasks == null)
        {
            collTasks = getTasks(new Criteria(10), con);
        }
        return collTasks;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getTasks(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                         criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                         collTasks = TaskPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                             if (!lastTasksCriteria.equals(criteria))
                 {
                     collTasks = TaskPeer.doSelect(criteria, con);
                 }
             }
         }
         lastTasksCriteria = criteria;

         return collTasks;
           }

                                    
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getTasksJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                              collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getTasksJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                              collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProject(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getTasksJoinContact(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                              collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinContact(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related Tasks from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getTasksJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collTasks == null)
        {
            if (isNew())
            {
               collTasks = new ArrayList();
            }
            else
            {
                              criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                              collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(TaskPeer.PRODUCT_ID, getProductId());
                                    if (!lastTasksCriteria.equals(criteria))
            {
                collTasks = TaskPeer.doSelectJoinProduct(criteria);
            }
        }
        lastTasksCriteria = criteria;

        return collTasks;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collSorderItems
     */
    protected List collSorderItems;

    /**
     * Temporary storage of collSorderItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorderItems()
    {
        if (collSorderItems == null)
        {
            collSorderItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a SorderItem object to this object
     * through the SorderItem foreign key attribute
     *
     * @param l SorderItem
     * @throws TorqueException
     */
    public void addSorderItem(SorderItem l) throws TorqueException
    {
        getSorderItems().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collSorderItems
     */
    private Criteria lastSorderItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorderItems() throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10));
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorderItems(Criteria criteria) throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId() );
                        collSorderItems = SorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                            if (!lastSorderItemsCriteria.equals(criteria))
                {
                    collSorderItems = SorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Connection con) throws TorqueException
    {
              if (collSorderItems == null)
        {
            collSorderItems = getSorderItems(new Criteria(10), con);
        }
        return collSorderItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                         criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                         collSorderItems = SorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                             if (!lastSorderItemsCriteria.equals(criteria))
                 {
                     collSorderItems = SorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSorderItemsCriteria = criteria;

         return collSorderItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related SorderItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getSorderItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItems == null)
        {
            if (isNew())
            {
               collSorderItems = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                              collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastSorderItemsCriteria.equals(criteria))
            {
                collSorderItems = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSorderItemsCriteria = criteria;

        return collSorderItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPaymentItems
     */
    protected List collPaymentItems;

    /**
     * Temporary storage of collPaymentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPaymentItems()
    {
        if (collPaymentItems == null)
        {
            collPaymentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a PaymentItem object to this object
     * through the PaymentItem foreign key attribute
     *
     * @param l PaymentItem
     * @throws TorqueException
     */
    public void addPaymentItem(PaymentItem l) throws TorqueException
    {
        getPaymentItems().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collPaymentItems
     */
    private Criteria lastPaymentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPaymentItems() throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10));
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPaymentItems(Criteria criteria) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId() );
                        collPaymentItems = PaymentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                            if (!lastPaymentItemsCriteria.equals(criteria))
                {
                    collPaymentItems = PaymentItemPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Connection con) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10), con);
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                         collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                             if (!lastPaymentItemsCriteria.equals(criteria))
                 {
                     collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentItemsCriteria = criteria;

         return collPaymentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinPayment(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getPaymentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collShipmentItems
     */
    protected List collShipmentItems;

    /**
     * Temporary storage of collShipmentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentItems()
    {
        if (collShipmentItems == null)
        {
            collShipmentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ShipmentItem object to this object
     * through the ShipmentItem foreign key attribute
     *
     * @param l ShipmentItem
     * @throws TorqueException
     */
    public void addShipmentItem(ShipmentItem l) throws TorqueException
    {
        getShipmentItems().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentItems
     */
    private Criteria lastShipmentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentItems() throws TorqueException
    {
              if (collShipmentItems == null)
        {
            collShipmentItems = getShipmentItems(new Criteria(10));
        }
        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentItems(Criteria criteria) throws TorqueException
    {
              if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId() );
                        collShipmentItems = ShipmentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                            if (!lastShipmentItemsCriteria.equals(criteria))
                {
                    collShipmentItems = ShipmentItemPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItems(Connection con) throws TorqueException
    {
              if (collShipmentItems == null)
        {
            collShipmentItems = getShipmentItems(new Criteria(10), con);
        }
        return collShipmentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                         collShipmentItems = ShipmentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                             if (!lastShipmentItemsCriteria.equals(criteria))
                 {
                     collShipmentItems = ShipmentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentItemsCriteria = criteria;

         return collShipmentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinShipment(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ShipmentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getShipmentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItems == null)
        {
            if (isNew())
            {
               collShipmentItems = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                              collShipmentItems = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastShipmentItemsCriteria.equals(criteria))
            {
                collShipmentItems = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentItemsCriteria = criteria;

        return collShipmentItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collServiceItems
     */
    protected List collServiceItems;

    /**
     * Temporary storage of collServiceItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServiceItems()
    {
        if (collServiceItems == null)
        {
            collServiceItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a ServiceItem object to this object
     * through the ServiceItem foreign key attribute
     *
     * @param l ServiceItem
     * @throws TorqueException
     */
    public void addServiceItem(ServiceItem l) throws TorqueException
    {
        getServiceItems().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collServiceItems
     */
    private Criteria lastServiceItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServiceItems() throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10));
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServiceItems(Criteria criteria) throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId() );
                        collServiceItems = ServiceItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                            if (!lastServiceItemsCriteria.equals(criteria))
                {
                    collServiceItems = ServiceItemPeer.doSelect(criteria);
                }
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Connection con) throws TorqueException
    {
              if (collServiceItems == null)
        {
            collServiceItems = getServiceItems(new Criteria(10), con);
        }
        return collServiceItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                         criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                         collServiceItems = ServiceItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                             if (!lastServiceItemsCriteria.equals(criteria))
                 {
                     collServiceItems = ServiceItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastServiceItemsCriteria = criteria;

         return collServiceItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ServiceItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getServiceItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItems == null)
        {
            if (isNew())
            {
               collServiceItems = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                              collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.PRODUCT_ID, getProductId());
                                    if (!lastServiceItemsCriteria.equals(criteria))
            {
                collServiceItems = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastServiceItemsCriteria = criteria;

        return collServiceItems;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collProductCmsSections
     */
    protected List collProductCmsSections;

    /**
     * Temporary storage of collProductCmsSections to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initProductCmsSections()
    {
        if (collProductCmsSections == null)
        {
            collProductCmsSections = new ArrayList();
        }
    }

    /**
     * Method called to associate a ProductCmsSection object to this object
     * through the ProductCmsSection foreign key attribute
     *
     * @param l ProductCmsSection
     * @throws TorqueException
     */
    public void addProductCmsSection(ProductCmsSection l) throws TorqueException
    {
        getProductCmsSections().add(l);
        l.setProduct((Product) this);
    }

    /**
     * The criteria used to select the current contents of collProductCmsSections
     */
    private Criteria lastProductCmsSectionsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProductCmsSections(new Criteria())
     *
     * @throws TorqueException
     */
    public List getProductCmsSections() throws TorqueException
    {
              if (collProductCmsSections == null)
        {
            collProductCmsSections = getProductCmsSections(new Criteria(10));
        }
        return collProductCmsSections;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ProductCmsSections from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getProductCmsSections(Criteria criteria) throws TorqueException
    {
              if (collProductCmsSections == null)
        {
            if (isNew())
            {
               collProductCmsSections = new ArrayList();
            }
            else
            {
                        criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId() );
                        collProductCmsSections = ProductCmsSectionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId());
                            if (!lastProductCmsSectionsCriteria.equals(criteria))
                {
                    collProductCmsSections = ProductCmsSectionPeer.doSelect(criteria);
                }
            }
        }
        lastProductCmsSectionsCriteria = criteria;

        return collProductCmsSections;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getProductCmsSections(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProductCmsSections(Connection con) throws TorqueException
    {
              if (collProductCmsSections == null)
        {
            collProductCmsSections = getProductCmsSections(new Criteria(10), con);
        }
        return collProductCmsSections;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product has previously
     * been saved, it will retrieve related ProductCmsSections from storage.
     * If this Product is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getProductCmsSections(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collProductCmsSections == null)
        {
            if (isNew())
            {
               collProductCmsSections = new ArrayList();
            }
            else
            {
                         criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId());
                         collProductCmsSections = ProductCmsSectionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId());
                             if (!lastProductCmsSectionsCriteria.equals(criteria))
                 {
                     collProductCmsSections = ProductCmsSectionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastProductCmsSectionsCriteria = criteria;

         return collProductCmsSections;
           }

                  
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Product is new, it will return
     * an empty collection; or if this Product has previously
     * been saved, it will retrieve related ProductCmsSections from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Product.
     */
    protected List getProductCmsSectionsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collProductCmsSections == null)
        {
            if (isNew())
            {
               collProductCmsSections = new ArrayList();
            }
            else
            {
                              criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId());
                              collProductCmsSections = ProductCmsSectionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ProductCmsSectionPeer.PRODUCT_ID, getProductId());
                                    if (!lastProductCmsSectionsCriteria.equals(criteria))
            {
                collProductCmsSections = ProductCmsSectionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastProductCmsSectionsCriteria = criteria;

        return collProductCmsSections;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ProductId");
              fieldNames.add("ProductCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("ProductType");
              fieldNames.add("ProductCatId");
              fieldNames.add("ProductDescription");
              fieldNames.add("ProductDisplay");
              fieldNames.add("BasePrice");
              fieldNames.add("UomId");
              fieldNames.add("WebUrl");
              fieldNames.add("ShowOnPricelist");
              fieldNames.add("VendorId");
              fieldNames.add("VendorsCode");
              fieldNames.add("EanUpcCode");
              fieldNames.add("Location");
              fieldNames.add("Custom1");
              fieldNames.add("Custom2");
              fieldNames.add("Custom3");
              fieldNames.add("Custom4");
              fieldNames.add("Custom5");
              fieldNames.add("Custom6");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ProductId"))
        {
                return new Integer(getProductId());
            }
          if (name.equals("ProductCode"))
        {
                return getProductCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("ProductType"))
        {
                return new Integer(getProductType());
            }
          if (name.equals("ProductCatId"))
        {
                return new Integer(getProductCatId());
            }
          if (name.equals("ProductDescription"))
        {
                return getProductDescription();
            }
          if (name.equals("ProductDisplay"))
        {
                return getProductDisplay();
            }
          if (name.equals("BasePrice"))
        {
                return new Double(getBasePrice());
            }
          if (name.equals("UomId"))
        {
                return new Integer(getUomId());
            }
          if (name.equals("WebUrl"))
        {
                return getWebUrl();
            }
          if (name.equals("ShowOnPricelist"))
        {
                return new Integer(getShowOnPricelist());
            }
          if (name.equals("VendorId"))
        {
                return new Integer(getVendorId());
            }
          if (name.equals("VendorsCode"))
        {
                return getVendorsCode();
            }
          if (name.equals("EanUpcCode"))
        {
                return getEanUpcCode();
            }
          if (name.equals("Location"))
        {
                return getLocation();
            }
          if (name.equals("Custom1"))
        {
                return getCustom1();
            }
          if (name.equals("Custom2"))
        {
                return getCustom2();
            }
          if (name.equals("Custom3"))
        {
                return getCustom3();
            }
          if (name.equals("Custom4"))
        {
                return getCustom4();
            }
          if (name.equals("Custom5"))
        {
                return getCustom5();
            }
          if (name.equals("Custom6"))
        {
                return getCustom6();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ProductPeer.PRODUCT_ID))
        {
                return new Integer(getProductId());
            }
          if (name.equals(ProductPeer.PRODUCT_CODE))
        {
                return getProductCode();
            }
          if (name.equals(ProductPeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(ProductPeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(ProductPeer.PRODUCT_TYPE))
        {
                return new Integer(getProductType());
            }
          if (name.equals(ProductPeer.PRODUCT_CAT_ID))
        {
                return new Integer(getProductCatId());
            }
          if (name.equals(ProductPeer.PRODUCT_DESCRIPTION))
        {
                return getProductDescription();
            }
          if (name.equals(ProductPeer.PRODUCT_DISPLAY))
        {
                return getProductDisplay();
            }
          if (name.equals(ProductPeer.BASE_PRICE))
        {
                return new Double(getBasePrice());
            }
          if (name.equals(ProductPeer.UOM_ID))
        {
                return new Integer(getUomId());
            }
          if (name.equals(ProductPeer.WEB_URL))
        {
                return getWebUrl();
            }
          if (name.equals(ProductPeer.SHOW_ON_PRICELIST))
        {
                return new Integer(getShowOnPricelist());
            }
          if (name.equals(ProductPeer.VENDOR_ID))
        {
                return new Integer(getVendorId());
            }
          if (name.equals(ProductPeer.VENDORS_CODE))
        {
                return getVendorsCode();
            }
          if (name.equals(ProductPeer.EAN_UPC_CODE))
        {
                return getEanUpcCode();
            }
          if (name.equals(ProductPeer.LOCATION))
        {
                return getLocation();
            }
          if (name.equals(ProductPeer.CUSTOM_1))
        {
                return getCustom1();
            }
          if (name.equals(ProductPeer.CUSTOM_2))
        {
                return getCustom2();
            }
          if (name.equals(ProductPeer.CUSTOM_3))
        {
                return getCustom3();
            }
          if (name.equals(ProductPeer.CUSTOM_4))
        {
                return getCustom4();
            }
          if (name.equals(ProductPeer.CUSTOM_5))
        {
                return getCustom5();
            }
          if (name.equals(ProductPeer.CUSTOM_6))
        {
                return getCustom6();
            }
          if (name.equals(ProductPeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(ProductPeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(ProductPeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(ProductPeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(ProductPeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getProductId());
            }
              if (pos == 1)
        {
                return getProductCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return new Integer(getProductType());
            }
              if (pos == 5)
        {
                return new Integer(getProductCatId());
            }
              if (pos == 6)
        {
                return getProductDescription();
            }
              if (pos == 7)
        {
                return getProductDisplay();
            }
              if (pos == 8)
        {
                return new Double(getBasePrice());
            }
              if (pos == 9)
        {
                return new Integer(getUomId());
            }
              if (pos == 10)
        {
                return getWebUrl();
            }
              if (pos == 11)
        {
                return new Integer(getShowOnPricelist());
            }
              if (pos == 12)
        {
                return new Integer(getVendorId());
            }
              if (pos == 13)
        {
                return getVendorsCode();
            }
              if (pos == 14)
        {
                return getEanUpcCode();
            }
              if (pos == 15)
        {
                return getLocation();
            }
              if (pos == 16)
        {
                return getCustom1();
            }
              if (pos == 17)
        {
                return getCustom2();
            }
              if (pos == 18)
        {
                return getCustom3();
            }
              if (pos == 19)
        {
                return getCustom4();
            }
              if (pos == 20)
        {
                return getCustom5();
            }
              if (pos == 21)
        {
                return getCustom6();
            }
              if (pos == 22)
        {
                return getNotes();
            }
              if (pos == 23)
        {
                return getCreated();
            }
              if (pos == 24)
        {
                return getModified();
            }
              if (pos == 25)
        {
                return getCreatedBy();
            }
              if (pos == 26)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ProductPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ProductPeer.doInsert((Product) this, con);
                    setNew(false);
                }
                else
                {
                    ProductPeer.doUpdate((Product) this, con);
                }
            }

                                      
                
                    if (collPrintSubscriptions != null)
            {
                for (int i = 0; i < collPrintSubscriptions.size(); i++)
                {
                    ((PrintSubscription) collPrintSubscriptions.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOnlineSubscriptions != null)
            {
                for (int i = 0; i < collOnlineSubscriptions.size(); i++)
                {
                    ((OnlineSubscription) collOnlineSubscriptions.get(i)).save(con);
                }
            }
                                                  
                
                    if (collInboxEvents != null)
            {
                for (int i = 0; i < collInboxEvents.size(); i++)
                {
                    ((InboxEvent) collInboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOutboxEvents != null)
            {
                for (int i = 0; i < collOutboxEvents.size(); i++)
                {
                    ((OutboxEvent) collOutboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collNewsSubscriptions != null)
            {
                for (int i = 0; i < collNewsSubscriptions.size(); i++)
                {
                    ((NewsSubscription) collNewsSubscriptions.get(i)).save(con);
                }
            }
                                                            
                
                    if (collNewslettersRelatedByProductId != null)
            {
                for (int i = 0; i < collNewslettersRelatedByProductId.size(); i++)
                {
                    ((Newsletter) collNewslettersRelatedByProductId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collNewslettersRelatedByRelProductId != null)
            {
                for (int i = 0; i < collNewslettersRelatedByRelProductId.size(); i++)
                {
                    ((Newsletter) collNewslettersRelatedByRelProductId.get(i)).save(con);
                }
            }
                                                  
                
                    if (collTasks != null)
            {
                for (int i = 0; i < collTasks.size(); i++)
                {
                    ((Task) collTasks.get(i)).save(con);
                }
            }
                                                  
                
                    if (collSorderItems != null)
            {
                for (int i = 0; i < collSorderItems.size(); i++)
                {
                    ((SorderItem) collSorderItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPaymentItems != null)
            {
                for (int i = 0; i < collPaymentItems.size(); i++)
                {
                    ((PaymentItem) collPaymentItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collShipmentItems != null)
            {
                for (int i = 0; i < collShipmentItems.size(); i++)
                {
                    ((ShipmentItem) collShipmentItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collServiceItems != null)
            {
                for (int i = 0; i < collServiceItems.size(); i++)
                {
                    ((ServiceItem) collServiceItems.get(i)).save(con);
                }
            }
                                                  
                
                    if (collProductCmsSections != null)
            {
                for (int i = 0; i < collProductCmsSections.size(); i++)
                {
                    ((ProductCmsSection) collProductCmsSections.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key productId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setProductId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setProductId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getProductId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Product copy() throws TorqueException
    {
        return copyInto(new Product());
    }
  
    protected Product copyInto(Product copyObj) throws TorqueException
    {
          copyObj.setProductId(productId);
          copyObj.setProductCode(productCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setProductType(productType);
          copyObj.setProductCatId(productCatId);
          copyObj.setProductDescription(productDescription);
          copyObj.setProductDisplay(productDisplay);
          copyObj.setBasePrice(basePrice);
          copyObj.setUomId(uomId);
          copyObj.setWebUrl(webUrl);
          copyObj.setShowOnPricelist(showOnPricelist);
          copyObj.setVendorId(vendorId);
          copyObj.setVendorsCode(vendorsCode);
          copyObj.setEanUpcCode(eanUpcCode);
          copyObj.setLocation(location);
          copyObj.setCustom1(custom1);
          copyObj.setCustom2(custom2);
          copyObj.setCustom3(custom3);
          copyObj.setCustom4(custom4);
          copyObj.setCustom5(custom5);
          copyObj.setCustom6(custom6);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setProductId( 0);
                                                                                                                                                                        
                                      
                            
        List v = getPrintSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            PrintSubscription obj = (PrintSubscription) v.get(i);
            copyObj.addPrintSubscription(obj.copy());
        }
                                                  
                            
        v = getOnlineSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            OnlineSubscription obj = (OnlineSubscription) v.get(i);
            copyObj.addOnlineSubscription(obj.copy());
        }
                                                  
                            
        v = getInboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            InboxEvent obj = (InboxEvent) v.get(i);
            copyObj.addInboxEvent(obj.copy());
        }
                                                  
                            
        v = getOutboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            OutboxEvent obj = (OutboxEvent) v.get(i);
            copyObj.addOutboxEvent(obj.copy());
        }
                                                  
                            
        v = getNewsSubscriptions();
        for (int i = 0; i < v.size(); i++)
        {
            NewsSubscription obj = (NewsSubscription) v.get(i);
            copyObj.addNewsSubscription(obj.copy());
        }
                                                            
                            
        v = getNewslettersRelatedByProductId();
        for (int i = 0; i < v.size(); i++)
        {
            Newsletter obj = (Newsletter) v.get(i);
            copyObj.addNewsletterRelatedByProductId(obj.copy());
        }
                                                            
                            
        v = getNewslettersRelatedByRelProductId();
        for (int i = 0; i < v.size(); i++)
        {
            Newsletter obj = (Newsletter) v.get(i);
            copyObj.addNewsletterRelatedByRelProductId(obj.copy());
        }
                                                  
                            
        v = getTasks();
        for (int i = 0; i < v.size(); i++)
        {
            Task obj = (Task) v.get(i);
            copyObj.addTask(obj.copy());
        }
                                                  
                            
        v = getSorderItems();
        for (int i = 0; i < v.size(); i++)
        {
            SorderItem obj = (SorderItem) v.get(i);
            copyObj.addSorderItem(obj.copy());
        }
                                                  
                            
        v = getPaymentItems();
        for (int i = 0; i < v.size(); i++)
        {
            PaymentItem obj = (PaymentItem) v.get(i);
            copyObj.addPaymentItem(obj.copy());
        }
                                                  
                            
        v = getShipmentItems();
        for (int i = 0; i < v.size(); i++)
        {
            ShipmentItem obj = (ShipmentItem) v.get(i);
            copyObj.addShipmentItem(obj.copy());
        }
                                                  
                            
        v = getServiceItems();
        for (int i = 0; i < v.size(); i++)
        {
            ServiceItem obj = (ServiceItem) v.get(i);
            copyObj.addServiceItem(obj.copy());
        }
                                                  
                            
        v = getProductCmsSections();
        for (int i = 0; i < v.size(); i++)
        {
            ProductCmsSection obj = (ProductCmsSection) v.get(i);
            copyObj.addProductCmsSection(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProductPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Product:\n");
        str.append("ProductId = ")
               .append(getProductId())
             .append("\n");
        str.append("ProductCode = ")
               .append(getProductCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("ProductType = ")
               .append(getProductType())
             .append("\n");
        str.append("ProductCatId = ")
               .append(getProductCatId())
             .append("\n");
        str.append("ProductDescription = ")
               .append(getProductDescription())
             .append("\n");
        str.append("ProductDisplay = ")
               .append(getProductDisplay())
             .append("\n");
        str.append("BasePrice = ")
               .append(getBasePrice())
             .append("\n");
        str.append("UomId = ")
               .append(getUomId())
             .append("\n");
        str.append("WebUrl = ")
               .append(getWebUrl())
             .append("\n");
        str.append("ShowOnPricelist = ")
               .append(getShowOnPricelist())
             .append("\n");
        str.append("VendorId = ")
               .append(getVendorId())
             .append("\n");
        str.append("VendorsCode = ")
               .append(getVendorsCode())
             .append("\n");
        str.append("EanUpcCode = ")
               .append(getEanUpcCode())
             .append("\n");
        str.append("Location = ")
               .append(getLocation())
             .append("\n");
        str.append("Custom1 = ")
               .append(getCustom1())
             .append("\n");
        str.append("Custom2 = ")
               .append(getCustom2())
             .append("\n");
        str.append("Custom3 = ")
               .append(getCustom3())
             .append("\n");
        str.append("Custom4 = ")
               .append(getCustom4())
             .append("\n");
        str.append("Custom5 = ")
               .append(getCustom5())
             .append("\n");
        str.append("Custom6 = ")
               .append(getCustom6())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
