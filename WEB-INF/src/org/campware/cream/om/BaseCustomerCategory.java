package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to CustomerCategory
 */
public abstract class BaseCustomerCategory extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final CustomerCategoryPeer peer =
        new CustomerCategoryPeer();

        
    /** The value for the customerCatId field */
    private int customerCatId;
      
    /** The value for the customerCatName field */
    private String customerCatName;
  
    
    /**
     * Get the CustomerCatId
     *
     * @return int
     */
    public int getCustomerCatId()
    {
        return customerCatId;
    }

                                              
    /**
     * Set the value of CustomerCatId
     *
     * @param v new value
     */
    public void setCustomerCatId(int v) throws TorqueException
    {
    
                  if (this.customerCatId != v)
              {
            this.customerCatId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Customer
        if (collCustomers != null)
        {
            for (int i = 0; i < collCustomers.size(); i++)
            {
                ((Customer) collCustomers.get(i))
                    .setCustomerCatId(v);
            }
        }
                                                    
                  // update associated Newsletter
        if (collNewsletters != null)
        {
            for (int i = 0; i < collNewsletters.size(); i++)
            {
                ((Newsletter) collNewsletters.get(i))
                    .setCustomerCatId(v);
            }
        }
                                }
  
    /**
     * Get the CustomerCatName
     *
     * @return String
     */
    public String getCustomerCatName()
    {
        return customerCatName;
    }

                        
    /**
     * Set the value of CustomerCatName
     *
     * @param v new value
     */
    public void setCustomerCatName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.customerCatName, v))
              {
            this.customerCatName = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
          /**
     * Collection to store aggregation of collCustomers
     */
    protected List collCustomers;

    /**
     * Temporary storage of collCustomers to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initCustomers()
    {
        if (collCustomers == null)
        {
            collCustomers = new ArrayList();
        }
    }

    /**
     * Method called to associate a Customer object to this object
     * through the Customer foreign key attribute
     *
     * @param l Customer
     * @throws TorqueException
     */
    public void addCustomer(Customer l) throws TorqueException
    {
        getCustomers().add(l);
        l.setCustomerCategory((CustomerCategory) this);
    }

    /**
     * The criteria used to select the current contents of collCustomers
     */
    private Criteria lastCustomersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getCustomers(new Criteria())
     *
     * @throws TorqueException
     */
    public List getCustomers() throws TorqueException
    {
              if (collCustomers == null)
        {
            collCustomers = getCustomers(new Criteria(10));
        }
        return collCustomers;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     * If this CustomerCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getCustomers(Criteria criteria) throws TorqueException
    {
              if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId() );
                        collCustomers = CustomerPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                            if (!lastCustomersCriteria.equals(criteria))
                {
                    collCustomers = CustomerPeer.doSelect(criteria);
                }
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getCustomers(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getCustomers(Connection con) throws TorqueException
    {
              if (collCustomers == null)
        {
            collCustomers = getCustomers(new Criteria(10), con);
        }
        return collCustomers;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     * If this CustomerCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getCustomers(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                         criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                         collCustomers = CustomerPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                             if (!lastCustomersCriteria.equals(criteria))
                 {
                     collCustomers = CustomerPeer.doSelect(criteria, con);
                 }
             }
         }
         lastCustomersCriteria = criteria;

         return collCustomers;
           }

                                                                                          
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinIndustry(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinIndustry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinIndustry(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinLeadSource(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinLeadSource(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinLeadSource(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinCountryRelatedByCountryId(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinCountryRelatedByCountryId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinCountryRelatedByCountryId(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinRegionRelatedByRegionId(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinRegionRelatedByRegionId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinRegionRelatedByRegionId(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinCountryRelatedByShiptoCountryId(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinCountryRelatedByShiptoCountryId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinCountryRelatedByShiptoCountryId(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinRegionRelatedByShiptoRegionId(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinRegionRelatedByShiptoRegionId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinRegionRelatedByShiptoRegionId(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinLanguage(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinLanguage(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinLanguage(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinEducationCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinEducationCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinEducationCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinHouseholdCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinHouseholdCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinHouseholdCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinAgeCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinAgeCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinAgeCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinRevenueCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinRevenueCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinRevenueCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Customers from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getCustomersJoinEmployeeNoCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collCustomers == null)
        {
            if (isNew())
            {
               collCustomers = new ArrayList();
            }
            else
            {
                              criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collCustomers = CustomerPeer.doSelectJoinEmployeeNoCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(CustomerPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastCustomersCriteria.equals(criteria))
            {
                collCustomers = CustomerPeer.doSelectJoinEmployeeNoCategory(criteria);
            }
        }
        lastCustomersCriteria = criteria;

        return collCustomers;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collNewsletters
     */
    protected List collNewsletters;

    /**
     * Temporary storage of collNewsletters to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initNewsletters()
    {
        if (collNewsletters == null)
        {
            collNewsletters = new ArrayList();
        }
    }

    /**
     * Method called to associate a Newsletter object to this object
     * through the Newsletter foreign key attribute
     *
     * @param l Newsletter
     * @throws TorqueException
     */
    public void addNewsletter(Newsletter l) throws TorqueException
    {
        getNewsletters().add(l);
        l.setCustomerCategory((CustomerCategory) this);
    }

    /**
     * The criteria used to select the current contents of collNewsletters
     */
    private Criteria lastNewslettersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsletters(new Criteria())
     *
     * @throws TorqueException
     */
    public List getNewsletters() throws TorqueException
    {
              if (collNewsletters == null)
        {
            collNewsletters = getNewsletters(new Criteria(10));
        }
        return collNewsletters;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     * If this CustomerCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getNewsletters(Criteria criteria) throws TorqueException
    {
              if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId() );
                        collNewsletters = NewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                            if (!lastNewslettersCriteria.equals(criteria))
                {
                    collNewsletters = NewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getNewsletters(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsletters(Connection con) throws TorqueException
    {
              if (collNewsletters == null)
        {
            collNewsletters = getNewsletters(new Criteria(10), con);
        }
        return collNewsletters;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     * If this CustomerCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getNewsletters(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                         criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                         collNewsletters = NewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                             if (!lastNewslettersCriteria.equals(criteria))
                 {
                     collNewsletters = NewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastNewslettersCriteria = criteria;

         return collNewsletters;
           }

                                                            
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinCustomerCategory(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinCustomerCategory(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinProjectRelatedByProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinProjectRelatedByProjectId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinProductRelatedByProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinProductRelatedByProductId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinProjectRelatedByRelProjectId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinProjectRelatedByRelProjectId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinProductRelatedByRelProductId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinProductRelatedByRelProductId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinCountry(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinCountry(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinLanguageRelatedByCustLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinLanguageRelatedByCustLanguageId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this CustomerCategory is new, it will return
     * an empty collection; or if this CustomerCategory has previously
     * been saved, it will retrieve related Newsletters from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in CustomerCategory.
     */
    protected List getNewslettersJoinLanguageRelatedByLanguageId(Criteria criteria)
        throws TorqueException
    {
                    if (collNewsletters == null)
        {
            if (isNew())
            {
               collNewsletters = new ArrayList();
            }
            else
            {
                              criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                              collNewsletters = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(NewsletterPeer.CUSTOMER_CAT_ID, getCustomerCatId());
                                    if (!lastNewslettersCriteria.equals(criteria))
            {
                collNewsletters = NewsletterPeer.doSelectJoinLanguageRelatedByLanguageId(criteria);
            }
        }
        lastNewslettersCriteria = criteria;

        return collNewsletters;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("CustomerCatId");
              fieldNames.add("CustomerCatName");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("CustomerCatId"))
        {
                return new Integer(getCustomerCatId());
            }
          if (name.equals("CustomerCatName"))
        {
                return getCustomerCatName();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CustomerCategoryPeer.CUSTOMER_CAT_ID))
        {
                return new Integer(getCustomerCatId());
            }
          if (name.equals(CustomerCategoryPeer.CUSTOMER_CAT_NAME))
        {
                return getCustomerCatName();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getCustomerCatId());
            }
              if (pos == 1)
        {
                return getCustomerCatName();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CustomerCategoryPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CustomerCategoryPeer.doInsert((CustomerCategory) this, con);
                    setNew(false);
                }
                else
                {
                    CustomerCategoryPeer.doUpdate((CustomerCategory) this, con);
                }
            }

                                      
                
                    if (collCustomers != null)
            {
                for (int i = 0; i < collCustomers.size(); i++)
                {
                    ((Customer) collCustomers.get(i)).save(con);
                }
            }
                                                  
                
                    if (collNewsletters != null)
            {
                for (int i = 0; i < collNewsletters.size(); i++)
                {
                    ((Newsletter) collNewsletters.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key customerCatId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setCustomerCatId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setCustomerCatId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getCustomerCatId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public CustomerCategory copy() throws TorqueException
    {
        return copyInto(new CustomerCategory());
    }
  
    protected CustomerCategory copyInto(CustomerCategory copyObj) throws TorqueException
    {
          copyObj.setCustomerCatId(customerCatId);
          copyObj.setCustomerCatName(customerCatName);
  
                            copyObj.setCustomerCatId( 0);
                  
                                      
                            
        List v = getCustomers();
        for (int i = 0; i < v.size(); i++)
        {
            Customer obj = (Customer) v.get(i);
            copyObj.addCustomer(obj.copy());
        }
                                                  
                            
        v = getNewsletters();
        for (int i = 0; i < v.size(); i++)
        {
            Newsletter obj = (Newsletter) v.get(i);
            copyObj.addNewsletter(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CustomerCategoryPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("CustomerCategory:\n");
        str.append("CustomerCatId = ")
               .append(getCustomerCatId())
             .append("\n");
        str.append("CustomerCatName = ")
               .append(getCustomerCatName())
             .append("\n");
        return(str.toString());
    }
}
