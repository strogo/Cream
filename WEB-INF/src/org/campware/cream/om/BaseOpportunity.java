package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Opportunity
 */
public abstract class BaseOpportunity extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final OpportunityPeer peer =
        new OpportunityPeer();

        
    /** The value for the opportunityId field */
    private int opportunityId;
                                                
    /** The value for the opportunityCode field */
    private String opportunityCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
                                          
    /** The value for the opportunityType field */
    private int opportunityType = 10;
      
    /** The value for the opportunityName field */
    private String opportunityName;
                                          
    /** The value for the opportunityCatId field */
    private int opportunityCatId = 1000;
                                          
    /** The value for the leadSourceId field */
    private int leadSourceId = 1000;
      
    /** The value for the issuedDate field */
    private Date issuedDate;
      
    /** The value for the expectedDate field */
    private Date expectedDate;
      
    /** The value for the closedDate field */
    private Date closedDate;
                                          
    /** The value for the customerId field */
    private int customerId = 1000;
                                          
    /** The value for the projectId field */
    private int projectId = 1000;
                                          
    /** The value for the currencyId field */
    private int currencyId = 1000;
                                  
    /** The value for the currencyAmount field */
    private BigDecimal currencyAmount= new BigDecimal(0);
                                          
    /** The value for the salesStage field */
    private int salesStage = 10;
                                          
    /** The value for the probability field */
    private int probability = 0;
                                                
    /** The value for the subject field */
    private String subject = "---";
      
    /** The value for the nextSteps field */
    private String nextSteps;
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the OpportunityId
     *
     * @return int
     */
    public int getOpportunityId()
    {
        return opportunityId;
    }

                                              
    /**
     * Set the value of OpportunityId
     *
     * @param v new value
     */
    public void setOpportunityId(int v) throws TorqueException
    {
    
                  if (this.opportunityId != v)
              {
            this.opportunityId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Sorder
        if (collSorders != null)
        {
            for (int i = 0; i < collSorders.size(); i++)
            {
                ((Sorder) collSorders.get(i))
                    .setOpportunityId(v);
            }
        }
                                }
  
    /**
     * Get the OpportunityCode
     *
     * @return String
     */
    public String getOpportunityCode()
    {
        return opportunityCode;
    }

                        
    /**
     * Set the value of OpportunityCode
     *
     * @param v new value
     */
    public void setOpportunityCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.opportunityCode, v))
              {
            this.opportunityCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the OpportunityType
     *
     * @return int
     */
    public int getOpportunityType()
    {
        return opportunityType;
    }

                        
    /**
     * Set the value of OpportunityType
     *
     * @param v new value
     */
    public void setOpportunityType(int v) 
    {
    
                  if (this.opportunityType != v)
              {
            this.opportunityType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the OpportunityName
     *
     * @return String
     */
    public String getOpportunityName()
    {
        return opportunityName;
    }

                        
    /**
     * Set the value of OpportunityName
     *
     * @param v new value
     */
    public void setOpportunityName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.opportunityName, v))
              {
            this.opportunityName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the OpportunityCatId
     *
     * @return int
     */
    public int getOpportunityCatId()
    {
        return opportunityCatId;
    }

                              
    /**
     * Set the value of OpportunityCatId
     *
     * @param v new value
     */
    public void setOpportunityCatId(int v) throws TorqueException
    {
    
                  if (this.opportunityCatId != v)
              {
            this.opportunityCatId = v;
            setModified(true);
        }
    
                          
                if (aOpportunityCategory != null && !(aOpportunityCategory.getOpportunityCatId() == v))
                {
            aOpportunityCategory = null;
        }
      
              }
  
    /**
     * Get the LeadSourceId
     *
     * @return int
     */
    public int getLeadSourceId()
    {
        return leadSourceId;
    }

                              
    /**
     * Set the value of LeadSourceId
     *
     * @param v new value
     */
    public void setLeadSourceId(int v) throws TorqueException
    {
    
                  if (this.leadSourceId != v)
              {
            this.leadSourceId = v;
            setModified(true);
        }
    
                          
                if (aLeadSource != null && !(aLeadSource.getLeadSourceId() == v))
                {
            aLeadSource = null;
        }
      
              }
  
    /**
     * Get the IssuedDate
     *
     * @return Date
     */
    public Date getIssuedDate()
    {
        return issuedDate;
    }

                        
    /**
     * Set the value of IssuedDate
     *
     * @param v new value
     */
    public void setIssuedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.issuedDate, v))
              {
            this.issuedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ExpectedDate
     *
     * @return Date
     */
    public Date getExpectedDate()
    {
        return expectedDate;
    }

                        
    /**
     * Set the value of ExpectedDate
     *
     * @param v new value
     */
    public void setExpectedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.expectedDate, v))
              {
            this.expectedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ClosedDate
     *
     * @return Date
     */
    public Date getClosedDate()
    {
        return closedDate;
    }

                        
    /**
     * Set the value of ClosedDate
     *
     * @param v new value
     */
    public void setClosedDate(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.closedDate, v))
              {
            this.closedDate = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerId
     *
     * @return int
     */
    public int getCustomerId()
    {
        return customerId;
    }

                              
    /**
     * Set the value of CustomerId
     *
     * @param v new value
     */
    public void setCustomerId(int v) throws TorqueException
    {
    
                  if (this.customerId != v)
              {
            this.customerId = v;
            setModified(true);
        }
    
                          
                if (aCustomer != null && !(aCustomer.getCustomerId() == v))
                {
            aCustomer = null;
        }
      
              }
  
    /**
     * Get the ProjectId
     *
     * @return int
     */
    public int getProjectId()
    {
        return projectId;
    }

                              
    /**
     * Set the value of ProjectId
     *
     * @param v new value
     */
    public void setProjectId(int v) throws TorqueException
    {
    
                  if (this.projectId != v)
              {
            this.projectId = v;
            setModified(true);
        }
    
                          
                if (aProject != null && !(aProject.getProjectId() == v))
                {
            aProject = null;
        }
      
              }
  
    /**
     * Get the CurrencyId
     *
     * @return int
     */
    public int getCurrencyId()
    {
        return currencyId;
    }

                              
    /**
     * Set the value of CurrencyId
     *
     * @param v new value
     */
    public void setCurrencyId(int v) throws TorqueException
    {
    
                  if (this.currencyId != v)
              {
            this.currencyId = v;
            setModified(true);
        }
    
                          
                if (aCurrency != null && !(aCurrency.getCurrencyId() == v))
                {
            aCurrency = null;
        }
      
              }
  
    /**
     * Get the CurrencyAmount
     *
     * @return BigDecimal
     */
    public BigDecimal getCurrencyAmount()
    {
        return currencyAmount;
    }

                        
    /**
     * Set the value of CurrencyAmount
     *
     * @param v new value
     */
    public void setCurrencyAmount(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.currencyAmount, v))
              {
            this.currencyAmount = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SalesStage
     *
     * @return int
     */
    public int getSalesStage()
    {
        return salesStage;
    }

                        
    /**
     * Set the value of SalesStage
     *
     * @param v new value
     */
    public void setSalesStage(int v) 
    {
    
                  if (this.salesStage != v)
              {
            this.salesStage = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Probability
     *
     * @return int
     */
    public int getProbability()
    {
        return probability;
    }

                        
    /**
     * Set the value of Probability
     *
     * @param v new value
     */
    public void setProbability(int v) 
    {
    
                  if (this.probability != v)
              {
            this.probability = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Subject
     *
     * @return String
     */
    public String getSubject()
    {
        return subject;
    }

                        
    /**
     * Set the value of Subject
     *
     * @param v new value
     */
    public void setSubject(String v) 
    {
    
                  if (!ObjectUtils.equals(this.subject, v))
              {
            this.subject = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the NextSteps
     *
     * @return String
     */
    public String getNextSteps()
    {
        return nextSteps;
    }

                        
    /**
     * Set the value of NextSteps
     *
     * @param v new value
     */
    public void setNextSteps(String v) 
    {
    
                  if (!ObjectUtils.equals(this.nextSteps, v))
              {
            this.nextSteps = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Customer aCustomer;

    /**
     * Declares an association between this object and a Customer object
     *
     * @param v Customer
     * @throws TorqueException
     */
    public void setCustomer(Customer v) throws TorqueException
    {
            if (v == null)
        {
                          setCustomerId( 1000);
              }
        else
        {
            setCustomerId(v.getCustomerId());
        }
            aCustomer = v;
    }

                                            
    /**
     * Get the associated Customer object
     *
     * @return the associated Customer object
     * @throws TorqueException
     */
    public Customer getCustomer() throws TorqueException
    {
        if (aCustomer == null && (this.customerId != 0))
        {
                          aCustomer = CustomerPeer.retrieveByPK(SimpleKey.keyFor(this.customerId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Customer obj = CustomerPeer.retrieveByPK(this.customerId);
               obj.addOpportunitys(this);
            */
        }
        return aCustomer;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCustomerKey(ObjectKey key) throws TorqueException
    {
      
                        setCustomerId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
            if (v == null)
        {
                          setProjectId( 1000);
              }
        else
        {
            setProjectId(v.getProjectId());
        }
            aProject = v;
    }

                                            
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.projectId != 0))
        {
                          aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.projectId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.projectId);
               obj.addOpportunitys(this);
            */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
      
                        setProjectId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Currency aCurrency;

    /**
     * Declares an association between this object and a Currency object
     *
     * @param v Currency
     * @throws TorqueException
     */
    public void setCurrency(Currency v) throws TorqueException
    {
            if (v == null)
        {
                          setCurrencyId( 1000);
              }
        else
        {
            setCurrencyId(v.getCurrencyId());
        }
            aCurrency = v;
    }

                                            
    /**
     * Get the associated Currency object
     *
     * @return the associated Currency object
     * @throws TorqueException
     */
    public Currency getCurrency() throws TorqueException
    {
        if (aCurrency == null && (this.currencyId != 0))
        {
                          aCurrency = CurrencyPeer.retrieveByPK(SimpleKey.keyFor(this.currencyId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Currency obj = CurrencyPeer.retrieveByPK(this.currencyId);
               obj.addOpportunitys(this);
            */
        }
        return aCurrency;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCurrencyKey(ObjectKey key) throws TorqueException
    {
      
                        setCurrencyId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private LeadSource aLeadSource;

    /**
     * Declares an association between this object and a LeadSource object
     *
     * @param v LeadSource
     * @throws TorqueException
     */
    public void setLeadSource(LeadSource v) throws TorqueException
    {
            if (v == null)
        {
                          setLeadSourceId( 1000);
              }
        else
        {
            setLeadSourceId(v.getLeadSourceId());
        }
            aLeadSource = v;
    }

                                            
    /**
     * Get the associated LeadSource object
     *
     * @return the associated LeadSource object
     * @throws TorqueException
     */
    public LeadSource getLeadSource() throws TorqueException
    {
        if (aLeadSource == null && (this.leadSourceId != 0))
        {
                          aLeadSource = LeadSourcePeer.retrieveByPK(SimpleKey.keyFor(this.leadSourceId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               LeadSource obj = LeadSourcePeer.retrieveByPK(this.leadSourceId);
               obj.addOpportunitys(this);
            */
        }
        return aLeadSource;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLeadSourceKey(ObjectKey key) throws TorqueException
    {
      
                        setLeadSourceId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private OpportunityCategory aOpportunityCategory;

    /**
     * Declares an association between this object and a OpportunityCategory object
     *
     * @param v OpportunityCategory
     * @throws TorqueException
     */
    public void setOpportunityCategory(OpportunityCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setOpportunityCatId( 1000);
              }
        else
        {
            setOpportunityCatId(v.getOpportunityCatId());
        }
            aOpportunityCategory = v;
    }

                                            
    /**
     * Get the associated OpportunityCategory object
     *
     * @return the associated OpportunityCategory object
     * @throws TorqueException
     */
    public OpportunityCategory getOpportunityCategory() throws TorqueException
    {
        if (aOpportunityCategory == null && (this.opportunityCatId != 0))
        {
                          aOpportunityCategory = OpportunityCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.opportunityCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               OpportunityCategory obj = OpportunityCategoryPeer.retrieveByPK(this.opportunityCatId);
               obj.addOpportunitys(this);
            */
        }
        return aOpportunityCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setOpportunityCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setOpportunityCatId(((NumberKey) key).intValue());
                  }
       
                                
            
          /**
     * Collection to store aggregation of collSorders
     */
    protected List collSorders;

    /**
     * Temporary storage of collSorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorders()
    {
        if (collSorders == null)
        {
            collSorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorder(Sorder l) throws TorqueException
    {
        getSorders().add(l);
        l.setOpportunity((Opportunity) this);
    }

    /**
     * The criteria used to select the current contents of collSorders
     */
    private Criteria lastSordersCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorders() throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10));
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Opportunity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorders(Criteria criteria) throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId() );
                        collSorders = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                            if (!lastSordersCriteria.equals(criteria))
                {
                    collSorders = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Connection con) throws TorqueException
    {
              if (collSorders == null)
        {
            collSorders = getSorders(new Criteria(10), con);
        }
        return collSorders;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     * If this Opportunity is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorders(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                         collSorders = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                             if (!lastSordersCriteria.equals(criteria))
                 {
                     collSorders = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersCriteria = criteria;

         return collSorders;
           }

                                                
              
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                            
                                                                          
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinOpportunity(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinOpportunity(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Opportunity is new, it will return
     * an empty collection; or if this Opportunity has previously
     * been saved, it will retrieve related Sorders from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Opportunity.
     */
    protected List getSordersJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorders == null)
        {
            if (isNew())
            {
               collSorders = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                              collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.OPPORTUNITY_ID, getOpportunityId());
                                    if (!lastSordersCriteria.equals(criteria))
            {
                collSorders = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersCriteria = criteria;

        return collSorders;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("OpportunityId");
              fieldNames.add("OpportunityCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("OpportunityType");
              fieldNames.add("OpportunityName");
              fieldNames.add("OpportunityCatId");
              fieldNames.add("LeadSourceId");
              fieldNames.add("IssuedDate");
              fieldNames.add("ExpectedDate");
              fieldNames.add("ClosedDate");
              fieldNames.add("CustomerId");
              fieldNames.add("ProjectId");
              fieldNames.add("CurrencyId");
              fieldNames.add("CurrencyAmount");
              fieldNames.add("SalesStage");
              fieldNames.add("Probability");
              fieldNames.add("Subject");
              fieldNames.add("NextSteps");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("OpportunityId"))
        {
                return new Integer(getOpportunityId());
            }
          if (name.equals("OpportunityCode"))
        {
                return getOpportunityCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("OpportunityType"))
        {
                return new Integer(getOpportunityType());
            }
          if (name.equals("OpportunityName"))
        {
                return getOpportunityName();
            }
          if (name.equals("OpportunityCatId"))
        {
                return new Integer(getOpportunityCatId());
            }
          if (name.equals("LeadSourceId"))
        {
                return new Integer(getLeadSourceId());
            }
          if (name.equals("IssuedDate"))
        {
                return getIssuedDate();
            }
          if (name.equals("ExpectedDate"))
        {
                return getExpectedDate();
            }
          if (name.equals("ClosedDate"))
        {
                return getClosedDate();
            }
          if (name.equals("CustomerId"))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals("ProjectId"))
        {
                return new Integer(getProjectId());
            }
          if (name.equals("CurrencyId"))
        {
                return new Integer(getCurrencyId());
            }
          if (name.equals("CurrencyAmount"))
        {
                return getCurrencyAmount();
            }
          if (name.equals("SalesStage"))
        {
                return new Integer(getSalesStage());
            }
          if (name.equals("Probability"))
        {
                return new Integer(getProbability());
            }
          if (name.equals("Subject"))
        {
                return getSubject();
            }
          if (name.equals("NextSteps"))
        {
                return getNextSteps();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(OpportunityPeer.OPPORTUNITY_ID))
        {
                return new Integer(getOpportunityId());
            }
          if (name.equals(OpportunityPeer.OPPORTUNITY_CODE))
        {
                return getOpportunityCode();
            }
          if (name.equals(OpportunityPeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(OpportunityPeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(OpportunityPeer.OPPORTUNITY_TYPE))
        {
                return new Integer(getOpportunityType());
            }
          if (name.equals(OpportunityPeer.OPPORTUNITY_NAME))
        {
                return getOpportunityName();
            }
          if (name.equals(OpportunityPeer.OPPORTUNITY_CAT_ID))
        {
                return new Integer(getOpportunityCatId());
            }
          if (name.equals(OpportunityPeer.LEAD_SOURCE_ID))
        {
                return new Integer(getLeadSourceId());
            }
          if (name.equals(OpportunityPeer.ISSUED_DATE))
        {
                return getIssuedDate();
            }
          if (name.equals(OpportunityPeer.EXPECTED_DATE))
        {
                return getExpectedDate();
            }
          if (name.equals(OpportunityPeer.CLOSED_DATE))
        {
                return getClosedDate();
            }
          if (name.equals(OpportunityPeer.CUSTOMER_ID))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals(OpportunityPeer.PROJECT_ID))
        {
                return new Integer(getProjectId());
            }
          if (name.equals(OpportunityPeer.CURRENCY_ID))
        {
                return new Integer(getCurrencyId());
            }
          if (name.equals(OpportunityPeer.CURRENCY_AMOUNT))
        {
                return getCurrencyAmount();
            }
          if (name.equals(OpportunityPeer.SALES_STAGE))
        {
                return new Integer(getSalesStage());
            }
          if (name.equals(OpportunityPeer.PROBABILITY))
        {
                return new Integer(getProbability());
            }
          if (name.equals(OpportunityPeer.SUBJECT))
        {
                return getSubject();
            }
          if (name.equals(OpportunityPeer.NEXT_STEPS))
        {
                return getNextSteps();
            }
          if (name.equals(OpportunityPeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(OpportunityPeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(OpportunityPeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(OpportunityPeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(OpportunityPeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getOpportunityId());
            }
              if (pos == 1)
        {
                return getOpportunityCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return new Integer(getOpportunityType());
            }
              if (pos == 5)
        {
                return getOpportunityName();
            }
              if (pos == 6)
        {
                return new Integer(getOpportunityCatId());
            }
              if (pos == 7)
        {
                return new Integer(getLeadSourceId());
            }
              if (pos == 8)
        {
                return getIssuedDate();
            }
              if (pos == 9)
        {
                return getExpectedDate();
            }
              if (pos == 10)
        {
                return getClosedDate();
            }
              if (pos == 11)
        {
                return new Integer(getCustomerId());
            }
              if (pos == 12)
        {
                return new Integer(getProjectId());
            }
              if (pos == 13)
        {
                return new Integer(getCurrencyId());
            }
              if (pos == 14)
        {
                return getCurrencyAmount();
            }
              if (pos == 15)
        {
                return new Integer(getSalesStage());
            }
              if (pos == 16)
        {
                return new Integer(getProbability());
            }
              if (pos == 17)
        {
                return getSubject();
            }
              if (pos == 18)
        {
                return getNextSteps();
            }
              if (pos == 19)
        {
                return getNotes();
            }
              if (pos == 20)
        {
                return getCreated();
            }
              if (pos == 21)
        {
                return getModified();
            }
              if (pos == 22)
        {
                return getCreatedBy();
            }
              if (pos == 23)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(OpportunityPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    OpportunityPeer.doInsert((Opportunity) this, con);
                    setNew(false);
                }
                else
                {
                    OpportunityPeer.doUpdate((Opportunity) this, con);
                }
            }

                                      
                
                    if (collSorders != null)
            {
                for (int i = 0; i < collSorders.size(); i++)
                {
                    ((Sorder) collSorders.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key opportunityId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setOpportunityId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setOpportunityId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getOpportunityId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Opportunity copy() throws TorqueException
    {
        return copyInto(new Opportunity());
    }
  
    protected Opportunity copyInto(Opportunity copyObj) throws TorqueException
    {
          copyObj.setOpportunityId(opportunityId);
          copyObj.setOpportunityCode(opportunityCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setOpportunityType(opportunityType);
          copyObj.setOpportunityName(opportunityName);
          copyObj.setOpportunityCatId(opportunityCatId);
          copyObj.setLeadSourceId(leadSourceId);
          copyObj.setIssuedDate(issuedDate);
          copyObj.setExpectedDate(expectedDate);
          copyObj.setClosedDate(closedDate);
          copyObj.setCustomerId(customerId);
          copyObj.setProjectId(projectId);
          copyObj.setCurrencyId(currencyId);
          copyObj.setCurrencyAmount(currencyAmount);
          copyObj.setSalesStage(salesStage);
          copyObj.setProbability(probability);
          copyObj.setSubject(subject);
          copyObj.setNextSteps(nextSteps);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setOpportunityId( 0);
                                                                                                                                                      
                                      
                            
        List v = getSorders();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorder(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public OpportunityPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Opportunity:\n");
        str.append("OpportunityId = ")
               .append(getOpportunityId())
             .append("\n");
        str.append("OpportunityCode = ")
               .append(getOpportunityCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("OpportunityType = ")
               .append(getOpportunityType())
             .append("\n");
        str.append("OpportunityName = ")
               .append(getOpportunityName())
             .append("\n");
        str.append("OpportunityCatId = ")
               .append(getOpportunityCatId())
             .append("\n");
        str.append("LeadSourceId = ")
               .append(getLeadSourceId())
             .append("\n");
        str.append("IssuedDate = ")
               .append(getIssuedDate())
             .append("\n");
        str.append("ExpectedDate = ")
               .append(getExpectedDate())
             .append("\n");
        str.append("ClosedDate = ")
               .append(getClosedDate())
             .append("\n");
        str.append("CustomerId = ")
               .append(getCustomerId())
             .append("\n");
        str.append("ProjectId = ")
               .append(getProjectId())
             .append("\n");
        str.append("CurrencyId = ")
               .append(getCurrencyId())
             .append("\n");
        str.append("CurrencyAmount = ")
               .append(getCurrencyAmount())
             .append("\n");
        str.append("SalesStage = ")
               .append(getSalesStage())
             .append("\n");
        str.append("Probability = ")
               .append(getProbability())
             .append("\n");
        str.append("Subject = ")
               .append(getSubject())
             .append("\n");
        str.append("NextSteps = ")
               .append(getNextSteps())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
