package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to ProductCmsSection
 */
public abstract class BaseProductCmsSection extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final ProductCmsSectionPeer peer =
        new ProductCmsSectionPeer();

        
    /** The value for the productCmsSecId field */
    private int productCmsSecId;
                                          
    /** The value for the productId field */
    private int productId = 1000;
                                          
    /** The value for the cmsPublicationId field */
    private int cmsPublicationId = 0;
                                          
    /** The value for the cmsSectionId field */
    private int cmsSectionId = 0;
                                          
    /** The value for the cmsLanguageId field */
    private int cmsLanguageId = 0;
  
    
    /**
     * Get the ProductCmsSecId
     *
     * @return int
     */
    public int getProductCmsSecId()
    {
        return productCmsSecId;
    }

                        
    /**
     * Set the value of ProductCmsSecId
     *
     * @param v new value
     */
    public void setProductCmsSecId(int v) 
    {
    
                  if (this.productCmsSecId != v)
              {
            this.productCmsSecId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ProductId
     *
     * @return int
     */
    public int getProductId()
    {
        return productId;
    }

                              
    /**
     * Set the value of ProductId
     *
     * @param v new value
     */
    public void setProductId(int v) throws TorqueException
    {
    
                  if (this.productId != v)
              {
            this.productId = v;
            setModified(true);
        }
    
                          
                if (aProduct != null && !(aProduct.getProductId() == v))
                {
            aProduct = null;
        }
      
              }
  
    /**
     * Get the CmsPublicationId
     *
     * @return int
     */
    public int getCmsPublicationId()
    {
        return cmsPublicationId;
    }

                        
    /**
     * Set the value of CmsPublicationId
     *
     * @param v new value
     */
    public void setCmsPublicationId(int v) 
    {
    
                  if (this.cmsPublicationId != v)
              {
            this.cmsPublicationId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CmsSectionId
     *
     * @return int
     */
    public int getCmsSectionId()
    {
        return cmsSectionId;
    }

                        
    /**
     * Set the value of CmsSectionId
     *
     * @param v new value
     */
    public void setCmsSectionId(int v) 
    {
    
                  if (this.cmsSectionId != v)
              {
            this.cmsSectionId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CmsLanguageId
     *
     * @return int
     */
    public int getCmsLanguageId()
    {
        return cmsLanguageId;
    }

                        
    /**
     * Set the value of CmsLanguageId
     *
     * @param v new value
     */
    public void setCmsLanguageId(int v) 
    {
    
                  if (this.cmsLanguageId != v)
              {
            this.cmsLanguageId = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private Product aProduct;

    /**
     * Declares an association between this object and a Product object
     *
     * @param v Product
     * @throws TorqueException
     */
    public void setProduct(Product v) throws TorqueException
    {
            if (v == null)
        {
                          setProductId( 1000);
              }
        else
        {
            setProductId(v.getProductId());
        }
            aProduct = v;
    }

                                            
    /**
     * Get the associated Product object
     *
     * @return the associated Product object
     * @throws TorqueException
     */
    public Product getProduct() throws TorqueException
    {
        if (aProduct == null && (this.productId != 0))
        {
                          aProduct = ProductPeer.retrieveByPK(SimpleKey.keyFor(this.productId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Product obj = ProductPeer.retrieveByPK(this.productId);
               obj.addProductCmsSections(this);
            */
        }
        return aProduct;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setProductKey(ObjectKey key) throws TorqueException
    {
      
                        setProductId(((NumberKey) key).intValue());
                  }
       
                
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("ProductCmsSecId");
              fieldNames.add("ProductId");
              fieldNames.add("CmsPublicationId");
              fieldNames.add("CmsSectionId");
              fieldNames.add("CmsLanguageId");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("ProductCmsSecId"))
        {
                return new Integer(getProductCmsSecId());
            }
          if (name.equals("ProductId"))
        {
                return new Integer(getProductId());
            }
          if (name.equals("CmsPublicationId"))
        {
                return new Integer(getCmsPublicationId());
            }
          if (name.equals("CmsSectionId"))
        {
                return new Integer(getCmsSectionId());
            }
          if (name.equals("CmsLanguageId"))
        {
                return new Integer(getCmsLanguageId());
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(ProductCmsSectionPeer.PRODUCT_CMS_SEC_ID))
        {
                return new Integer(getProductCmsSecId());
            }
          if (name.equals(ProductCmsSectionPeer.PRODUCT_ID))
        {
                return new Integer(getProductId());
            }
          if (name.equals(ProductCmsSectionPeer.CMS_PUBLICATION_ID))
        {
                return new Integer(getCmsPublicationId());
            }
          if (name.equals(ProductCmsSectionPeer.CMS_SECTION_ID))
        {
                return new Integer(getCmsSectionId());
            }
          if (name.equals(ProductCmsSectionPeer.CMS_LANGUAGE_ID))
        {
                return new Integer(getCmsLanguageId());
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getProductCmsSecId());
            }
              if (pos == 1)
        {
                return new Integer(getProductId());
            }
              if (pos == 2)
        {
                return new Integer(getCmsPublicationId());
            }
              if (pos == 3)
        {
                return new Integer(getCmsSectionId());
            }
              if (pos == 4)
        {
                return new Integer(getCmsLanguageId());
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(ProductCmsSectionPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    ProductCmsSectionPeer.doInsert((ProductCmsSection) this, con);
                    setNew(false);
                }
                else
                {
                    ProductCmsSectionPeer.doUpdate((ProductCmsSection) this, con);
                }
            }

                      alreadyInSave = false;
        }
      }

                  
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key productCmsSecId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
            setProductCmsSecId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
            setProductCmsSecId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getProductCmsSecId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public ProductCmsSection copy() throws TorqueException
    {
        return copyInto(new ProductCmsSection());
    }
  
    protected ProductCmsSection copyInto(ProductCmsSection copyObj) throws TorqueException
    {
          copyObj.setProductCmsSecId(productCmsSecId);
          copyObj.setProductId(productId);
          copyObj.setCmsPublicationId(cmsPublicationId);
          copyObj.setCmsSectionId(cmsSectionId);
          copyObj.setCmsLanguageId(cmsLanguageId);
  
                            copyObj.setProductCmsSecId( 0);
                                    
                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProductCmsSectionPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("ProductCmsSection:\n");
        str.append("ProductCmsSecId = ")
               .append(getProductCmsSecId())
             .append("\n");
        str.append("ProductId = ")
               .append(getProductId())
             .append("\n");
        str.append("CmsPublicationId = ")
               .append(getCmsPublicationId())
             .append("\n");
        str.append("CmsSectionId = ")
               .append(getCmsSectionId())
             .append("\n");
        str.append("CmsLanguageId = ")
               .append(getCmsLanguageId())
             .append("\n");
        return(str.toString());
    }
}
