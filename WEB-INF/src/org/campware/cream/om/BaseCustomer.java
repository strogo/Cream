package org.campware.cream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.turbine.om.Retrievable;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

  
    
    
    
    
    
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Wed May 04 09:10:56 CEST 2005]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Customer
 */
public abstract class BaseCustomer extends BaseObject
    implements org.apache.turbine.om.Retrievable
{
    /** The Peer class */
    private static final CustomerPeer peer =
        new CustomerPeer();

        
    /** The value for the customerId field */
    private int customerId;
                                                
    /** The value for the customerCode field */
    private String customerCode = "AUTO";
                                          
    /** The value for the status field */
    private int status = 30;
                                          
    /** The value for the priority field */
    private int priority = 30;
                                          
    /** The value for the customerType field */
    private int customerType = 10;
                                          
    /** The value for the customerCatId field */
    private int customerCatId = 1000;
      
    /** The value for the customerName1 field */
    private String customerName1;
      
    /** The value for the customerName2 field */
    private String customerName2;
      
    /** The value for the customerDisplay field */
    private String customerDisplay;
      
    /** The value for the dear field */
    private String dear;
      
    /** The value for the address1 field */
    private String address1;
      
    /** The value for the address2 field */
    private String address2;
      
    /** The value for the city field */
    private String city;
      
    /** The value for the zip field */
    private String zip;
      
    /** The value for the state field */
    private String state;
                                          
    /** The value for the countryId field */
    private int countryId = 1000;
                                          
    /** The value for the regionId field */
    private int regionId = 1000;
      
    /** The value for the phone1 field */
    private String phone1;
      
    /** The value for the phone2 field */
    private String phone2;
      
    /** The value for the fax field */
    private String fax;
      
    /** The value for the email field */
    private String email;
                                          
    /** The value for the emailFormat field */
    private int emailFormat = 10;
                                          
    /** The value for the sendNews field */
    private int sendNews = 20;
      
    /** The value for the webUrl field */
    private String webUrl;
                                          
    /** The value for the languageId field */
    private int languageId = 1000;
                                          
    /** The value for the gender field */
    private int gender = 10;
                                          
    /** The value for the educationCatId field */
    private int educationCatId = 1000;
                                          
    /** The value for the householdCatId field */
    private int householdCatId = 1000;
      
    /** The value for the custom1 field */
    private String custom1;
      
    /** The value for the custom2 field */
    private String custom2;
      
    /** The value for the custom3 field */
    private String custom3;
      
    /** The value for the custom4 field */
    private String custom4;
      
    /** The value for the custom5 field */
    private String custom5;
      
    /** The value for the custom6 field */
    private String custom6;
      
    /** The value for the notes field */
    private String notes;
      
    /** The value for the created field */
    private Date created;
      
    /** The value for the modified field */
    private Date modified;
      
    /** The value for the createdBy field */
    private String createdBy;
      
    /** The value for the modifiedBy field */
    private String modifiedBy;
  
    
    /**
     * Get the CustomerId
     *
     * @return int
     */
    public int getCustomerId()
    {
        return customerId;
    }

                                              
    /**
     * Set the value of CustomerId
     *
     * @param v new value
     */
    public void setCustomerId(int v) throws TorqueException
    {
    
                  if (this.customerId != v)
              {
            this.customerId = v;
            setModified(true);
        }
    
          
                                  
                  // update associated Sorder
        if (collSordersRelatedByCustomerId != null)
        {
            for (int i = 0; i < collSordersRelatedByCustomerId.size(); i++)
            {
                ((Sorder) collSordersRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated Sorder
        if (collSordersRelatedByRecipientId != null)
        {
            for (int i = 0; i < collSordersRelatedByRecipientId.size(); i++)
            {
                ((Sorder) collSordersRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated Payment
        if (collPayments != null)
        {
            for (int i = 0; i < collPayments.size(); i++)
            {
                ((Payment) collPayments.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated Service
        if (collServicesRelatedByCustomerId != null)
        {
            for (int i = 0; i < collServicesRelatedByCustomerId.size(); i++)
            {
                ((Service) collServicesRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated Service
        if (collServicesRelatedByRecipientId != null)
        {
            for (int i = 0; i < collServicesRelatedByRecipientId.size(); i++)
            {
                ((Service) collServicesRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated Shipment
        if (collShipmentsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collShipmentsRelatedByCustomerId.size(); i++)
            {
                ((Shipment) collShipmentsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated Shipment
        if (collShipmentsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collShipmentsRelatedByRecipientId.size(); i++)
            {
                ((Shipment) collShipmentsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated PrintSubscription
        if (collPrintSubscriptionsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collPrintSubscriptionsRelatedByCustomerId.size(); i++)
            {
                ((PrintSubscription) collPrintSubscriptionsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated PrintSubscription
        if (collPrintSubscriptionsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collPrintSubscriptionsRelatedByRecipientId.size(); i++)
            {
                ((PrintSubscription) collPrintSubscriptionsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated OnlineSubscription
        if (collOnlineSubscriptionsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collOnlineSubscriptionsRelatedByCustomerId.size(); i++)
            {
                ((OnlineSubscription) collOnlineSubscriptionsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated OnlineSubscription
        if (collOnlineSubscriptionsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collOnlineSubscriptionsRelatedByRecipientId.size(); i++)
            {
                ((OnlineSubscription) collOnlineSubscriptionsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated InboxEvent
        if (collInboxEvents != null)
        {
            for (int i = 0; i < collInboxEvents.size(); i++)
            {
                ((InboxEvent) collInboxEvents.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated OutboxEvent
        if (collOutboxEvents != null)
        {
            for (int i = 0; i < collOutboxEvents.size(); i++)
            {
                ((OutboxEvent) collOutboxEvents.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated SorderItem
        if (collSorderItemsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collSorderItemsRelatedByCustomerId.size(); i++)
            {
                ((SorderItem) collSorderItemsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated SorderItem
        if (collSorderItemsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collSorderItemsRelatedByRecipientId.size(); i++)
            {
                ((SorderItem) collSorderItemsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated PaymentItem
        if (collPaymentItems != null)
        {
            for (int i = 0; i < collPaymentItems.size(); i++)
            {
                ((PaymentItem) collPaymentItems.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated ShipmentItem
        if (collShipmentItemsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collShipmentItemsRelatedByCustomerId.size(); i++)
            {
                ((ShipmentItem) collShipmentItemsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated ShipmentItem
        if (collShipmentItemsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collShipmentItemsRelatedByRecipientId.size(); i++)
            {
                ((ShipmentItem) collShipmentItemsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                                    
                  // update associated ServiceItem
        if (collServiceItemsRelatedByCustomerId != null)
        {
            for (int i = 0; i < collServiceItemsRelatedByCustomerId.size(); i++)
            {
                ((ServiceItem) collServiceItemsRelatedByCustomerId.get(i))
                    .setCustomerId(v);
            }
        }
                                                    
                  // update associated ServiceItem
        if (collServiceItemsRelatedByRecipientId != null)
        {
            for (int i = 0; i < collServiceItemsRelatedByRecipientId.size(); i++)
            {
                ((ServiceItem) collServiceItemsRelatedByRecipientId.get(i))
                    .setRecipientId(v);
            }
        }
                                }
  
    /**
     * Get the CustomerCode
     *
     * @return String
     */
    public String getCustomerCode()
    {
        return customerCode;
    }

                        
    /**
     * Set the value of CustomerCode
     *
     * @param v new value
     */
    public void setCustomerCode(String v) 
    {
    
                  if (!ObjectUtils.equals(this.customerCode, v))
              {
            this.customerCode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Status
     *
     * @return int
     */
    public int getStatus()
    {
        return status;
    }

                        
    /**
     * Set the value of Status
     *
     * @param v new value
     */
    public void setStatus(int v) 
    {
    
                  if (this.status != v)
              {
            this.status = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Priority
     *
     * @return int
     */
    public int getPriority()
    {
        return priority;
    }

                        
    /**
     * Set the value of Priority
     *
     * @param v new value
     */
    public void setPriority(int v) 
    {
    
                  if (this.priority != v)
              {
            this.priority = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerType
     *
     * @return int
     */
    public int getCustomerType()
    {
        return customerType;
    }

                        
    /**
     * Set the value of CustomerType
     *
     * @param v new value
     */
    public void setCustomerType(int v) 
    {
    
                  if (this.customerType != v)
              {
            this.customerType = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerCatId
     *
     * @return int
     */
    public int getCustomerCatId()
    {
        return customerCatId;
    }

                              
    /**
     * Set the value of CustomerCatId
     *
     * @param v new value
     */
    public void setCustomerCatId(int v) throws TorqueException
    {
    
                  if (this.customerCatId != v)
              {
            this.customerCatId = v;
            setModified(true);
        }
    
                          
                if (aCustomerCategory != null && !(aCustomerCategory.getCustomerCatId() == v))
                {
            aCustomerCategory = null;
        }
      
              }
  
    /**
     * Get the CustomerName1
     *
     * @return String
     */
    public String getCustomerName1()
    {
        return customerName1;
    }

                        
    /**
     * Set the value of CustomerName1
     *
     * @param v new value
     */
    public void setCustomerName1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.customerName1, v))
              {
            this.customerName1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerName2
     *
     * @return String
     */
    public String getCustomerName2()
    {
        return customerName2;
    }

                        
    /**
     * Set the value of CustomerName2
     *
     * @param v new value
     */
    public void setCustomerName2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.customerName2, v))
              {
            this.customerName2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CustomerDisplay
     *
     * @return String
     */
    public String getCustomerDisplay()
    {
        return customerDisplay;
    }

                        
    /**
     * Set the value of CustomerDisplay
     *
     * @param v new value
     */
    public void setCustomerDisplay(String v) 
    {
    
                  if (!ObjectUtils.equals(this.customerDisplay, v))
              {
            this.customerDisplay = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Dear
     *
     * @return String
     */
    public String getDear()
    {
        return dear;
    }

                        
    /**
     * Set the value of Dear
     *
     * @param v new value
     */
    public void setDear(String v) 
    {
    
                  if (!ObjectUtils.equals(this.dear, v))
              {
            this.dear = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address1
     *
     * @return String
     */
    public String getAddress1()
    {
        return address1;
    }

                        
    /**
     * Set the value of Address1
     *
     * @param v new value
     */
    public void setAddress1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address1, v))
              {
            this.address1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address2
     *
     * @return String
     */
    public String getAddress2()
    {
        return address2;
    }

                        
    /**
     * Set the value of Address2
     *
     * @param v new value
     */
    public void setAddress2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address2, v))
              {
            this.address2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the City
     *
     * @return String
     */
    public String getCity()
    {
        return city;
    }

                        
    /**
     * Set the value of City
     *
     * @param v new value
     */
    public void setCity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.city, v))
              {
            this.city = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Zip
     *
     * @return String
     */
    public String getZip()
    {
        return zip;
    }

                        
    /**
     * Set the value of Zip
     *
     * @param v new value
     */
    public void setZip(String v) 
    {
    
                  if (!ObjectUtils.equals(this.zip, v))
              {
            this.zip = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CountryId
     *
     * @return int
     */
    public int getCountryId()
    {
        return countryId;
    }

                              
    /**
     * Set the value of CountryId
     *
     * @param v new value
     */
    public void setCountryId(int v) throws TorqueException
    {
    
                  if (this.countryId != v)
              {
            this.countryId = v;
            setModified(true);
        }
    
                          
                if (aCountry != null && !(aCountry.getCountryId() == v))
                {
            aCountry = null;
        }
      
              }
  
    /**
     * Get the RegionId
     *
     * @return int
     */
    public int getRegionId()
    {
        return regionId;
    }

                              
    /**
     * Set the value of RegionId
     *
     * @param v new value
     */
    public void setRegionId(int v) throws TorqueException
    {
    
                  if (this.regionId != v)
              {
            this.regionId = v;
            setModified(true);
        }
    
                          
                if (aRegion != null && !(aRegion.getRegionId() == v))
                {
            aRegion = null;
        }
      
              }
  
    /**
     * Get the Phone1
     *
     * @return String
     */
    public String getPhone1()
    {
        return phone1;
    }

                        
    /**
     * Set the value of Phone1
     *
     * @param v new value
     */
    public void setPhone1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phone1, v))
              {
            this.phone1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Phone2
     *
     * @return String
     */
    public String getPhone2()
    {
        return phone2;
    }

                        
    /**
     * Set the value of Phone2
     *
     * @param v new value
     */
    public void setPhone2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phone2, v))
              {
            this.phone2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Fax
     *
     * @return String
     */
    public String getFax()
    {
        return fax;
    }

                        
    /**
     * Set the value of Fax
     *
     * @param v new value
     */
    public void setFax(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fax, v))
              {
            this.fax = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Email
     *
     * @return String
     */
    public String getEmail()
    {
        return email;
    }

                        
    /**
     * Set the value of Email
     *
     * @param v new value
     */
    public void setEmail(String v) 
    {
    
                  if (!ObjectUtils.equals(this.email, v))
              {
            this.email = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EmailFormat
     *
     * @return int
     */
    public int getEmailFormat()
    {
        return emailFormat;
    }

                        
    /**
     * Set the value of EmailFormat
     *
     * @param v new value
     */
    public void setEmailFormat(int v) 
    {
    
                  if (this.emailFormat != v)
              {
            this.emailFormat = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the SendNews
     *
     * @return int
     */
    public int getSendNews()
    {
        return sendNews;
    }

                        
    /**
     * Set the value of SendNews
     *
     * @param v new value
     */
    public void setSendNews(int v) 
    {
    
                  if (this.sendNews != v)
              {
            this.sendNews = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the WebUrl
     *
     * @return String
     */
    public String getWebUrl()
    {
        return webUrl;
    }

                        
    /**
     * Set the value of WebUrl
     *
     * @param v new value
     */
    public void setWebUrl(String v) 
    {
    
                  if (!ObjectUtils.equals(this.webUrl, v))
              {
            this.webUrl = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LanguageId
     *
     * @return int
     */
    public int getLanguageId()
    {
        return languageId;
    }

                              
    /**
     * Set the value of LanguageId
     *
     * @param v new value
     */
    public void setLanguageId(int v) throws TorqueException
    {
    
                  if (this.languageId != v)
              {
            this.languageId = v;
            setModified(true);
        }
    
                          
                if (aLanguage != null && !(aLanguage.getLanguageId() == v))
                {
            aLanguage = null;
        }
      
              }
  
    /**
     * Get the Gender
     *
     * @return int
     */
    public int getGender()
    {
        return gender;
    }

                        
    /**
     * Set the value of Gender
     *
     * @param v new value
     */
    public void setGender(int v) 
    {
    
                  if (this.gender != v)
              {
            this.gender = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EducationCatId
     *
     * @return int
     */
    public int getEducationCatId()
    {
        return educationCatId;
    }

                              
    /**
     * Set the value of EducationCatId
     *
     * @param v new value
     */
    public void setEducationCatId(int v) throws TorqueException
    {
    
                  if (this.educationCatId != v)
              {
            this.educationCatId = v;
            setModified(true);
        }
    
                          
                if (aEducationCategory != null && !(aEducationCategory.getEducationCatId() == v))
                {
            aEducationCategory = null;
        }
      
              }
  
    /**
     * Get the HouseholdCatId
     *
     * @return int
     */
    public int getHouseholdCatId()
    {
        return householdCatId;
    }

                              
    /**
     * Set the value of HouseholdCatId
     *
     * @param v new value
     */
    public void setHouseholdCatId(int v) throws TorqueException
    {
    
                  if (this.householdCatId != v)
              {
            this.householdCatId = v;
            setModified(true);
        }
    
                          
                if (aHouseholdCategory != null && !(aHouseholdCategory.getHouseholdCatId() == v))
                {
            aHouseholdCategory = null;
        }
      
              }
  
    /**
     * Get the Custom1
     *
     * @return String
     */
    public String getCustom1()
    {
        return custom1;
    }

                        
    /**
     * Set the value of Custom1
     *
     * @param v new value
     */
    public void setCustom1(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom1, v))
              {
            this.custom1 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom2
     *
     * @return String
     */
    public String getCustom2()
    {
        return custom2;
    }

                        
    /**
     * Set the value of Custom2
     *
     * @param v new value
     */
    public void setCustom2(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom2, v))
              {
            this.custom2 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom3
     *
     * @return String
     */
    public String getCustom3()
    {
        return custom3;
    }

                        
    /**
     * Set the value of Custom3
     *
     * @param v new value
     */
    public void setCustom3(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom3, v))
              {
            this.custom3 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom4
     *
     * @return String
     */
    public String getCustom4()
    {
        return custom4;
    }

                        
    /**
     * Set the value of Custom4
     *
     * @param v new value
     */
    public void setCustom4(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom4, v))
              {
            this.custom4 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom5
     *
     * @return String
     */
    public String getCustom5()
    {
        return custom5;
    }

                        
    /**
     * Set the value of Custom5
     *
     * @param v new value
     */
    public void setCustom5(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom5, v))
              {
            this.custom5 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Custom6
     *
     * @return String
     */
    public String getCustom6()
    {
        return custom6;
    }

                        
    /**
     * Set the value of Custom6
     *
     * @param v new value
     */
    public void setCustom6(String v) 
    {
    
                  if (!ObjectUtils.equals(this.custom6, v))
              {
            this.custom6 = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Notes
     *
     * @return String
     */
    public String getNotes()
    {
        return notes;
    }

                        
    /**
     * Set the value of Notes
     *
     * @param v new value
     */
    public void setNotes(String v) 
    {
    
                  if (!ObjectUtils.equals(this.notes, v))
              {
            this.notes = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Created
     *
     * @return Date
     */
    public Date getCreated()
    {
        return created;
    }

                        
    /**
     * Set the value of Created
     *
     * @param v new value
     */
    public void setCreated(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.created, v))
              {
            this.created = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Modified
     *
     * @return Date
     */
    public Date getModified()
    {
        return modified;
    }

                        
    /**
     * Set the value of Modified
     *
     * @param v new value
     */
    public void setModified(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.modified, v))
              {
            this.modified = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedBy
     *
     * @return String
     */
    public String getCreatedBy()
    {
        return createdBy;
    }

                        
    /**
     * Set the value of CreatedBy
     *
     * @param v new value
     */
    public void setCreatedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.createdBy, v))
              {
            this.createdBy = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the ModifiedBy
     *
     * @return String
     */
    public String getModifiedBy()
    {
        return modifiedBy;
    }

                        
    /**
     * Set the value of ModifiedBy
     *
     * @param v new value
     */
    public void setModifiedBy(String v) 
    {
    
                  if (!ObjectUtils.equals(this.modifiedBy, v))
              {
            this.modifiedBy = v;
            setModified(true);
        }
    
          
              }
  
      
    
                  
    
        private CustomerCategory aCustomerCategory;

    /**
     * Declares an association between this object and a CustomerCategory object
     *
     * @param v CustomerCategory
     * @throws TorqueException
     */
    public void setCustomerCategory(CustomerCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setCustomerCatId( 1000);
              }
        else
        {
            setCustomerCatId(v.getCustomerCatId());
        }
            aCustomerCategory = v;
    }

                                            
    /**
     * Get the associated CustomerCategory object
     *
     * @return the associated CustomerCategory object
     * @throws TorqueException
     */
    public CustomerCategory getCustomerCategory() throws TorqueException
    {
        if (aCustomerCategory == null && (this.customerCatId != 0))
        {
                          aCustomerCategory = CustomerCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.customerCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               CustomerCategory obj = CustomerCategoryPeer.retrieveByPK(this.customerCatId);
               obj.addCustomers(this);
            */
        }
        return aCustomerCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCustomerCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setCustomerCatId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Country aCountry;

    /**
     * Declares an association between this object and a Country object
     *
     * @param v Country
     * @throws TorqueException
     */
    public void setCountry(Country v) throws TorqueException
    {
            if (v == null)
        {
                          setCountryId( 1000);
              }
        else
        {
            setCountryId(v.getCountryId());
        }
            aCountry = v;
    }

                                            
    /**
     * Get the associated Country object
     *
     * @return the associated Country object
     * @throws TorqueException
     */
    public Country getCountry() throws TorqueException
    {
        if (aCountry == null && (this.countryId != 0))
        {
                          aCountry = CountryPeer.retrieveByPK(SimpleKey.keyFor(this.countryId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Country obj = CountryPeer.retrieveByPK(this.countryId);
               obj.addCustomers(this);
            */
        }
        return aCountry;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setCountryKey(ObjectKey key) throws TorqueException
    {
      
                        setCountryId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Region aRegion;

    /**
     * Declares an association between this object and a Region object
     *
     * @param v Region
     * @throws TorqueException
     */
    public void setRegion(Region v) throws TorqueException
    {
            if (v == null)
        {
                          setRegionId( 1000);
              }
        else
        {
            setRegionId(v.getRegionId());
        }
            aRegion = v;
    }

                                            
    /**
     * Get the associated Region object
     *
     * @return the associated Region object
     * @throws TorqueException
     */
    public Region getRegion() throws TorqueException
    {
        if (aRegion == null && (this.regionId != 0))
        {
                          aRegion = RegionPeer.retrieveByPK(SimpleKey.keyFor(this.regionId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Region obj = RegionPeer.retrieveByPK(this.regionId);
               obj.addCustomers(this);
            */
        }
        return aRegion;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setRegionKey(ObjectKey key) throws TorqueException
    {
      
                        setRegionId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private Language aLanguage;

    /**
     * Declares an association between this object and a Language object
     *
     * @param v Language
     * @throws TorqueException
     */
    public void setLanguage(Language v) throws TorqueException
    {
            if (v == null)
        {
                          setLanguageId( 1000);
              }
        else
        {
            setLanguageId(v.getLanguageId());
        }
            aLanguage = v;
    }

                                            
    /**
     * Get the associated Language object
     *
     * @return the associated Language object
     * @throws TorqueException
     */
    public Language getLanguage() throws TorqueException
    {
        if (aLanguage == null && (this.languageId != 0))
        {
                          aLanguage = LanguagePeer.retrieveByPK(SimpleKey.keyFor(this.languageId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Language obj = LanguagePeer.retrieveByPK(this.languageId);
               obj.addCustomers(this);
            */
        }
        return aLanguage;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setLanguageKey(ObjectKey key) throws TorqueException
    {
      
                        setLanguageId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private EducationCategory aEducationCategory;

    /**
     * Declares an association between this object and a EducationCategory object
     *
     * @param v EducationCategory
     * @throws TorqueException
     */
    public void setEducationCategory(EducationCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setEducationCatId( 1000);
              }
        else
        {
            setEducationCatId(v.getEducationCatId());
        }
            aEducationCategory = v;
    }

                                            
    /**
     * Get the associated EducationCategory object
     *
     * @return the associated EducationCategory object
     * @throws TorqueException
     */
    public EducationCategory getEducationCategory() throws TorqueException
    {
        if (aEducationCategory == null && (this.educationCatId != 0))
        {
                          aEducationCategory = EducationCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.educationCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               EducationCategory obj = EducationCategoryPeer.retrieveByPK(this.educationCatId);
               obj.addCustomers(this);
            */
        }
        return aEducationCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setEducationCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setEducationCatId(((NumberKey) key).intValue());
                  }
    
    
                  
    
        private HouseholdCategory aHouseholdCategory;

    /**
     * Declares an association between this object and a HouseholdCategory object
     *
     * @param v HouseholdCategory
     * @throws TorqueException
     */
    public void setHouseholdCategory(HouseholdCategory v) throws TorqueException
    {
            if (v == null)
        {
                          setHouseholdCatId( 1000);
              }
        else
        {
            setHouseholdCatId(v.getHouseholdCatId());
        }
            aHouseholdCategory = v;
    }

                                            
    /**
     * Get the associated HouseholdCategory object
     *
     * @return the associated HouseholdCategory object
     * @throws TorqueException
     */
    public HouseholdCategory getHouseholdCategory() throws TorqueException
    {
        if (aHouseholdCategory == null && (this.householdCatId != 0))
        {
                          aHouseholdCategory = HouseholdCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.householdCatId));
              
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               HouseholdCategory obj = HouseholdCategoryPeer.retrieveByPK(this.householdCatId);
               obj.addCustomers(this);
            */
        }
        return aHouseholdCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey, for example
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
         */
    public void setHouseholdCategoryKey(ObjectKey key) throws TorqueException
    {
      
                        setHouseholdCatId(((NumberKey) key).intValue());
                  }
       
                                        
            
          /**
     * Collection to store aggregation of collSordersRelatedByCustomerId
     */
    protected List collSordersRelatedByCustomerId;

    /**
     * Temporary storage of collSordersRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSordersRelatedByCustomerId()
    {
        if (collSordersRelatedByCustomerId == null)
        {
            collSordersRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorderRelatedByCustomerId(Sorder l) throws TorqueException
    {
        getSordersRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collSordersRelatedByCustomerId
     */
    private Criteria lastSordersRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSordersRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSordersRelatedByCustomerId() throws TorqueException
    {
              if (collSordersRelatedByCustomerId == null)
        {
            collSordersRelatedByCustomerId = getSordersRelatedByCustomerId(new Criteria(10));
        }
        return collSordersRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSordersRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId() );
                        collSordersRelatedByCustomerId = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collSordersRelatedByCustomerId = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersRelatedByCustomerIdCriteria = criteria;

        return collSordersRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSordersRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSordersRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collSordersRelatedByCustomerId == null)
        {
            collSordersRelatedByCustomerId = getSordersRelatedByCustomerId(new Criteria(10), con);
        }
        return collSordersRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSordersRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                         collSordersRelatedByCustomerId = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collSordersRelatedByCustomerId = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersRelatedByCustomerIdCriteria = criteria;

         return collSordersRelatedByCustomerId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                              collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSordersRelatedByCustomerIdCriteria = criteria;

        return collSordersRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                              collSordersRelatedByCustomerId = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSordersRelatedByCustomerId = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersRelatedByCustomerIdCriteria = criteria;

        return collSordersRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByCustomerIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                              collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersRelatedByCustomerIdCriteria = criteria;

        return collSordersRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByCustomerIdJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSordersRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                              collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSordersRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSordersRelatedByCustomerId = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersRelatedByCustomerIdCriteria = criteria;

        return collSordersRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collSordersRelatedByRecipientId
     */
    protected List collSordersRelatedByRecipientId;

    /**
     * Temporary storage of collSordersRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSordersRelatedByRecipientId()
    {
        if (collSordersRelatedByRecipientId == null)
        {
            collSordersRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Sorder object to this object
     * through the Sorder foreign key attribute
     *
     * @param l Sorder
     * @throws TorqueException
     */
    public void addSorderRelatedByRecipientId(Sorder l) throws TorqueException
    {
        getSordersRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collSordersRelatedByRecipientId
     */
    private Criteria lastSordersRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSordersRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSordersRelatedByRecipientId() throws TorqueException
    {
              if (collSordersRelatedByRecipientId == null)
        {
            collSordersRelatedByRecipientId = getSordersRelatedByRecipientId(new Criteria(10));
        }
        return collSordersRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSordersRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId() );
                        collSordersRelatedByRecipientId = SorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collSordersRelatedByRecipientId = SorderPeer.doSelect(criteria);
                }
            }
        }
        lastSordersRelatedByRecipientIdCriteria = criteria;

        return collSordersRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSordersRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSordersRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collSordersRelatedByRecipientId == null)
        {
            collSordersRelatedByRecipientId = getSordersRelatedByRecipientId(new Criteria(10), con);
        }
        return collSordersRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSordersRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                         collSordersRelatedByRecipientId = SorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collSordersRelatedByRecipientId = SorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSordersRelatedByRecipientIdCriteria = criteria;

         return collSordersRelatedByRecipientId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                              collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSordersRelatedByRecipientIdCriteria = criteria;

        return collSordersRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                              collSordersRelatedByRecipientId = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSordersRelatedByRecipientId = SorderPeer.doSelectJoinProject(criteria);
            }
        }
        lastSordersRelatedByRecipientIdCriteria = criteria;

        return collSordersRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByRecipientIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                              collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastSordersRelatedByRecipientIdCriteria = criteria;

        return collSordersRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SordersRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSordersRelatedByRecipientIdJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSordersRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSordersRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                              collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSordersRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSordersRelatedByRecipientId = SorderPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSordersRelatedByRecipientIdCriteria = criteria;

        return collSordersRelatedByRecipientId;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPayments
     */
    protected List collPayments;

    /**
     * Temporary storage of collPayments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPayments()
    {
        if (collPayments == null)
        {
            collPayments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Payment object to this object
     * through the Payment foreign key attribute
     *
     * @param l Payment
     * @throws TorqueException
     */
    public void addPayment(Payment l) throws TorqueException
    {
        getPayments().add(l);
        l.setCustomer((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collPayments
     */
    private Criteria lastPaymentsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPayments() throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10));
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPayments(Criteria criteria) throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId() );
                        collPayments = PaymentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastPaymentsCriteria.equals(criteria))
                {
                    collPayments = PaymentPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPayments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Connection con) throws TorqueException
    {
              if (collPayments == null)
        {
            collPayments = getPayments(new Criteria(10), con);
        }
        return collPayments;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPayments(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                         collPayments = PaymentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastPaymentsCriteria.equals(criteria))
                 {
                     collPayments = PaymentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentsCriteria = criteria;

         return collPayments;
           }

                                    
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                              collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                              collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                              collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related Payments from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPayments == null)
        {
            if (isNew())
            {
               collPayments = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                              collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentsCriteria.equals(criteria))
            {
                collPayments = PaymentPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentsCriteria = criteria;

        return collPayments;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collServicesRelatedByCustomerId
     */
    protected List collServicesRelatedByCustomerId;

    /**
     * Temporary storage of collServicesRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServicesRelatedByCustomerId()
    {
        if (collServicesRelatedByCustomerId == null)
        {
            collServicesRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Service object to this object
     * through the Service foreign key attribute
     *
     * @param l Service
     * @throws TorqueException
     */
    public void addServiceRelatedByCustomerId(Service l) throws TorqueException
    {
        getServicesRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collServicesRelatedByCustomerId
     */
    private Criteria lastServicesRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServicesRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServicesRelatedByCustomerId() throws TorqueException
    {
              if (collServicesRelatedByCustomerId == null)
        {
            collServicesRelatedByCustomerId = getServicesRelatedByCustomerId(new Criteria(10));
        }
        return collServicesRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServicesRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collServicesRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServicesRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId() );
                        collServicesRelatedByCustomerId = ServicePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                            if (!lastServicesRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collServicesRelatedByCustomerId = ServicePeer.doSelect(criteria);
                }
            }
        }
        lastServicesRelatedByCustomerIdCriteria = criteria;

        return collServicesRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServicesRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServicesRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collServicesRelatedByCustomerId == null)
        {
            collServicesRelatedByCustomerId = getServicesRelatedByCustomerId(new Criteria(10), con);
        }
        return collServicesRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServicesRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServicesRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServicesRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                         collServicesRelatedByCustomerId = ServicePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                             if (!lastServicesRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collServicesRelatedByCustomerId = ServicePeer.doSelect(criteria, con);
                 }
             }
         }
         lastServicesRelatedByCustomerIdCriteria = criteria;

         return collServicesRelatedByCustomerId;
           }

                                    
              
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServicesRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                              collServicesRelatedByCustomerId = ServicePeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServicesRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServicesRelatedByCustomerId = ServicePeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServicesRelatedByCustomerIdCriteria = criteria;

        return collServicesRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServicesRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                              collServicesRelatedByCustomerId = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServicesRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServicesRelatedByCustomerId = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        lastServicesRelatedByCustomerIdCriteria = criteria;

        return collServicesRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServicesRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                              collServicesRelatedByCustomerId = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServicesRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServicesRelatedByCustomerId = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        lastServicesRelatedByCustomerIdCriteria = criteria;

        return collServicesRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collServicesRelatedByRecipientId
     */
    protected List collServicesRelatedByRecipientId;

    /**
     * Temporary storage of collServicesRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServicesRelatedByRecipientId()
    {
        if (collServicesRelatedByRecipientId == null)
        {
            collServicesRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Service object to this object
     * through the Service foreign key attribute
     *
     * @param l Service
     * @throws TorqueException
     */
    public void addServiceRelatedByRecipientId(Service l) throws TorqueException
    {
        getServicesRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collServicesRelatedByRecipientId
     */
    private Criteria lastServicesRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServicesRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServicesRelatedByRecipientId() throws TorqueException
    {
              if (collServicesRelatedByRecipientId == null)
        {
            collServicesRelatedByRecipientId = getServicesRelatedByRecipientId(new Criteria(10));
        }
        return collServicesRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServicesRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collServicesRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServicesRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId() );
                        collServicesRelatedByRecipientId = ServicePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                            if (!lastServicesRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collServicesRelatedByRecipientId = ServicePeer.doSelect(criteria);
                }
            }
        }
        lastServicesRelatedByRecipientIdCriteria = criteria;

        return collServicesRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServicesRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServicesRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collServicesRelatedByRecipientId == null)
        {
            collServicesRelatedByRecipientId = getServicesRelatedByRecipientId(new Criteria(10), con);
        }
        return collServicesRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServicesRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServicesRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServicesRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                         collServicesRelatedByRecipientId = ServicePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                             if (!lastServicesRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collServicesRelatedByRecipientId = ServicePeer.doSelect(criteria, con);
                 }
             }
         }
         lastServicesRelatedByRecipientIdCriteria = criteria;

         return collServicesRelatedByRecipientId;
           }

                                    
              
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServicesRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                              collServicesRelatedByRecipientId = ServicePeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServicesRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServicesRelatedByRecipientId = ServicePeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServicesRelatedByRecipientIdCriteria = criteria;

        return collServicesRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServicesRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                              collServicesRelatedByRecipientId = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServicesRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServicesRelatedByRecipientId = ServicePeer.doSelectJoinProject(criteria);
            }
        }
        lastServicesRelatedByRecipientIdCriteria = criteria;

        return collServicesRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServicesRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServicesRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServicesRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServicesRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                              collServicesRelatedByRecipientId = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServicePeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServicesRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServicesRelatedByRecipientId = ServicePeer.doSelectJoinSorder(criteria);
            }
        }
        lastServicesRelatedByRecipientIdCriteria = criteria;

        return collServicesRelatedByRecipientId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collShipmentsRelatedByCustomerId
     */
    protected List collShipmentsRelatedByCustomerId;

    /**
     * Temporary storage of collShipmentsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentsRelatedByCustomerId()
    {
        if (collShipmentsRelatedByCustomerId == null)
        {
            collShipmentsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Shipment object to this object
     * through the Shipment foreign key attribute
     *
     * @param l Shipment
     * @throws TorqueException
     */
    public void addShipmentRelatedByCustomerId(Shipment l) throws TorqueException
    {
        getShipmentsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentsRelatedByCustomerId
     */
    private Criteria lastShipmentsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentsRelatedByCustomerId() throws TorqueException
    {
              if (collShipmentsRelatedByCustomerId == null)
        {
            collShipmentsRelatedByCustomerId = getShipmentsRelatedByCustomerId(new Criteria(10));
        }
        return collShipmentsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId() );
                        collShipmentsRelatedByCustomerId = ShipmentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collShipmentsRelatedByCustomerId = ShipmentPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentsRelatedByCustomerIdCriteria = criteria;

        return collShipmentsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collShipmentsRelatedByCustomerId == null)
        {
            collShipmentsRelatedByCustomerId = getShipmentsRelatedByCustomerId(new Criteria(10), con);
        }
        return collShipmentsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                         collShipmentsRelatedByCustomerId = ShipmentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collShipmentsRelatedByCustomerId = ShipmentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentsRelatedByCustomerIdCriteria = criteria;

         return collShipmentsRelatedByCustomerId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentsRelatedByCustomerIdCriteria = criteria;

        return collShipmentsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentsRelatedByCustomerIdCriteria = criteria;

        return collShipmentsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentsRelatedByCustomerIdCriteria = criteria;

        return collShipmentsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByCustomerIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByCustomerId = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastShipmentsRelatedByCustomerIdCriteria = criteria;

        return collShipmentsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collShipmentsRelatedByRecipientId
     */
    protected List collShipmentsRelatedByRecipientId;

    /**
     * Temporary storage of collShipmentsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentsRelatedByRecipientId()
    {
        if (collShipmentsRelatedByRecipientId == null)
        {
            collShipmentsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a Shipment object to this object
     * through the Shipment foreign key attribute
     *
     * @param l Shipment
     * @throws TorqueException
     */
    public void addShipmentRelatedByRecipientId(Shipment l) throws TorqueException
    {
        getShipmentsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentsRelatedByRecipientId
     */
    private Criteria lastShipmentsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentsRelatedByRecipientId() throws TorqueException
    {
              if (collShipmentsRelatedByRecipientId == null)
        {
            collShipmentsRelatedByRecipientId = getShipmentsRelatedByRecipientId(new Criteria(10));
        }
        return collShipmentsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId() );
                        collShipmentsRelatedByRecipientId = ShipmentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collShipmentsRelatedByRecipientId = ShipmentPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentsRelatedByRecipientIdCriteria = criteria;

        return collShipmentsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collShipmentsRelatedByRecipientId == null)
        {
            collShipmentsRelatedByRecipientId = getShipmentsRelatedByRecipientId(new Criteria(10), con);
        }
        return collShipmentsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                         collShipmentsRelatedByRecipientId = ShipmentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collShipmentsRelatedByRecipientId = ShipmentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentsRelatedByRecipientIdCriteria = criteria;

         return collShipmentsRelatedByRecipientId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentsRelatedByRecipientIdCriteria = criteria;

        return collShipmentsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentsRelatedByRecipientIdCriteria = criteria;

        return collShipmentsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentsRelatedByRecipientIdCriteria = criteria;

        return collShipmentsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentsRelatedByRecipientIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentsRelatedByRecipientId = ShipmentPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastShipmentsRelatedByRecipientIdCriteria = criteria;

        return collShipmentsRelatedByRecipientId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collPrintSubscriptionsRelatedByCustomerId
     */
    protected List collPrintSubscriptionsRelatedByCustomerId;

    /**
     * Temporary storage of collPrintSubscriptionsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPrintSubscriptionsRelatedByCustomerId()
    {
        if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a PrintSubscription object to this object
     * through the PrintSubscription foreign key attribute
     *
     * @param l PrintSubscription
     * @throws TorqueException
     */
    public void addPrintSubscriptionRelatedByCustomerId(PrintSubscription l) throws TorqueException
    {
        getPrintSubscriptionsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collPrintSubscriptionsRelatedByCustomerId
     */
    private Criteria lastPrintSubscriptionsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptionsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptionsRelatedByCustomerId() throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            collPrintSubscriptionsRelatedByCustomerId = getPrintSubscriptionsRelatedByCustomerId(new Criteria(10));
        }
        return collPrintSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptionsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId() );
                        collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptionsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptionsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            collPrintSubscriptionsRelatedByCustomerId = getPrintSubscriptionsRelatedByCustomerId(new Criteria(10), con);
        }
        return collPrintSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptionsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                         collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

         return collPrintSubscriptionsRelatedByCustomerId;
           }

                                                
              
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByCustomerIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByCustomerIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByCustomerId = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collPrintSubscriptionsRelatedByRecipientId
     */
    protected List collPrintSubscriptionsRelatedByRecipientId;

    /**
     * Temporary storage of collPrintSubscriptionsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPrintSubscriptionsRelatedByRecipientId()
    {
        if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a PrintSubscription object to this object
     * through the PrintSubscription foreign key attribute
     *
     * @param l PrintSubscription
     * @throws TorqueException
     */
    public void addPrintSubscriptionRelatedByRecipientId(PrintSubscription l) throws TorqueException
    {
        getPrintSubscriptionsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collPrintSubscriptionsRelatedByRecipientId
     */
    private Criteria lastPrintSubscriptionsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptionsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptionsRelatedByRecipientId() throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            collPrintSubscriptionsRelatedByRecipientId = getPrintSubscriptionsRelatedByRecipientId(new Criteria(10));
        }
        return collPrintSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPrintSubscriptionsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId() );
                        collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPrintSubscriptionsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptionsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            collPrintSubscriptionsRelatedByRecipientId = getPrintSubscriptionsRelatedByRecipientId(new Criteria(10), con);
        }
        return collPrintSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPrintSubscriptionsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                         collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

         return collPrintSubscriptionsRelatedByRecipientId;
           }

                                                
              
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByRecipientIdJoinCarrier(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinCarrier(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByRecipientIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PrintSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPrintSubscriptionsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPrintSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collPrintSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PrintSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastPrintSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collPrintSubscriptionsRelatedByRecipientId = PrintSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPrintSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collPrintSubscriptionsRelatedByRecipientId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collOnlineSubscriptionsRelatedByCustomerId
     */
    protected List collOnlineSubscriptionsRelatedByCustomerId;

    /**
     * Temporary storage of collOnlineSubscriptionsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOnlineSubscriptionsRelatedByCustomerId()
    {
        if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a OnlineSubscription object to this object
     * through the OnlineSubscription foreign key attribute
     *
     * @param l OnlineSubscription
     * @throws TorqueException
     */
    public void addOnlineSubscriptionRelatedByCustomerId(OnlineSubscription l) throws TorqueException
    {
        getOnlineSubscriptionsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collOnlineSubscriptionsRelatedByCustomerId
     */
    private Criteria lastOnlineSubscriptionsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptionsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptionsRelatedByCustomerId() throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            collOnlineSubscriptionsRelatedByCustomerId = getOnlineSubscriptionsRelatedByCustomerId(new Criteria(10));
        }
        return collOnlineSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptionsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId() );
                        collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptionsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptionsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            collOnlineSubscriptionsRelatedByCustomerId = getOnlineSubscriptionsRelatedByCustomerId(new Criteria(10), con);
        }
        return collOnlineSubscriptionsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptionsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                         collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

         return collOnlineSubscriptionsRelatedByCustomerId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByCustomerIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByCustomerId = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByCustomerIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collOnlineSubscriptionsRelatedByRecipientId
     */
    protected List collOnlineSubscriptionsRelatedByRecipientId;

    /**
     * Temporary storage of collOnlineSubscriptionsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOnlineSubscriptionsRelatedByRecipientId()
    {
        if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a OnlineSubscription object to this object
     * through the OnlineSubscription foreign key attribute
     *
     * @param l OnlineSubscription
     * @throws TorqueException
     */
    public void addOnlineSubscriptionRelatedByRecipientId(OnlineSubscription l) throws TorqueException
    {
        getOnlineSubscriptionsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collOnlineSubscriptionsRelatedByRecipientId
     */
    private Criteria lastOnlineSubscriptionsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptionsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptionsRelatedByRecipientId() throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            collOnlineSubscriptionsRelatedByRecipientId = getOnlineSubscriptionsRelatedByRecipientId(new Criteria(10));
        }
        return collOnlineSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOnlineSubscriptionsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId() );
                        collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelect(criteria);
                }
            }
        }
        lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOnlineSubscriptionsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptionsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            collOnlineSubscriptionsRelatedByRecipientId = getOnlineSubscriptionsRelatedByRecipientId(new Criteria(10), con);
        }
        return collOnlineSubscriptionsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOnlineSubscriptionsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                         collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

         return collOnlineSubscriptionsRelatedByRecipientId;
           }

                                          
              
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinProject(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByRecipientIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OnlineSubscriptionsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOnlineSubscriptionsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collOnlineSubscriptionsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collOnlineSubscriptionsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                              collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OnlineSubscriptionPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastOnlineSubscriptionsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collOnlineSubscriptionsRelatedByRecipientId = OnlineSubscriptionPeer.doSelectJoinSorder(criteria);
            }
        }
        lastOnlineSubscriptionsRelatedByRecipientIdCriteria = criteria;

        return collOnlineSubscriptionsRelatedByRecipientId;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collInboxEvents
     */
    protected List collInboxEvents;

    /**
     * Temporary storage of collInboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initInboxEvents()
    {
        if (collInboxEvents == null)
        {
            collInboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a InboxEvent object to this object
     * through the InboxEvent foreign key attribute
     *
     * @param l InboxEvent
     * @throws TorqueException
     */
    public void addInboxEvent(InboxEvent l) throws TorqueException
    {
        getInboxEvents().add(l);
        l.setCustomer((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collInboxEvents
     */
    private Criteria lastInboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getInboxEvents() throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10));
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getInboxEvents(Criteria criteria) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId() );
                        collInboxEvents = InboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastInboxEventsCriteria.equals(criteria))
                {
                    collInboxEvents = InboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getInboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Connection con) throws TorqueException
    {
              if (collInboxEvents == null)
        {
            collInboxEvents = getInboxEvents(new Criteria(10), con);
        }
        return collInboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related InboxEvents from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getInboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                         collInboxEvents = InboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastInboxEventsCriteria.equals(criteria))
                 {
                     collInboxEvents = InboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastInboxEventsCriteria = criteria;

         return collInboxEvents;
           }

                              
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getInboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getInboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related InboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getInboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collInboxEvents == null)
        {
            if (isNew())
            {
               collInboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(InboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastInboxEventsCriteria.equals(criteria))
            {
                collInboxEvents = InboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastInboxEventsCriteria = criteria;

        return collInboxEvents;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collOutboxEvents
     */
    protected List collOutboxEvents;

    /**
     * Temporary storage of collOutboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initOutboxEvents()
    {
        if (collOutboxEvents == null)
        {
            collOutboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a OutboxEvent object to this object
     * through the OutboxEvent foreign key attribute
     *
     * @param l OutboxEvent
     * @throws TorqueException
     */
    public void addOutboxEvent(OutboxEvent l) throws TorqueException
    {
        getOutboxEvents().add(l);
        l.setCustomer((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collOutboxEvents
     */
    private Criteria lastOutboxEventsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getOutboxEvents() throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10));
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getOutboxEvents(Criteria criteria) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                        criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId() );
                        collOutboxEvents = OutboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastOutboxEventsCriteria.equals(criteria))
                {
                    collOutboxEvents = OutboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getOutboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Connection con) throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            collOutboxEvents = getOutboxEvents(new Criteria(10), con);
        }
        return collOutboxEvents;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getOutboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                         criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                         collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastOutboxEventsCriteria.equals(criteria))
                 {
                     collOutboxEvents = OutboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastOutboxEventsCriteria = criteria;

         return collOutboxEvents;
           }

                              
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOutboxEventsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOutboxEventsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProject(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related OutboxEvents from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getOutboxEventsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collOutboxEvents == null)
        {
            if (isNew())
            {
               collOutboxEvents = new ArrayList();
            }
            else
            {
                              criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                              collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(OutboxEventPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastOutboxEventsCriteria.equals(criteria))
            {
                collOutboxEvents = OutboxEventPeer.doSelectJoinProduct(criteria);
            }
        }
        lastOutboxEventsCriteria = criteria;

        return collOutboxEvents;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collSorderItemsRelatedByCustomerId
     */
    protected List collSorderItemsRelatedByCustomerId;

    /**
     * Temporary storage of collSorderItemsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorderItemsRelatedByCustomerId()
    {
        if (collSorderItemsRelatedByCustomerId == null)
        {
            collSorderItemsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a SorderItem object to this object
     * through the SorderItem foreign key attribute
     *
     * @param l SorderItem
     * @throws TorqueException
     */
    public void addSorderItemRelatedByCustomerId(SorderItem l) throws TorqueException
    {
        getSorderItemsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collSorderItemsRelatedByCustomerId
     */
    private Criteria lastSorderItemsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItemsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorderItemsRelatedByCustomerId() throws TorqueException
    {
              if (collSorderItemsRelatedByCustomerId == null)
        {
            collSorderItemsRelatedByCustomerId = getSorderItemsRelatedByCustomerId(new Criteria(10));
        }
        return collSorderItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorderItemsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId() );
                        collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItemsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItemsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collSorderItemsRelatedByCustomerId == null)
        {
            collSorderItemsRelatedByCustomerId = getSorderItemsRelatedByCustomerId(new Criteria(10), con);
        }
        return collSorderItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItemsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                         collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSorderItemsRelatedByCustomerIdCriteria = criteria;

         return collSorderItemsRelatedByCustomerId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                              collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByCustomerIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                              collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                              collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                              collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByCustomerIdJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                              collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByCustomerId = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSorderItemsRelatedByCustomerIdCriteria = criteria;

        return collSorderItemsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collSorderItemsRelatedByRecipientId
     */
    protected List collSorderItemsRelatedByRecipientId;

    /**
     * Temporary storage of collSorderItemsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initSorderItemsRelatedByRecipientId()
    {
        if (collSorderItemsRelatedByRecipientId == null)
        {
            collSorderItemsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a SorderItem object to this object
     * through the SorderItem foreign key attribute
     *
     * @param l SorderItem
     * @throws TorqueException
     */
    public void addSorderItemRelatedByRecipientId(SorderItem l) throws TorqueException
    {
        getSorderItemsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collSorderItemsRelatedByRecipientId
     */
    private Criteria lastSorderItemsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItemsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getSorderItemsRelatedByRecipientId() throws TorqueException
    {
              if (collSorderItemsRelatedByRecipientId == null)
        {
            collSorderItemsRelatedByRecipientId = getSorderItemsRelatedByRecipientId(new Criteria(10));
        }
        return collSorderItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getSorderItemsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId() );
                        collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getSorderItemsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItemsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collSorderItemsRelatedByRecipientId == null)
        {
            collSorderItemsRelatedByRecipientId = getSorderItemsRelatedByRecipientId(new Criteria(10), con);
        }
        return collSorderItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getSorderItemsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                         collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastSorderItemsRelatedByRecipientIdCriteria = criteria;

         return collSorderItemsRelatedByRecipientId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                              collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByRecipientIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                              collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                              collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                              collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related SorderItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getSorderItemsRelatedByRecipientIdJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collSorderItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collSorderItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                              collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(SorderItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastSorderItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collSorderItemsRelatedByRecipientId = SorderItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastSorderItemsRelatedByRecipientIdCriteria = criteria;

        return collSorderItemsRelatedByRecipientId;
                }
                            


                          
            
          /**
     * Collection to store aggregation of collPaymentItems
     */
    protected List collPaymentItems;

    /**
     * Temporary storage of collPaymentItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initPaymentItems()
    {
        if (collPaymentItems == null)
        {
            collPaymentItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a PaymentItem object to this object
     * through the PaymentItem foreign key attribute
     *
     * @param l PaymentItem
     * @throws TorqueException
     */
    public void addPaymentItem(PaymentItem l) throws TorqueException
    {
        getPaymentItems().add(l);
        l.setCustomer((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collPaymentItems
     */
    private Criteria lastPaymentItemsCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getPaymentItems() throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10));
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getPaymentItems(Criteria criteria) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId() );
                        collPaymentItems = PaymentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastPaymentItemsCriteria.equals(criteria))
                {
                    collPaymentItems = PaymentItemPeer.doSelect(criteria);
                }
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getPaymentItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Connection con) throws TorqueException
    {
              if (collPaymentItems == null)
        {
            collPaymentItems = getPaymentItems(new Criteria(10), con);
        }
        return collPaymentItems;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getPaymentItems(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                         criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                         collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastPaymentItemsCriteria.equals(criteria))
                 {
                     collPaymentItems = PaymentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastPaymentItemsCriteria = criteria;

         return collPaymentItems;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinPayment(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinPayment(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinCurrency(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCurrency(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinCustomer(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinCustomer(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related PaymentItems from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getPaymentItemsJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collPaymentItems == null)
        {
            if (isNew())
            {
               collPaymentItems = new ArrayList();
            }
            else
            {
                              criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                              collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(PaymentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastPaymentItemsCriteria.equals(criteria))
            {
                collPaymentItems = PaymentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastPaymentItemsCriteria = criteria;

        return collPaymentItems;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collShipmentItemsRelatedByCustomerId
     */
    protected List collShipmentItemsRelatedByCustomerId;

    /**
     * Temporary storage of collShipmentItemsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentItemsRelatedByCustomerId()
    {
        if (collShipmentItemsRelatedByCustomerId == null)
        {
            collShipmentItemsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a ShipmentItem object to this object
     * through the ShipmentItem foreign key attribute
     *
     * @param l ShipmentItem
     * @throws TorqueException
     */
    public void addShipmentItemRelatedByCustomerId(ShipmentItem l) throws TorqueException
    {
        getShipmentItemsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentItemsRelatedByCustomerId
     */
    private Criteria lastShipmentItemsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItemsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentItemsRelatedByCustomerId() throws TorqueException
    {
              if (collShipmentItemsRelatedByCustomerId == null)
        {
            collShipmentItemsRelatedByCustomerId = getShipmentItemsRelatedByCustomerId(new Criteria(10));
        }
        return collShipmentItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentItemsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId() );
                        collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItemsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItemsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collShipmentItemsRelatedByCustomerId == null)
        {
            collShipmentItemsRelatedByCustomerId = getShipmentItemsRelatedByCustomerId(new Criteria(10), con);
        }
        return collShipmentItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItemsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                         collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

         return collShipmentItemsRelatedByCustomerId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByCustomerIdJoinShipment(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByCustomerIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                              collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByCustomerId = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentItemsRelatedByCustomerIdCriteria = criteria;

        return collShipmentItemsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collShipmentItemsRelatedByRecipientId
     */
    protected List collShipmentItemsRelatedByRecipientId;

    /**
     * Temporary storage of collShipmentItemsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initShipmentItemsRelatedByRecipientId()
    {
        if (collShipmentItemsRelatedByRecipientId == null)
        {
            collShipmentItemsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a ShipmentItem object to this object
     * through the ShipmentItem foreign key attribute
     *
     * @param l ShipmentItem
     * @throws TorqueException
     */
    public void addShipmentItemRelatedByRecipientId(ShipmentItem l) throws TorqueException
    {
        getShipmentItemsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collShipmentItemsRelatedByRecipientId
     */
    private Criteria lastShipmentItemsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItemsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getShipmentItemsRelatedByRecipientId() throws TorqueException
    {
              if (collShipmentItemsRelatedByRecipientId == null)
        {
            collShipmentItemsRelatedByRecipientId = getShipmentItemsRelatedByRecipientId(new Criteria(10));
        }
        return collShipmentItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getShipmentItemsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId() );
                        collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelect(criteria);
                }
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getShipmentItemsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItemsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collShipmentItemsRelatedByRecipientId == null)
        {
            collShipmentItemsRelatedByRecipientId = getShipmentItemsRelatedByRecipientId(new Criteria(10), con);
        }
        return collShipmentItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getShipmentItemsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                         collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

         return collShipmentItemsRelatedByRecipientId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByRecipientIdJoinShipment(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinShipment(criteria);
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByRecipientIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ShipmentItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getShipmentItemsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collShipmentItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collShipmentItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                              collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ShipmentItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastShipmentItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collShipmentItemsRelatedByRecipientId = ShipmentItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastShipmentItemsRelatedByRecipientIdCriteria = criteria;

        return collShipmentItemsRelatedByRecipientId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collServiceItemsRelatedByCustomerId
     */
    protected List collServiceItemsRelatedByCustomerId;

    /**
     * Temporary storage of collServiceItemsRelatedByCustomerId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServiceItemsRelatedByCustomerId()
    {
        if (collServiceItemsRelatedByCustomerId == null)
        {
            collServiceItemsRelatedByCustomerId = new ArrayList();
        }
    }

    /**
     * Method called to associate a ServiceItem object to this object
     * through the ServiceItem foreign key attribute
     *
     * @param l ServiceItem
     * @throws TorqueException
     */
    public void addServiceItemRelatedByCustomerId(ServiceItem l) throws TorqueException
    {
        getServiceItemsRelatedByCustomerId().add(l);
        l.setCustomerRelatedByCustomerId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collServiceItemsRelatedByCustomerId
     */
    private Criteria lastServiceItemsRelatedByCustomerIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItemsRelatedByCustomerId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServiceItemsRelatedByCustomerId() throws TorqueException
    {
              if (collServiceItemsRelatedByCustomerId == null)
        {
            collServiceItemsRelatedByCustomerId = getServiceItemsRelatedByCustomerId(new Criteria(10));
        }
        return collServiceItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServiceItemsRelatedByCustomerId(Criteria criteria) throws TorqueException
    {
              if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId() );
                        collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                            if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
                {
                    collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelect(criteria);
                }
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItemsRelatedByCustomerId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItemsRelatedByCustomerId(Connection con) throws TorqueException
    {
              if (collServiceItemsRelatedByCustomerId == null)
        {
            collServiceItemsRelatedByCustomerId = getServiceItemsRelatedByCustomerId(new Criteria(10), con);
        }
        return collServiceItemsRelatedByCustomerId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItemsRelatedByCustomerId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                         criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                         collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                             if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
                 {
                     collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastServiceItemsRelatedByCustomerIdCriteria = criteria;

         return collServiceItemsRelatedByCustomerId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByCustomerIdJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                              collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByCustomerIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                              collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByCustomerIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                              collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByCustomerIdJoinCustomerRelatedByRecipientId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                              collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinCustomerRelatedByRecipientId(criteria);
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByCustomerId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByCustomerIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByCustomerId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByCustomerId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                              collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.CUSTOMER_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByCustomerIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByCustomerId = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastServiceItemsRelatedByCustomerIdCriteria = criteria;

        return collServiceItemsRelatedByCustomerId;
                }
                            


                                  
            
          /**
     * Collection to store aggregation of collServiceItemsRelatedByRecipientId
     */
    protected List collServiceItemsRelatedByRecipientId;

    /**
     * Temporary storage of collServiceItemsRelatedByRecipientId to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initServiceItemsRelatedByRecipientId()
    {
        if (collServiceItemsRelatedByRecipientId == null)
        {
            collServiceItemsRelatedByRecipientId = new ArrayList();
        }
    }

    /**
     * Method called to associate a ServiceItem object to this object
     * through the ServiceItem foreign key attribute
     *
     * @param l ServiceItem
     * @throws TorqueException
     */
    public void addServiceItemRelatedByRecipientId(ServiceItem l) throws TorqueException
    {
        getServiceItemsRelatedByRecipientId().add(l);
        l.setCustomerRelatedByRecipientId((Customer) this);
    }

    /**
     * The criteria used to select the current contents of collServiceItemsRelatedByRecipientId
     */
    private Criteria lastServiceItemsRelatedByRecipientIdCriteria = null;
      
    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItemsRelatedByRecipientId(new Criteria())
     *
     * @throws TorqueException
     */
    public List getServiceItemsRelatedByRecipientId() throws TorqueException
    {
              if (collServiceItemsRelatedByRecipientId == null)
        {
            collServiceItemsRelatedByRecipientId = getServiceItemsRelatedByRecipientId(new Criteria(10));
        }
        return collServiceItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getServiceItemsRelatedByRecipientId(Criteria criteria) throws TorqueException
    {
              if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId() );
                        collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                            criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                            if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
                {
                    collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelect(criteria);
                }
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getServiceItemsRelatedByRecipientId(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItemsRelatedByRecipientId(Connection con) throws TorqueException
    {
              if (collServiceItemsRelatedByRecipientId == null)
        {
            collServiceItemsRelatedByRecipientId = getServiceItemsRelatedByRecipientId(new Criteria(10), con);
        }
        return collServiceItemsRelatedByRecipientId;
          }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     * If this Customer is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getServiceItemsRelatedByRecipientId(Criteria criteria, Connection con)
            throws TorqueException
    {
              if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                         criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                         collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                             if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
                 {
                     collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastServiceItemsRelatedByRecipientIdCriteria = criteria;

         return collServiceItemsRelatedByRecipientId;
           }

                                                
              
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByRecipientIdJoinService(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                              collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinService(criteria);
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByRecipientIdJoinSorder(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                              collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinSorder(criteria);
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
                }
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByRecipientIdJoinProduct(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                              collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinProduct(criteria);
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByRecipientIdJoinCustomerRelatedByCustomerId(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                              collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinCustomerRelatedByCustomerId(criteria);
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
                }
                  
                    
                              
                                            
                                                                          
                                        
                    
                                            
                  
                    
                    
                                
                                                              
                                        
                    
                                
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Customer is new, it will return
     * an empty collection; or if this Customer has previously
     * been saved, it will retrieve related ServiceItemsRelatedByRecipientId from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in Customer.
     */
    protected List getServiceItemsRelatedByRecipientIdJoinProject(Criteria criteria)
        throws TorqueException
    {
                    if (collServiceItemsRelatedByRecipientId == null)
        {
            if (isNew())
            {
               collServiceItemsRelatedByRecipientId = new ArrayList();
            }
            else
            {
                              criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                              collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            
                        criteria.add(ServiceItemPeer.RECIPIENT_ID, getCustomerId());
                                    if (!lastServiceItemsRelatedByRecipientIdCriteria.equals(criteria))
            {
                collServiceItemsRelatedByRecipientId = ServiceItemPeer.doSelectJoinProject(criteria);
            }
        }
        lastServiceItemsRelatedByRecipientIdCriteria = criteria;

        return collServiceItemsRelatedByRecipientId;
                }
                            


          
    private static List fieldNames = null;

    /**
     * Generate a list of field names.
     *
     * @return a list of field names
     */
    public static synchronized List getFieldNames()
    {
        if (fieldNames == null)
        {
            fieldNames = new ArrayList();
              fieldNames.add("CustomerId");
              fieldNames.add("CustomerCode");
              fieldNames.add("Status");
              fieldNames.add("Priority");
              fieldNames.add("CustomerType");
              fieldNames.add("CustomerCatId");
              fieldNames.add("CustomerName1");
              fieldNames.add("CustomerName2");
              fieldNames.add("CustomerDisplay");
              fieldNames.add("Dear");
              fieldNames.add("Address1");
              fieldNames.add("Address2");
              fieldNames.add("City");
              fieldNames.add("Zip");
              fieldNames.add("State");
              fieldNames.add("CountryId");
              fieldNames.add("RegionId");
              fieldNames.add("Phone1");
              fieldNames.add("Phone2");
              fieldNames.add("Fax");
              fieldNames.add("Email");
              fieldNames.add("EmailFormat");
              fieldNames.add("SendNews");
              fieldNames.add("WebUrl");
              fieldNames.add("LanguageId");
              fieldNames.add("Gender");
              fieldNames.add("EducationCatId");
              fieldNames.add("HouseholdCatId");
              fieldNames.add("Custom1");
              fieldNames.add("Custom2");
              fieldNames.add("Custom3");
              fieldNames.add("Custom4");
              fieldNames.add("Custom5");
              fieldNames.add("Custom6");
              fieldNames.add("Notes");
              fieldNames.add("Created");
              fieldNames.add("Modified");
              fieldNames.add("CreatedBy");
              fieldNames.add("ModifiedBy");
              fieldNames = Collections.unmodifiableList(fieldNames);
        }
        return fieldNames;
    }

    /**
     * Retrieves a field from the object by name passed in as a String.
     *
     * @param name field name
     * @return value
     */
    public Object getByName(String name)
    {
          if (name.equals("CustomerId"))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals("CustomerCode"))
        {
                return getCustomerCode();
            }
          if (name.equals("Status"))
        {
                return new Integer(getStatus());
            }
          if (name.equals("Priority"))
        {
                return new Integer(getPriority());
            }
          if (name.equals("CustomerType"))
        {
                return new Integer(getCustomerType());
            }
          if (name.equals("CustomerCatId"))
        {
                return new Integer(getCustomerCatId());
            }
          if (name.equals("CustomerName1"))
        {
                return getCustomerName1();
            }
          if (name.equals("CustomerName2"))
        {
                return getCustomerName2();
            }
          if (name.equals("CustomerDisplay"))
        {
                return getCustomerDisplay();
            }
          if (name.equals("Dear"))
        {
                return getDear();
            }
          if (name.equals("Address1"))
        {
                return getAddress1();
            }
          if (name.equals("Address2"))
        {
                return getAddress2();
            }
          if (name.equals("City"))
        {
                return getCity();
            }
          if (name.equals("Zip"))
        {
                return getZip();
            }
          if (name.equals("State"))
        {
                return getState();
            }
          if (name.equals("CountryId"))
        {
                return new Integer(getCountryId());
            }
          if (name.equals("RegionId"))
        {
                return new Integer(getRegionId());
            }
          if (name.equals("Phone1"))
        {
                return getPhone1();
            }
          if (name.equals("Phone2"))
        {
                return getPhone2();
            }
          if (name.equals("Fax"))
        {
                return getFax();
            }
          if (name.equals("Email"))
        {
                return getEmail();
            }
          if (name.equals("EmailFormat"))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals("SendNews"))
        {
                return new Integer(getSendNews());
            }
          if (name.equals("WebUrl"))
        {
                return getWebUrl();
            }
          if (name.equals("LanguageId"))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals("Gender"))
        {
                return new Integer(getGender());
            }
          if (name.equals("EducationCatId"))
        {
                return new Integer(getEducationCatId());
            }
          if (name.equals("HouseholdCatId"))
        {
                return new Integer(getHouseholdCatId());
            }
          if (name.equals("Custom1"))
        {
                return getCustom1();
            }
          if (name.equals("Custom2"))
        {
                return getCustom2();
            }
          if (name.equals("Custom3"))
        {
                return getCustom3();
            }
          if (name.equals("Custom4"))
        {
                return getCustom4();
            }
          if (name.equals("Custom5"))
        {
                return getCustom5();
            }
          if (name.equals("Custom6"))
        {
                return getCustom6();
            }
          if (name.equals("Notes"))
        {
                return getNotes();
            }
          if (name.equals("Created"))
        {
                return getCreated();
            }
          if (name.equals("Modified"))
        {
                return getModified();
            }
          if (name.equals("CreatedBy"))
        {
                return getCreatedBy();
            }
          if (name.equals("ModifiedBy"))
        {
                return getModifiedBy();
            }
          return null;
    }
    
    /**
     * Retrieves a field from the object by name passed in
     * as a String.  The String must be one of the static
     * Strings defined in this Class' Peer.
     *
     * @param name peer name
     * @return value
     */
    public Object getByPeerName(String name)
    {
          if (name.equals(CustomerPeer.CUSTOMER_ID))
        {
                return new Integer(getCustomerId());
            }
          if (name.equals(CustomerPeer.CUSTOMER_CODE))
        {
                return getCustomerCode();
            }
          if (name.equals(CustomerPeer.STATUS))
        {
                return new Integer(getStatus());
            }
          if (name.equals(CustomerPeer.PRIORITY))
        {
                return new Integer(getPriority());
            }
          if (name.equals(CustomerPeer.CUSTOMER_TYPE))
        {
                return new Integer(getCustomerType());
            }
          if (name.equals(CustomerPeer.CUSTOMER_CAT_ID))
        {
                return new Integer(getCustomerCatId());
            }
          if (name.equals(CustomerPeer.CUSTOMER_NAME_1))
        {
                return getCustomerName1();
            }
          if (name.equals(CustomerPeer.CUSTOMER_NAME_2))
        {
                return getCustomerName2();
            }
          if (name.equals(CustomerPeer.CUSTOMER_DISPLAY))
        {
                return getCustomerDisplay();
            }
          if (name.equals(CustomerPeer.DEAR))
        {
                return getDear();
            }
          if (name.equals(CustomerPeer.ADDRESS_1))
        {
                return getAddress1();
            }
          if (name.equals(CustomerPeer.ADDRESS_2))
        {
                return getAddress2();
            }
          if (name.equals(CustomerPeer.CITY))
        {
                return getCity();
            }
          if (name.equals(CustomerPeer.ZIP))
        {
                return getZip();
            }
          if (name.equals(CustomerPeer.STATE))
        {
                return getState();
            }
          if (name.equals(CustomerPeer.COUNTRY_ID))
        {
                return new Integer(getCountryId());
            }
          if (name.equals(CustomerPeer.REGION_ID))
        {
                return new Integer(getRegionId());
            }
          if (name.equals(CustomerPeer.PHONE_1))
        {
                return getPhone1();
            }
          if (name.equals(CustomerPeer.PHONE_2))
        {
                return getPhone2();
            }
          if (name.equals(CustomerPeer.FAX))
        {
                return getFax();
            }
          if (name.equals(CustomerPeer.EMAIL))
        {
                return getEmail();
            }
          if (name.equals(CustomerPeer.EMAIL_FORMAT))
        {
                return new Integer(getEmailFormat());
            }
          if (name.equals(CustomerPeer.SEND_NEWS))
        {
                return new Integer(getSendNews());
            }
          if (name.equals(CustomerPeer.WEB_URL))
        {
                return getWebUrl();
            }
          if (name.equals(CustomerPeer.LANGUAGE_ID))
        {
                return new Integer(getLanguageId());
            }
          if (name.equals(CustomerPeer.GENDER))
        {
                return new Integer(getGender());
            }
          if (name.equals(CustomerPeer.EDUCATION_CAT_ID))
        {
                return new Integer(getEducationCatId());
            }
          if (name.equals(CustomerPeer.HOUSEHOLD_CAT_ID))
        {
                return new Integer(getHouseholdCatId());
            }
          if (name.equals(CustomerPeer.CUSTOM_1))
        {
                return getCustom1();
            }
          if (name.equals(CustomerPeer.CUSTOM_2))
        {
                return getCustom2();
            }
          if (name.equals(CustomerPeer.CUSTOM_3))
        {
                return getCustom3();
            }
          if (name.equals(CustomerPeer.CUSTOM_4))
        {
                return getCustom4();
            }
          if (name.equals(CustomerPeer.CUSTOM_5))
        {
                return getCustom5();
            }
          if (name.equals(CustomerPeer.CUSTOM_6))
        {
                return getCustom6();
            }
          if (name.equals(CustomerPeer.NOTES))
        {
                return getNotes();
            }
          if (name.equals(CustomerPeer.CREATED))
        {
                return getCreated();
            }
          if (name.equals(CustomerPeer.MODIFIED))
        {
                return getModified();
            }
          if (name.equals(CustomerPeer.CREATED_BY))
        {
                return getCreatedBy();
            }
          if (name.equals(CustomerPeer.MODIFIED_BY))
        {
                return getModifiedBy();
            }
          return null;
    }

    /**
     * Retrieves a field from the object by Position as specified
     * in the xml schema.  Zero-based.
     *
     * @param pos position in xml schema
     * @return value
     */
    public Object getByPosition(int pos)
    {
            if (pos == 0)
        {
                return new Integer(getCustomerId());
            }
              if (pos == 1)
        {
                return getCustomerCode();
            }
              if (pos == 2)
        {
                return new Integer(getStatus());
            }
              if (pos == 3)
        {
                return new Integer(getPriority());
            }
              if (pos == 4)
        {
                return new Integer(getCustomerType());
            }
              if (pos == 5)
        {
                return new Integer(getCustomerCatId());
            }
              if (pos == 6)
        {
                return getCustomerName1();
            }
              if (pos == 7)
        {
                return getCustomerName2();
            }
              if (pos == 8)
        {
                return getCustomerDisplay();
            }
              if (pos == 9)
        {
                return getDear();
            }
              if (pos == 10)
        {
                return getAddress1();
            }
              if (pos == 11)
        {
                return getAddress2();
            }
              if (pos == 12)
        {
                return getCity();
            }
              if (pos == 13)
        {
                return getZip();
            }
              if (pos == 14)
        {
                return getState();
            }
              if (pos == 15)
        {
                return new Integer(getCountryId());
            }
              if (pos == 16)
        {
                return new Integer(getRegionId());
            }
              if (pos == 17)
        {
                return getPhone1();
            }
              if (pos == 18)
        {
                return getPhone2();
            }
              if (pos == 19)
        {
                return getFax();
            }
              if (pos == 20)
        {
                return getEmail();
            }
              if (pos == 21)
        {
                return new Integer(getEmailFormat());
            }
              if (pos == 22)
        {
                return new Integer(getSendNews());
            }
              if (pos == 23)
        {
                return getWebUrl();
            }
              if (pos == 24)
        {
                return new Integer(getLanguageId());
            }
              if (pos == 25)
        {
                return new Integer(getGender());
            }
              if (pos == 26)
        {
                return new Integer(getEducationCatId());
            }
              if (pos == 27)
        {
                return new Integer(getHouseholdCatId());
            }
              if (pos == 28)
        {
                return getCustom1();
            }
              if (pos == 29)
        {
                return getCustom2();
            }
              if (pos == 30)
        {
                return getCustom3();
            }
              if (pos == 31)
        {
                return getCustom4();
            }
              if (pos == 32)
        {
                return getCustom5();
            }
              if (pos == 33)
        {
                return getCustom6();
            }
              if (pos == 34)
        {
                return getNotes();
            }
              if (pos == 35)
        {
                return getCreated();
            }
              if (pos == 36)
        {
                return getModified();
            }
              if (pos == 37)
        {
                return getCreatedBy();
            }
              if (pos == 38)
        {
                return getModifiedBy();
            }
              return null;
    }
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(CustomerPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    CustomerPeer.doInsert((Customer) this, con);
                    setNew(false);
                }
                else
                {
                    CustomerPeer.doUpdate((Customer) this, con);
                }
            }

                                                
                
                    if (collSordersRelatedByCustomerId != null)
            {
                for (int i = 0; i < collSordersRelatedByCustomerId.size(); i++)
                {
                    ((Sorder) collSordersRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collSordersRelatedByRecipientId != null)
            {
                for (int i = 0; i < collSordersRelatedByRecipientId.size(); i++)
                {
                    ((Sorder) collSordersRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPayments != null)
            {
                for (int i = 0; i < collPayments.size(); i++)
                {
                    ((Payment) collPayments.get(i)).save(con);
                }
            }
                                                            
                
                    if (collServicesRelatedByCustomerId != null)
            {
                for (int i = 0; i < collServicesRelatedByCustomerId.size(); i++)
                {
                    ((Service) collServicesRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collServicesRelatedByRecipientId != null)
            {
                for (int i = 0; i < collServicesRelatedByRecipientId.size(); i++)
                {
                    ((Service) collServicesRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collShipmentsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collShipmentsRelatedByCustomerId.size(); i++)
                {
                    ((Shipment) collShipmentsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collShipmentsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collShipmentsRelatedByRecipientId.size(); i++)
                {
                    ((Shipment) collShipmentsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collPrintSubscriptionsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collPrintSubscriptionsRelatedByCustomerId.size(); i++)
                {
                    ((PrintSubscription) collPrintSubscriptionsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collPrintSubscriptionsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collPrintSubscriptionsRelatedByRecipientId.size(); i++)
                {
                    ((PrintSubscription) collPrintSubscriptionsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collOnlineSubscriptionsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collOnlineSubscriptionsRelatedByCustomerId.size(); i++)
                {
                    ((OnlineSubscription) collOnlineSubscriptionsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collOnlineSubscriptionsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collOnlineSubscriptionsRelatedByRecipientId.size(); i++)
                {
                    ((OnlineSubscription) collOnlineSubscriptionsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                  
                
                    if (collInboxEvents != null)
            {
                for (int i = 0; i < collInboxEvents.size(); i++)
                {
                    ((InboxEvent) collInboxEvents.get(i)).save(con);
                }
            }
                                                  
                
                    if (collOutboxEvents != null)
            {
                for (int i = 0; i < collOutboxEvents.size(); i++)
                {
                    ((OutboxEvent) collOutboxEvents.get(i)).save(con);
                }
            }
                                                            
                
                    if (collSorderItemsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collSorderItemsRelatedByCustomerId.size(); i++)
                {
                    ((SorderItem) collSorderItemsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collSorderItemsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collSorderItemsRelatedByRecipientId.size(); i++)
                {
                    ((SorderItem) collSorderItemsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                  
                
                    if (collPaymentItems != null)
            {
                for (int i = 0; i < collPaymentItems.size(); i++)
                {
                    ((PaymentItem) collPaymentItems.get(i)).save(con);
                }
            }
                                                            
                
                    if (collShipmentItemsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collShipmentItemsRelatedByCustomerId.size(); i++)
                {
                    ((ShipmentItem) collShipmentItemsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collShipmentItemsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collShipmentItemsRelatedByRecipientId.size(); i++)
                {
                    ((ShipmentItem) collShipmentItemsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collServiceItemsRelatedByCustomerId != null)
            {
                for (int i = 0; i < collServiceItemsRelatedByCustomerId.size(); i++)
                {
                    ((ServiceItem) collServiceItemsRelatedByCustomerId.get(i)).save(con);
                }
            }
                                                            
                
                    if (collServiceItemsRelatedByRecipientId != null)
            {
                for (int i = 0; i < collServiceItemsRelatedByRecipientId.size(); i++)
                {
                    ((ServiceItem) collServiceItemsRelatedByRecipientId.get(i)).save(con);
                }
            }
                                  alreadyInSave = false;
        }
      }

                        
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param key customerId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setCustomerId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setCustomerId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getCustomerId());
      }
 
    /**
     * get an id that differentiates this object from others
     * of its class.
     */
    public String getQueryKey()
    {
        if (getPrimaryKey() == null)
        {
            return "";
        }
        else
        {
            return getPrimaryKey().toString();
        }
    }

    /**
     * set an id that differentiates this object from others
     * of its class.
     */
    public void setQueryKey(String key)
        throws TorqueException
    {
        setPrimaryKey(key);
    }

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public Customer copy() throws TorqueException
    {
        return copyInto(new Customer());
    }
  
    protected Customer copyInto(Customer copyObj) throws TorqueException
    {
          copyObj.setCustomerId(customerId);
          copyObj.setCustomerCode(customerCode);
          copyObj.setStatus(status);
          copyObj.setPriority(priority);
          copyObj.setCustomerType(customerType);
          copyObj.setCustomerCatId(customerCatId);
          copyObj.setCustomerName1(customerName1);
          copyObj.setCustomerName2(customerName2);
          copyObj.setCustomerDisplay(customerDisplay);
          copyObj.setDear(dear);
          copyObj.setAddress1(address1);
          copyObj.setAddress2(address2);
          copyObj.setCity(city);
          copyObj.setZip(zip);
          copyObj.setState(state);
          copyObj.setCountryId(countryId);
          copyObj.setRegionId(regionId);
          copyObj.setPhone1(phone1);
          copyObj.setPhone2(phone2);
          copyObj.setFax(fax);
          copyObj.setEmail(email);
          copyObj.setEmailFormat(emailFormat);
          copyObj.setSendNews(sendNews);
          copyObj.setWebUrl(webUrl);
          copyObj.setLanguageId(languageId);
          copyObj.setGender(gender);
          copyObj.setEducationCatId(educationCatId);
          copyObj.setHouseholdCatId(householdCatId);
          copyObj.setCustom1(custom1);
          copyObj.setCustom2(custom2);
          copyObj.setCustom3(custom3);
          copyObj.setCustom4(custom4);
          copyObj.setCustom5(custom5);
          copyObj.setCustom6(custom6);
          copyObj.setNotes(notes);
          copyObj.setCreated(created);
          copyObj.setModified(modified);
          copyObj.setCreatedBy(createdBy);
          copyObj.setModifiedBy(modifiedBy);
  
                            copyObj.setCustomerId( 0);
                                                                                                                                                                                                                                                
                                                
                            
        List v = getSordersRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorderRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getSordersRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            Sorder obj = (Sorder) v.get(i);
            copyObj.addSorderRelatedByRecipientId(obj.copy());
        }
                                                  
                            
        v = getPayments();
        for (int i = 0; i < v.size(); i++)
        {
            Payment obj = (Payment) v.get(i);
            copyObj.addPayment(obj.copy());
        }
                                                            
                            
        v = getServicesRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            Service obj = (Service) v.get(i);
            copyObj.addServiceRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getServicesRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            Service obj = (Service) v.get(i);
            copyObj.addServiceRelatedByRecipientId(obj.copy());
        }
                                                            
                            
        v = getShipmentsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            Shipment obj = (Shipment) v.get(i);
            copyObj.addShipmentRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getShipmentsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            Shipment obj = (Shipment) v.get(i);
            copyObj.addShipmentRelatedByRecipientId(obj.copy());
        }
                                                            
                            
        v = getPrintSubscriptionsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            PrintSubscription obj = (PrintSubscription) v.get(i);
            copyObj.addPrintSubscriptionRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getPrintSubscriptionsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            PrintSubscription obj = (PrintSubscription) v.get(i);
            copyObj.addPrintSubscriptionRelatedByRecipientId(obj.copy());
        }
                                                            
                            
        v = getOnlineSubscriptionsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            OnlineSubscription obj = (OnlineSubscription) v.get(i);
            copyObj.addOnlineSubscriptionRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getOnlineSubscriptionsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            OnlineSubscription obj = (OnlineSubscription) v.get(i);
            copyObj.addOnlineSubscriptionRelatedByRecipientId(obj.copy());
        }
                                                  
                            
        v = getInboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            InboxEvent obj = (InboxEvent) v.get(i);
            copyObj.addInboxEvent(obj.copy());
        }
                                                  
                            
        v = getOutboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            OutboxEvent obj = (OutboxEvent) v.get(i);
            copyObj.addOutboxEvent(obj.copy());
        }
                                                            
                            
        v = getSorderItemsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            SorderItem obj = (SorderItem) v.get(i);
            copyObj.addSorderItemRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getSorderItemsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            SorderItem obj = (SorderItem) v.get(i);
            copyObj.addSorderItemRelatedByRecipientId(obj.copy());
        }
                                                  
                            
        v = getPaymentItems();
        for (int i = 0; i < v.size(); i++)
        {
            PaymentItem obj = (PaymentItem) v.get(i);
            copyObj.addPaymentItem(obj.copy());
        }
                                                            
                            
        v = getShipmentItemsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            ShipmentItem obj = (ShipmentItem) v.get(i);
            copyObj.addShipmentItemRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getShipmentItemsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            ShipmentItem obj = (ShipmentItem) v.get(i);
            copyObj.addShipmentItemRelatedByRecipientId(obj.copy());
        }
                                                            
                            
        v = getServiceItemsRelatedByCustomerId();
        for (int i = 0; i < v.size(); i++)
        {
            ServiceItem obj = (ServiceItem) v.get(i);
            copyObj.addServiceItemRelatedByCustomerId(obj.copy());
        }
                                                            
                            
        v = getServiceItemsRelatedByRecipientId();
        for (int i = 0; i < v.size(); i++)
        {
            ServiceItem obj = (ServiceItem) v.get(i);
            copyObj.addServiceItemRelatedByRecipientId(obj.copy());
        }
                            return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public CustomerPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("Customer:\n");
        str.append("CustomerId = ")
               .append(getCustomerId())
             .append("\n");
        str.append("CustomerCode = ")
               .append(getCustomerCode())
             .append("\n");
        str.append("Status = ")
               .append(getStatus())
             .append("\n");
        str.append("Priority = ")
               .append(getPriority())
             .append("\n");
        str.append("CustomerType = ")
               .append(getCustomerType())
             .append("\n");
        str.append("CustomerCatId = ")
               .append(getCustomerCatId())
             .append("\n");
        str.append("CustomerName1 = ")
               .append(getCustomerName1())
             .append("\n");
        str.append("CustomerName2 = ")
               .append(getCustomerName2())
             .append("\n");
        str.append("CustomerDisplay = ")
               .append(getCustomerDisplay())
             .append("\n");
        str.append("Dear = ")
               .append(getDear())
             .append("\n");
        str.append("Address1 = ")
               .append(getAddress1())
             .append("\n");
        str.append("Address2 = ")
               .append(getAddress2())
             .append("\n");
        str.append("City = ")
               .append(getCity())
             .append("\n");
        str.append("Zip = ")
               .append(getZip())
             .append("\n");
        str.append("State = ")
               .append(getState())
             .append("\n");
        str.append("CountryId = ")
               .append(getCountryId())
             .append("\n");
        str.append("RegionId = ")
               .append(getRegionId())
             .append("\n");
        str.append("Phone1 = ")
               .append(getPhone1())
             .append("\n");
        str.append("Phone2 = ")
               .append(getPhone2())
             .append("\n");
        str.append("Fax = ")
               .append(getFax())
             .append("\n");
        str.append("Email = ")
               .append(getEmail())
             .append("\n");
        str.append("EmailFormat = ")
               .append(getEmailFormat())
             .append("\n");
        str.append("SendNews = ")
               .append(getSendNews())
             .append("\n");
        str.append("WebUrl = ")
               .append(getWebUrl())
             .append("\n");
        str.append("LanguageId = ")
               .append(getLanguageId())
             .append("\n");
        str.append("Gender = ")
               .append(getGender())
             .append("\n");
        str.append("EducationCatId = ")
               .append(getEducationCatId())
             .append("\n");
        str.append("HouseholdCatId = ")
               .append(getHouseholdCatId())
             .append("\n");
        str.append("Custom1 = ")
               .append(getCustom1())
             .append("\n");
        str.append("Custom2 = ")
               .append(getCustom2())
             .append("\n");
        str.append("Custom3 = ")
               .append(getCustom3())
             .append("\n");
        str.append("Custom4 = ")
               .append(getCustom4())
             .append("\n");
        str.append("Custom5 = ")
               .append(getCustom5())
             .append("\n");
        str.append("Custom6 = ")
               .append(getCustom6())
             .append("\n");
        str.append("Notes = ")
               .append(getNotes())
             .append("\n");
        str.append("Created = ")
               .append(getCreated())
             .append("\n");
        str.append("Modified = ")
               .append(getModified())
             .append("\n");
        str.append("CreatedBy = ")
               .append(getCreatedBy())
             .append("\n");
        str.append("ModifiedBy = ")
               .append(getModifiedBy())
             .append("\n");
        return(str.toString());
    }
}
