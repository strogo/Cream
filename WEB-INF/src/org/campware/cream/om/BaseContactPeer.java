package org.campware.cream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.NoRowsException;
import org.apache.torque.TooManyRowsException;
import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.campware.cream.om.map.*;


  
  
  
  
  
  
  
  
  
/**
 * This class was autogenerated by Torque on:
 *
 * [Fri Jan 26 03:28:50 CET 2007]
 *
 */
public abstract class BaseContactPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "cream";

     /** the table name for this class */
    public static final String TABLE_NAME = "CONTACT";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(ContactMapBuilder.CLASS_NAME);
    }

      /** the column name for the CONTACT_ID field */
    public static final String CONTACT_ID;
      /** the column name for the CONTACT_CODE field */
    public static final String CONTACT_CODE;
      /** the column name for the STATUS field */
    public static final String STATUS;
      /** the column name for the PRIORITY field */
    public static final String PRIORITY;
      /** the column name for the CUSTOMER_ID field */
    public static final String CUSTOMER_ID;
      /** the column name for the CONTACT_CAT_ID field */
    public static final String CONTACT_CAT_ID;
      /** the column name for the SALUTATION_ID field */
    public static final String SALUTATION_ID;
      /** the column name for the FIRST_NAME field */
    public static final String FIRST_NAME;
      /** the column name for the LAST_NAME field */
    public static final String LAST_NAME;
      /** the column name for the SUFFIX field */
    public static final String SUFFIX;
      /** the column name for the CONTACT_DISPLAY field */
    public static final String CONTACT_DISPLAY;
      /** the column name for the DEAR field */
    public static final String DEAR;
      /** the column name for the ADDRESS_1 field */
    public static final String ADDRESS_1;
      /** the column name for the ADDRESS_2 field */
    public static final String ADDRESS_2;
      /** the column name for the ADDRESS_3 field */
    public static final String ADDRESS_3;
      /** the column name for the CITY field */
    public static final String CITY;
      /** the column name for the ZIP field */
    public static final String ZIP;
      /** the column name for the STATE field */
    public static final String STATE;
      /** the column name for the COUNTRY_ID field */
    public static final String COUNTRY_ID;
      /** the column name for the REGION_ID field */
    public static final String REGION_ID;
      /** the column name for the SEC_ADDRESS_1 field */
    public static final String SEC_ADDRESS_1;
      /** the column name for the SEC_ADDRESS_2 field */
    public static final String SEC_ADDRESS_2;
      /** the column name for the SEC_ADDRESS_3 field */
    public static final String SEC_ADDRESS_3;
      /** the column name for the SEC_CITY field */
    public static final String SEC_CITY;
      /** the column name for the SEC_ZIP field */
    public static final String SEC_ZIP;
      /** the column name for the SEC_STATE field */
    public static final String SEC_STATE;
      /** the column name for the SEC_COUNTRY_ID field */
    public static final String SEC_COUNTRY_ID;
      /** the column name for the SEC_REGION_ID field */
    public static final String SEC_REGION_ID;
      /** the column name for the PHONE_HOME field */
    public static final String PHONE_HOME;
      /** the column name for the PHONE_WORK field */
    public static final String PHONE_WORK;
      /** the column name for the PHONE_MOBILE field */
    public static final String PHONE_MOBILE;
      /** the column name for the FAX field */
    public static final String FAX;
      /** the column name for the EMAIL field */
    public static final String EMAIL;
      /** the column name for the EMAIL_2 field */
    public static final String EMAIL_2;
      /** the column name for the EMAIL_FORMAT field */
    public static final String EMAIL_FORMAT;
      /** the column name for the SEND_NEWS field */
    public static final String SEND_NEWS;
      /** the column name for the WEB_URL field */
    public static final String WEB_URL;
      /** the column name for the LANGUAGE_ID field */
    public static final String LANGUAGE_ID;
      /** the column name for the GENDER field */
    public static final String GENDER;
      /** the column name for the BIRTHDATE field */
    public static final String BIRTHDATE;
      /** the column name for the ANNIVERSARY field */
    public static final String ANNIVERSARY;
      /** the column name for the JOB_TITLE field */
    public static final String JOB_TITLE;
      /** the column name for the JOB_POSITION_ID field */
    public static final String JOB_POSITION_ID;
      /** the column name for the DEPARTMENT field */
    public static final String DEPARTMENT;
      /** the column name for the ASSISTANT_NAME field */
    public static final String ASSISTANT_NAME;
      /** the column name for the ASSISTANT_PHONE field */
    public static final String ASSISTANT_PHONE;
      /** the column name for the ASSISTANT_EMAIL field */
    public static final String ASSISTANT_EMAIL;
      /** the column name for the CUSTOM_1 field */
    public static final String CUSTOM_1;
      /** the column name for the CUSTOM_2 field */
    public static final String CUSTOM_2;
      /** the column name for the CUSTOM_3 field */
    public static final String CUSTOM_3;
      /** the column name for the CUSTOM_4 field */
    public static final String CUSTOM_4;
      /** the column name for the CUSTOM_5 field */
    public static final String CUSTOM_5;
      /** the column name for the CUSTOM_6 field */
    public static final String CUSTOM_6;
      /** the column name for the NOTES field */
    public static final String NOTES;
      /** the column name for the CREATED field */
    public static final String CREATED;
      /** the column name for the MODIFIED field */
    public static final String MODIFIED;
      /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;
      /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;
  
    static
    {
          CONTACT_ID = "CONTACT.CONTACT_ID";
          CONTACT_CODE = "CONTACT.CONTACT_CODE";
          STATUS = "CONTACT.STATUS";
          PRIORITY = "CONTACT.PRIORITY";
          CUSTOMER_ID = "CONTACT.CUSTOMER_ID";
          CONTACT_CAT_ID = "CONTACT.CONTACT_CAT_ID";
          SALUTATION_ID = "CONTACT.SALUTATION_ID";
          FIRST_NAME = "CONTACT.FIRST_NAME";
          LAST_NAME = "CONTACT.LAST_NAME";
          SUFFIX = "CONTACT.SUFFIX";
          CONTACT_DISPLAY = "CONTACT.CONTACT_DISPLAY";
          DEAR = "CONTACT.DEAR";
          ADDRESS_1 = "CONTACT.ADDRESS_1";
          ADDRESS_2 = "CONTACT.ADDRESS_2";
          ADDRESS_3 = "CONTACT.ADDRESS_3";
          CITY = "CONTACT.CITY";
          ZIP = "CONTACT.ZIP";
          STATE = "CONTACT.STATE";
          COUNTRY_ID = "CONTACT.COUNTRY_ID";
          REGION_ID = "CONTACT.REGION_ID";
          SEC_ADDRESS_1 = "CONTACT.SEC_ADDRESS_1";
          SEC_ADDRESS_2 = "CONTACT.SEC_ADDRESS_2";
          SEC_ADDRESS_3 = "CONTACT.SEC_ADDRESS_3";
          SEC_CITY = "CONTACT.SEC_CITY";
          SEC_ZIP = "CONTACT.SEC_ZIP";
          SEC_STATE = "CONTACT.SEC_STATE";
          SEC_COUNTRY_ID = "CONTACT.SEC_COUNTRY_ID";
          SEC_REGION_ID = "CONTACT.SEC_REGION_ID";
          PHONE_HOME = "CONTACT.PHONE_HOME";
          PHONE_WORK = "CONTACT.PHONE_WORK";
          PHONE_MOBILE = "CONTACT.PHONE_MOBILE";
          FAX = "CONTACT.FAX";
          EMAIL = "CONTACT.EMAIL";
          EMAIL_2 = "CONTACT.EMAIL_2";
          EMAIL_FORMAT = "CONTACT.EMAIL_FORMAT";
          SEND_NEWS = "CONTACT.SEND_NEWS";
          WEB_URL = "CONTACT.WEB_URL";
          LANGUAGE_ID = "CONTACT.LANGUAGE_ID";
          GENDER = "CONTACT.GENDER";
          BIRTHDATE = "CONTACT.BIRTHDATE";
          ANNIVERSARY = "CONTACT.ANNIVERSARY";
          JOB_TITLE = "CONTACT.JOB_TITLE";
          JOB_POSITION_ID = "CONTACT.JOB_POSITION_ID";
          DEPARTMENT = "CONTACT.DEPARTMENT";
          ASSISTANT_NAME = "CONTACT.ASSISTANT_NAME";
          ASSISTANT_PHONE = "CONTACT.ASSISTANT_PHONE";
          ASSISTANT_EMAIL = "CONTACT.ASSISTANT_EMAIL";
          CUSTOM_1 = "CONTACT.CUSTOM_1";
          CUSTOM_2 = "CONTACT.CUSTOM_2";
          CUSTOM_3 = "CONTACT.CUSTOM_3";
          CUSTOM_4 = "CONTACT.CUSTOM_4";
          CUSTOM_5 = "CONTACT.CUSTOM_5";
          CUSTOM_6 = "CONTACT.CUSTOM_6";
          NOTES = "CONTACT.NOTES";
          CREATED = "CONTACT.CREATED";
          MODIFIED = "CONTACT.MODIFIED";
          CREATED_BY = "CONTACT.CREATED_BY";
          MODIFIED_BY = "CONTACT.MODIFIED_BY";
          if (Torque.isInit())
        {
            try
            {
                getMapBuilder(ContactMapBuilder.CLASS_NAME);
            }
            catch (Exception e)
            {
                log.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(ContactMapBuilder.CLASS_NAME);
        }
    }
 
    /** number of columns for this peer */
    public static final int numColumns =  58;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.campware.cream.om.Contact";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            log.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Torque developers <torque-dev@db.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }

    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }


  
    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseContactPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                                                                                                                                                                                                                                                                                              
        setDbName(criteria);

        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
          criteria.addSelectColumn(CONTACT_ID);
          criteria.addSelectColumn(CONTACT_CODE);
          criteria.addSelectColumn(STATUS);
          criteria.addSelectColumn(PRIORITY);
          criteria.addSelectColumn(CUSTOMER_ID);
          criteria.addSelectColumn(CONTACT_CAT_ID);
          criteria.addSelectColumn(SALUTATION_ID);
          criteria.addSelectColumn(FIRST_NAME);
          criteria.addSelectColumn(LAST_NAME);
          criteria.addSelectColumn(SUFFIX);
          criteria.addSelectColumn(CONTACT_DISPLAY);
          criteria.addSelectColumn(DEAR);
          criteria.addSelectColumn(ADDRESS_1);
          criteria.addSelectColumn(ADDRESS_2);
          criteria.addSelectColumn(ADDRESS_3);
          criteria.addSelectColumn(CITY);
          criteria.addSelectColumn(ZIP);
          criteria.addSelectColumn(STATE);
          criteria.addSelectColumn(COUNTRY_ID);
          criteria.addSelectColumn(REGION_ID);
          criteria.addSelectColumn(SEC_ADDRESS_1);
          criteria.addSelectColumn(SEC_ADDRESS_2);
          criteria.addSelectColumn(SEC_ADDRESS_3);
          criteria.addSelectColumn(SEC_CITY);
          criteria.addSelectColumn(SEC_ZIP);
          criteria.addSelectColumn(SEC_STATE);
          criteria.addSelectColumn(SEC_COUNTRY_ID);
          criteria.addSelectColumn(SEC_REGION_ID);
          criteria.addSelectColumn(PHONE_HOME);
          criteria.addSelectColumn(PHONE_WORK);
          criteria.addSelectColumn(PHONE_MOBILE);
          criteria.addSelectColumn(FAX);
          criteria.addSelectColumn(EMAIL);
          criteria.addSelectColumn(EMAIL_2);
          criteria.addSelectColumn(EMAIL_FORMAT);
          criteria.addSelectColumn(SEND_NEWS);
          criteria.addSelectColumn(WEB_URL);
          criteria.addSelectColumn(LANGUAGE_ID);
          criteria.addSelectColumn(GENDER);
          criteria.addSelectColumn(BIRTHDATE);
          criteria.addSelectColumn(ANNIVERSARY);
          criteria.addSelectColumn(JOB_TITLE);
          criteria.addSelectColumn(JOB_POSITION_ID);
          criteria.addSelectColumn(DEPARTMENT);
          criteria.addSelectColumn(ASSISTANT_NAME);
          criteria.addSelectColumn(ASSISTANT_PHONE);
          criteria.addSelectColumn(ASSISTANT_EMAIL);
          criteria.addSelectColumn(CUSTOM_1);
          criteria.addSelectColumn(CUSTOM_2);
          criteria.addSelectColumn(CUSTOM_3);
          criteria.addSelectColumn(CUSTOM_4);
          criteria.addSelectColumn(CUSTOM_5);
          criteria.addSelectColumn(CUSTOM_6);
          criteria.addSelectColumn(NOTES);
          criteria.addSelectColumn(CREATED);
          criteria.addSelectColumn(MODIFIED);
          criteria.addSelectColumn(CREATED_BY);
          criteria.addSelectColumn(MODIFIED_BY);
      }

    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Contact row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Contact obj = (Contact) cls.newInstance();
            ContactPeer.populateObject(row, offset, obj);
                  obj.setModified(false);
              obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Contact obj)
        throws TorqueException
    {
        try
        {
                obj.setContactId(row.getValue(offset + 0).asInt());
                  obj.setContactCode(row.getValue(offset + 1).asString());
                  obj.setStatus(row.getValue(offset + 2).asInt());
                  obj.setPriority(row.getValue(offset + 3).asInt());
                  obj.setCustomerId(row.getValue(offset + 4).asInt());
                  obj.setContactCatId(row.getValue(offset + 5).asInt());
                  obj.setSalutationId(row.getValue(offset + 6).asInt());
                  obj.setFirstName(row.getValue(offset + 7).asString());
                  obj.setLastName(row.getValue(offset + 8).asString());
                  obj.setSuffix(row.getValue(offset + 9).asString());
                  obj.setContactDisplay(row.getValue(offset + 10).asString());
                  obj.setDear(row.getValue(offset + 11).asString());
                  obj.setAddress1(row.getValue(offset + 12).asString());
                  obj.setAddress2(row.getValue(offset + 13).asString());
                  obj.setAddress3(row.getValue(offset + 14).asString());
                  obj.setCity(row.getValue(offset + 15).asString());
                  obj.setZip(row.getValue(offset + 16).asString());
                  obj.setState(row.getValue(offset + 17).asString());
                  obj.setCountryId(row.getValue(offset + 18).asInt());
                  obj.setRegionId(row.getValue(offset + 19).asInt());
                  obj.setSecAddress1(row.getValue(offset + 20).asString());
                  obj.setSecAddress2(row.getValue(offset + 21).asString());
                  obj.setSecAddress3(row.getValue(offset + 22).asString());
                  obj.setSecCity(row.getValue(offset + 23).asString());
                  obj.setSecZip(row.getValue(offset + 24).asString());
                  obj.setSecState(row.getValue(offset + 25).asString());
                  obj.setSecCountryId(row.getValue(offset + 26).asInt());
                  obj.setSecRegionId(row.getValue(offset + 27).asInt());
                  obj.setPhoneHome(row.getValue(offset + 28).asString());
                  obj.setPhoneWork(row.getValue(offset + 29).asString());
                  obj.setPhoneMobile(row.getValue(offset + 30).asString());
                  obj.setFax(row.getValue(offset + 31).asString());
                  obj.setEmail(row.getValue(offset + 32).asString());
                  obj.setEmail2(row.getValue(offset + 33).asString());
                  obj.setEmailFormat(row.getValue(offset + 34).asInt());
                  obj.setSendNews(row.getValue(offset + 35).asInt());
                  obj.setWebUrl(row.getValue(offset + 36).asString());
                  obj.setLanguageId(row.getValue(offset + 37).asInt());
                  obj.setGender(row.getValue(offset + 38).asInt());
                  obj.setBirthdate(row.getValue(offset + 39).asUtilDate());
                  obj.setAnniversary(row.getValue(offset + 40).asUtilDate());
                  obj.setJobTitle(row.getValue(offset + 41).asString());
                  obj.setJobPositionId(row.getValue(offset + 42).asInt());
                  obj.setDepartment(row.getValue(offset + 43).asString());
                  obj.setAssistantName(row.getValue(offset + 44).asString());
                  obj.setAssistantPhone(row.getValue(offset + 45).asString());
                  obj.setAssistantEmail(row.getValue(offset + 46).asString());
                  obj.setCustom1(row.getValue(offset + 47).asString());
                  obj.setCustom2(row.getValue(offset + 48).asString());
                  obj.setCustom3(row.getValue(offset + 49).asString());
                  obj.setCustom4(row.getValue(offset + 50).asString());
                  obj.setCustom5(row.getValue(offset + 51).asString());
                  obj.setCustom6(row.getValue(offset + 52).asString());
                  obj.setNotes(row.getValue(offset + 53).asString());
                  obj.setCreated(row.getValue(offset + 54).asUtilDate());
                  obj.setModified(row.getValue(offset + 55).asUtilDate());
                  obj.setCreatedBy(row.getValue(offset + 56).asString());
                  obj.setModifiedBy(row.getValue(offset + 57).asString());
              }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseContactPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                                                                                                                                                                                                                                                                                              
        setDbName(criteria);

        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
              results.add(ContactPeer.row2Object(row, 1,
                ContactPeer.getOMClass()));
          }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
        return CLASS_DEFAULT;
    }

    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseContactPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                   selectCriteria.put(CONTACT_ID, criteria.remove(CONTACT_ID));

        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         ContactPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                                                                                                                                                                                                                                                                                              
        setDbName(criteria);

        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Contact obj) throws TorqueException
    {
        return doSelect(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Contact obj) throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj)));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Contact obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Contact obj) throws TorqueException
    {
        doDelete(buildSelectCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Contact) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Contact obj, Connection con)
        throws TorqueException
    {
          obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
          obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Contact) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Contact obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Contact) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Contact obj, Connection con)
        throws TorqueException
    {
        doDelete(buildSelectCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseContactPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(CONTACT_ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Contact obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
            criteria.add(CONTACT_ID, obj.getContactId());
              criteria.add(CONTACT_CODE, obj.getContactCode());
              criteria.add(STATUS, obj.getStatus());
              criteria.add(PRIORITY, obj.getPriority());
              criteria.add(CUSTOMER_ID, obj.getCustomerId());
              criteria.add(CONTACT_CAT_ID, obj.getContactCatId());
              criteria.add(SALUTATION_ID, obj.getSalutationId());
              criteria.add(FIRST_NAME, obj.getFirstName());
              criteria.add(LAST_NAME, obj.getLastName());
              criteria.add(SUFFIX, obj.getSuffix());
              criteria.add(CONTACT_DISPLAY, obj.getContactDisplay());
              criteria.add(DEAR, obj.getDear());
              criteria.add(ADDRESS_1, obj.getAddress1());
              criteria.add(ADDRESS_2, obj.getAddress2());
              criteria.add(ADDRESS_3, obj.getAddress3());
              criteria.add(CITY, obj.getCity());
              criteria.add(ZIP, obj.getZip());
              criteria.add(STATE, obj.getState());
              criteria.add(COUNTRY_ID, obj.getCountryId());
              criteria.add(REGION_ID, obj.getRegionId());
              criteria.add(SEC_ADDRESS_1, obj.getSecAddress1());
              criteria.add(SEC_ADDRESS_2, obj.getSecAddress2());
              criteria.add(SEC_ADDRESS_3, obj.getSecAddress3());
              criteria.add(SEC_CITY, obj.getSecCity());
              criteria.add(SEC_ZIP, obj.getSecZip());
              criteria.add(SEC_STATE, obj.getSecState());
              criteria.add(SEC_COUNTRY_ID, obj.getSecCountryId());
              criteria.add(SEC_REGION_ID, obj.getSecRegionId());
              criteria.add(PHONE_HOME, obj.getPhoneHome());
              criteria.add(PHONE_WORK, obj.getPhoneWork());
              criteria.add(PHONE_MOBILE, obj.getPhoneMobile());
              criteria.add(FAX, obj.getFax());
              criteria.add(EMAIL, obj.getEmail());
              criteria.add(EMAIL_2, obj.getEmail2());
              criteria.add(EMAIL_FORMAT, obj.getEmailFormat());
              criteria.add(SEND_NEWS, obj.getSendNews());
              criteria.add(WEB_URL, obj.getWebUrl());
              criteria.add(LANGUAGE_ID, obj.getLanguageId());
              criteria.add(GENDER, obj.getGender());
              criteria.add(BIRTHDATE, obj.getBirthdate());
              criteria.add(ANNIVERSARY, obj.getAnniversary());
              criteria.add(JOB_TITLE, obj.getJobTitle());
              criteria.add(JOB_POSITION_ID, obj.getJobPositionId());
              criteria.add(DEPARTMENT, obj.getDepartment());
              criteria.add(ASSISTANT_NAME, obj.getAssistantName());
              criteria.add(ASSISTANT_PHONE, obj.getAssistantPhone());
              criteria.add(ASSISTANT_EMAIL, obj.getAssistantEmail());
              criteria.add(CUSTOM_1, obj.getCustom1());
              criteria.add(CUSTOM_2, obj.getCustom2());
              criteria.add(CUSTOM_3, obj.getCustom3());
              criteria.add(CUSTOM_4, obj.getCustom4());
              criteria.add(CUSTOM_5, obj.getCustom5());
              criteria.add(CUSTOM_6, obj.getCustom6());
              criteria.add(NOTES, obj.getNotes());
              criteria.add(CREATED, obj.getCreated());
              criteria.add(MODIFIED, obj.getModified());
              criteria.add(CREATED_BY, obj.getCreatedBy());
              criteria.add(MODIFIED_BY, obj.getModifiedBy());
          return criteria;
    }

    /** Build a Criteria object from the data object for this peer, skipping all binary columns */
    public static Criteria buildSelectCriteria( Contact obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
              if (!obj.isNew())
                    criteria.add(CONTACT_ID, obj.getContactId());
                          criteria.add(CONTACT_CODE, obj.getContactCode());
                          criteria.add(STATUS, obj.getStatus());
                          criteria.add(PRIORITY, obj.getPriority());
                          criteria.add(CUSTOMER_ID, obj.getCustomerId());
                          criteria.add(CONTACT_CAT_ID, obj.getContactCatId());
                          criteria.add(SALUTATION_ID, obj.getSalutationId());
                          criteria.add(FIRST_NAME, obj.getFirstName());
                          criteria.add(LAST_NAME, obj.getLastName());
                          criteria.add(SUFFIX, obj.getSuffix());
                          criteria.add(CONTACT_DISPLAY, obj.getContactDisplay());
                          criteria.add(DEAR, obj.getDear());
                          criteria.add(ADDRESS_1, obj.getAddress1());
                          criteria.add(ADDRESS_2, obj.getAddress2());
                          criteria.add(ADDRESS_3, obj.getAddress3());
                          criteria.add(CITY, obj.getCity());
                          criteria.add(ZIP, obj.getZip());
                          criteria.add(STATE, obj.getState());
                          criteria.add(COUNTRY_ID, obj.getCountryId());
                          criteria.add(REGION_ID, obj.getRegionId());
                          criteria.add(SEC_ADDRESS_1, obj.getSecAddress1());
                          criteria.add(SEC_ADDRESS_2, obj.getSecAddress2());
                          criteria.add(SEC_ADDRESS_3, obj.getSecAddress3());
                          criteria.add(SEC_CITY, obj.getSecCity());
                          criteria.add(SEC_ZIP, obj.getSecZip());
                          criteria.add(SEC_STATE, obj.getSecState());
                          criteria.add(SEC_COUNTRY_ID, obj.getSecCountryId());
                          criteria.add(SEC_REGION_ID, obj.getSecRegionId());
                          criteria.add(PHONE_HOME, obj.getPhoneHome());
                          criteria.add(PHONE_WORK, obj.getPhoneWork());
                          criteria.add(PHONE_MOBILE, obj.getPhoneMobile());
                          criteria.add(FAX, obj.getFax());
                          criteria.add(EMAIL, obj.getEmail());
                          criteria.add(EMAIL_2, obj.getEmail2());
                          criteria.add(EMAIL_FORMAT, obj.getEmailFormat());
                          criteria.add(SEND_NEWS, obj.getSendNews());
                          criteria.add(WEB_URL, obj.getWebUrl());
                          criteria.add(LANGUAGE_ID, obj.getLanguageId());
                          criteria.add(GENDER, obj.getGender());
                          criteria.add(BIRTHDATE, obj.getBirthdate());
                          criteria.add(ANNIVERSARY, obj.getAnniversary());
                          criteria.add(JOB_TITLE, obj.getJobTitle());
                          criteria.add(JOB_POSITION_ID, obj.getJobPositionId());
                          criteria.add(DEPARTMENT, obj.getDepartment());
                          criteria.add(ASSISTANT_NAME, obj.getAssistantName());
                          criteria.add(ASSISTANT_PHONE, obj.getAssistantPhone());
                          criteria.add(ASSISTANT_EMAIL, obj.getAssistantEmail());
                          criteria.add(CUSTOM_1, obj.getCustom1());
                          criteria.add(CUSTOM_2, obj.getCustom2());
                          criteria.add(CUSTOM_3, obj.getCustom3());
                          criteria.add(CUSTOM_4, obj.getCustom4());
                          criteria.add(CUSTOM_5, obj.getCustom5());
                          criteria.add(CUSTOM_6, obj.getCustom6());
                          criteria.add(NOTES, obj.getNotes());
                          criteria.add(CREATED, obj.getCreated());
                          criteria.add(MODIFIED, obj.getModified());
                          criteria.add(CREATED_BY, obj.getCreatedBy());
                          criteria.add(MODIFIED_BY, obj.getModifiedBy());
              return criteria;
    }
 
    
        /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Contact retrieveByPK(int pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Contact retrieveByPK(int pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        return retrieveByPK(SimpleKey.keyFor(pk), con);
    }
  
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Contact retrieveByPK(ObjectKey pk)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Connection db = null;
        Contact retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     * @throws NoRowsException Primary key was not found in database.
     * @throws TooManyRowsException Primary key was not found in database.
     */
    public static Contact retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException, NoRowsException, TooManyRowsException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() == 0)
        {
            throw new NoRowsException("Failed to select a row.");
        }
        else if (v.size() > 1)
        {
            throw new TooManyRowsException("Failed to select only one row.");
        }
        else
        {
            return (Contact)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( CONTACT_ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



                          
                                              
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Customer objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCustomer(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        CustomerPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.CUSTOMER_ID,
            CustomerPeer.CUSTOMER_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = CustomerPeer.getOMClass();
                    Customer obj2 = (Customer)CustomerPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContact(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Salutation objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinSalutation(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        SalutationPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.SALUTATION_ID,
            SalutationPeer.SALUTATION_ID);
        

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = SalutationPeer.getOMClass();
                    Salutation obj2 = (Salutation)SalutationPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj2 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContact(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * ContactCategory objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinContactCategory(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        ContactCategoryPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.CONTACT_CAT_ID,
            ContactCategoryPeer.CONTACT_CAT_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = ContactCategoryPeer.getOMClass();
                    ContactCategory obj2 = (ContactCategory)ContactCategoryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj2 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContact(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                                      
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Country objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCountryRelatedByCountryId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        CountryPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.COUNTRY_ID,
            CountryPeer.COUNTRY_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = CountryPeer.getOMClass();
                    Country obj2 = (Country)CountryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj2 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContactRelatedByCountryId(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContactsRelatedByCountryId();
                obj2.addContactRelatedByCountryId(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                                      
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Region objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinRegionRelatedByRegionId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        RegionPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.REGION_ID,
            RegionPeer.REGION_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = RegionPeer.getOMClass();
                    Region obj2 = (Region)RegionPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj2 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContactRelatedByRegionId(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContactsRelatedByRegionId();
                obj2.addContactRelatedByRegionId(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                                      
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Country objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCountryRelatedBySecCountryId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        CountryPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.SEC_COUNTRY_ID,
            CountryPeer.COUNTRY_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = CountryPeer.getOMClass();
                    Country obj2 = (Country)CountryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj2 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContactRelatedBySecCountryId(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContactsRelatedBySecCountryId();
                obj2.addContactRelatedBySecCountryId(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                                      
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Region objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinRegionRelatedBySecRegionId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        RegionPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.SEC_REGION_ID,
            RegionPeer.REGION_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = RegionPeer.getOMClass();
                    Region obj2 = (Region)RegionPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj2 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContactRelatedBySecRegionId(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContactsRelatedBySecRegionId();
                obj2.addContactRelatedBySecRegionId(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * Language objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLanguage(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        LanguagePeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.LANGUAGE_ID,
            LanguagePeer.LANGUAGE_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = LanguagePeer.getOMClass();
                    Language obj2 = (Language)LanguagePeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj2 = (Language)temp_obj1.getLanguage();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContact(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                                                            
                
                

    /**
     * selects a collection of Contact objects pre-filled with their
     * JobPosition objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinJobPosition(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        ContactPeer.addSelectColumns(criteria);
        int offset = numColumns + 1;
        JobPositionPeer.addSelectColumns(criteria);


                        criteria.addJoin(ContactPeer.JOB_POSITION_ID,
            JobPositionPeer.JOB_POSITION_ID);
        


        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact) ContactPeer
                .row2Object(row, 1, omClass);
                     omClass = JobPositionPeer.getOMClass();
                    JobPosition obj2 = (JobPosition)JobPositionPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj2 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                              temp_obj2.addContact(obj1);
                              break;
                }
            }
                      if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                      results.add(obj1);
        }
        return results;
    }
                    
  
                                                                                                
          
        
                                  
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCustomer(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                                                  
                    SalutationPeer.addSelectColumns(criteria);
        int offset3 = offset2 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset4 = offset3 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset6 = offset5 + RegionPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset7 = offset6 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset8 = offset7 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset9 = offset8 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset10 = offset9 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                                  
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj2 = (Salutation)SalutationPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj2 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj3 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj3 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj4 = (Country)CountryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj4 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContactsRelatedByCountryId();
                obj4.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj5 = (Region)RegionPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj5 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByRegionId();
                obj5.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj6 = (Country)CountryPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj6 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecCountryId();
                obj6.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj7 = (Region)RegionPeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj7 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContactsRelatedBySecRegionId();
                obj7.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj8 = (Language)LanguagePeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj8 = (Language)temp_obj1.getLanguage();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj9 = (JobPosition)JobPositionPeer
                .row2Object( row, offset9, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj9 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj9.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj9.initContacts();
                obj9.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptSalutation(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                                                  
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset4 = offset3 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset6 = offset5 + RegionPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset7 = offset6 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset8 = offset7 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset9 = offset8 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset10 = offset9 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj3 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj3 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj4 = (Country)CountryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj4 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContactsRelatedByCountryId();
                obj4.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj5 = (Region)RegionPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj5 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByRegionId();
                obj5.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj6 = (Country)CountryPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj6 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecCountryId();
                obj6.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj7 = (Region)RegionPeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj7 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContactsRelatedBySecRegionId();
                obj7.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj8 = (Language)LanguagePeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj8 = (Language)temp_obj1.getLanguage();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj9 = (JobPosition)JobPositionPeer
                .row2Object( row, offset9, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj9 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj9.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj9.initContacts();
                obj9.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptContactCategory(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                                                  
                    CountryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset6 = offset5 + RegionPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset7 = offset6 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset8 = offset7 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset9 = offset8 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset10 = offset9 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj4 = (Country)CountryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj4 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContactsRelatedByCountryId();
                obj4.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj5 = (Region)RegionPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj5 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByRegionId();
                obj5.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj6 = (Country)CountryPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj6 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecCountryId();
                obj6.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj7 = (Region)RegionPeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj7 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContactsRelatedBySecRegionId();
                obj7.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj8 = (Language)LanguagePeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj8 = (Language)temp_obj1.getLanguage();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj9 = (JobPosition)JobPositionPeer
                .row2Object( row, offset9, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj9 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj9.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj9.initContacts();
                obj9.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                            
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCountryRelatedByCountryId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                                                  
                    RegionPeer.addSelectColumns(criteria);
        int offset6 = offset5 + RegionPeer.numColumns;
                                                                
                                                  
                    RegionPeer.addSelectColumns(criteria);
        int offset7 = offset6 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset8 = offset7 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj5 = (Region)RegionPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj5 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByRegionId();
                obj5.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj6 = (Region)RegionPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj6 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecRegionId();
                obj6.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj7 = (Language)LanguagePeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj7 = (Language)temp_obj1.getLanguage();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContacts();
                obj7.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj8 = (JobPosition)JobPositionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj8 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                            
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptRegionRelatedByRegionId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset6 = offset5 + CountryPeer.numColumns;
                                                                
                                                  
                    CountryPeer.addSelectColumns(criteria);
        int offset7 = offset6 + CountryPeer.numColumns;
                                                                
                                                  
                    LanguagePeer.addSelectColumns(criteria);
        int offset8 = offset7 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj5 = (Country)CountryPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj5 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByCountryId();
                obj5.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj6 = (Country)CountryPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj6 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecCountryId();
                obj6.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj7 = (Language)LanguagePeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj7 = (Language)temp_obj1.getLanguage();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContacts();
                obj7.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj8 = (JobPosition)JobPositionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj8 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                            
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCountryRelatedBySecCountryId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                                                  
                    RegionPeer.addSelectColumns(criteria);
        int offset6 = offset5 + RegionPeer.numColumns;
                                                                
                                                  
                    RegionPeer.addSelectColumns(criteria);
        int offset7 = offset6 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset8 = offset7 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj5 = (Region)RegionPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj5 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByRegionId();
                obj5.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj6 = (Region)RegionPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj6 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecRegionId();
                obj6.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj7 = (Language)LanguagePeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj7 = (Language)temp_obj1.getLanguage();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContacts();
                obj7.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj8 = (JobPosition)JobPositionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj8 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                            
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptRegionRelatedBySecRegionId(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset6 = offset5 + CountryPeer.numColumns;
                                                                
                                                  
                    CountryPeer.addSelectColumns(criteria);
        int offset7 = offset6 + CountryPeer.numColumns;
                                                                
                                                  
                    LanguagePeer.addSelectColumns(criteria);
        int offset8 = offset7 + LanguagePeer.numColumns;
                                                                
                    JobPositionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + JobPositionPeer.numColumns;

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj5 = (Country)CountryPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj5 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByCountryId();
                obj5.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                  
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj6 = (Country)CountryPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj6 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedBySecCountryId();
                obj6.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj7 = (Language)LanguagePeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj7 = (Language)temp_obj1.getLanguage();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContacts();
                obj7.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj8 = (JobPosition)JobPositionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj8 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContacts();
                obj8.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLanguage(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset6 = offset5 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset7 = offset6 + RegionPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset8 = offset7 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + RegionPeer.numColumns;
                                                                
                                                  
                    JobPositionPeer.addSelectColumns(criteria);
        int offset10 = offset9 + JobPositionPeer.numColumns;
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj5 = (Country)CountryPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj5 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByCountryId();
                obj5.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj6 = (Region)RegionPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj6 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedByRegionId();
                obj6.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj7 = (Country)CountryPeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj7 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContactsRelatedBySecCountryId();
                obj7.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj8 = (Region)RegionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj8 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContactsRelatedBySecRegionId();
                obj8.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                                  
                                                        
                            
              
                           omClass = JobPositionPeer.getOMClass();
                          JobPosition obj9 = (JobPosition)JobPositionPeer
                .row2Object( row, offset9, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                JobPosition temp_obj9 = (JobPosition)temp_obj1.getJobPosition();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj9.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj9.initContacts();
                obj9.addContact(obj1);
            }
                                                                results.add(obj1);
        }
        return results;
    }
        
        
                                  
                

    /**
     * selects a collection of Contact objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in ContactPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptJobPosition(Criteria criteria)
        throws TorqueException
    {
        setDbName(criteria);

        addSelectColumns(criteria);
        int offset2 = numColumns + 1;
                                    
                    CustomerPeer.addSelectColumns(criteria);
        int offset3 = offset2 + CustomerPeer.numColumns;
                                                                
                    SalutationPeer.addSelectColumns(criteria);
        int offset4 = offset3 + SalutationPeer.numColumns;
                                                                
                    ContactCategoryPeer.addSelectColumns(criteria);
        int offset5 = offset4 + ContactCategoryPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset6 = offset5 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset7 = offset6 + RegionPeer.numColumns;
                                                                
                    CountryPeer.addSelectColumns(criteria);
        int offset8 = offset7 + CountryPeer.numColumns;
                                                                
                    RegionPeer.addSelectColumns(criteria);
        int offset9 = offset8 + RegionPeer.numColumns;
                                                                
                    LanguagePeer.addSelectColumns(criteria);
        int offset10 = offset9 + LanguagePeer.numColumns;
                                                                

        List rows = BasePeer.doSelect(criteria);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                            Class omClass = ContactPeer.getOMClass();
                    Contact obj1 = (Contact)ContactPeer
                .row2Object(row, 1, omClass);
                                                
                                                        
                            
              
                           omClass = CustomerPeer.getOMClass();
                          Customer obj2 = (Customer)CustomerPeer
                .row2Object( row, offset2, omClass);

               boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Customer temp_obj2 = (Customer)temp_obj1.getCustomer();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj2.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj2.initContacts();
                obj2.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = SalutationPeer.getOMClass();
                          Salutation obj3 = (Salutation)SalutationPeer
                .row2Object( row, offset3, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Salutation temp_obj3 = (Salutation)temp_obj1.getSalutation();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj3.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj3.initContacts();
                obj3.addContact(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = ContactCategoryPeer.getOMClass();
                          ContactCategory obj4 = (ContactCategory)ContactCategoryPeer
                .row2Object( row, offset4, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                ContactCategory temp_obj4 = (ContactCategory)temp_obj1.getContactCategory();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj4.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj4.initContacts();
                obj4.addContact(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj5 = (Country)CountryPeer
                .row2Object( row, offset5, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj5 = (Country)temp_obj1.getCountryRelatedByCountryId();
                if (temp_obj5.getPrimaryKey().equals(obj5.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj5.addContactRelatedByCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj5.initContactsRelatedByCountryId();
                obj5.addContactRelatedByCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj6 = (Region)RegionPeer
                .row2Object( row, offset6, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj6 = (Region)temp_obj1.getRegionRelatedByRegionId();
                if (temp_obj6.getPrimaryKey().equals(obj6.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj6.addContactRelatedByRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj6.initContactsRelatedByRegionId();
                obj6.addContactRelatedByRegionId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = CountryPeer.getOMClass();
                          Country obj7 = (Country)CountryPeer
                .row2Object( row, offset7, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Country temp_obj7 = (Country)temp_obj1.getCountryRelatedBySecCountryId();
                if (temp_obj7.getPrimaryKey().equals(obj7.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj7.addContactRelatedBySecCountryId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj7.initContactsRelatedBySecCountryId();
                obj7.addContactRelatedBySecCountryId(obj1);
            }
                                                                                    
                                                                        
                            
              
                           omClass = RegionPeer.getOMClass();
                          Region obj8 = (Region)RegionPeer
                .row2Object( row, offset8, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Region temp_obj8 = (Region)temp_obj1.getRegionRelatedBySecRegionId();
                if (temp_obj8.getPrimaryKey().equals(obj8.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj8.addContactRelatedBySecRegionId(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj8.initContactsRelatedBySecRegionId();
                obj8.addContactRelatedBySecRegionId(obj1);
            }
                                                                                    
                                                        
                            
              
                           omClass = LanguagePeer.getOMClass();
                          Language obj9 = (Language)LanguagePeer
                .row2Object( row, offset9, omClass);

               newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Contact temp_obj1 = (Contact)results.get(j);
                Language temp_obj9 = (Language)temp_obj1.getLanguage();
                if (temp_obj9.getPrimaryKey().equals(obj9.getPrimaryKey()))
                {
                    newObject = false;
                                    temp_obj9.addContact(obj1);
                                    break;
                }
            }
                            if (newObject)
            {
                obj9.initContacts();
                obj9.addContact(obj1);
            }
                                                                                    
                                              results.add(obj1);
        }
        return results;
    }
                    
  
      /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
   
    private static void setDbName(Criteria crit)
    {
        // Set the correct dbName if it has not been overridden
        // crit.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (crit.getDbName() == Torque.getDefaultDB())
        {
            crit.setDbName(DATABASE_NAME);
        }
    }
}
